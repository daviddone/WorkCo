package com.bangcle.aop;


import com.alibaba.fastjson.JSONObject;
import com.bangcle.util.SelfCache;
import com.bangcle.util.TimeParse;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.Date;
@Aspect
@Component
@Slf4j
public class LogAopAspect {
	private JSONObject logJson = new JSONObject();
//	@Autowired
//	private SystemLogService logService;

	@Pointcut("execution(public * com.bangcle.controller.IndexController.*(..))") //此处需要过滤定时器
	private void controllerAspect() {
	}

	@Before("controllerAspect()")
	public void doBefore(JoinPoint joinPoint) throws Throwable {
		//获取session中的用户
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		Object user = request.getSession().getAttribute("user");
		String sessionId = request.getSession().getId();
		System.out.println("sessionId:"+sessionId);
		System.out.println("request.getRemoteHost():"+request.getRemoteHost());
		System.out.println("客户端系统名称："+System.getProperty("os.name"));
		logJson.put("app_id", SelfCache.get(SelfCache.appIdSessionKey(sessionId)));
		logJson.put("sessionId", sessionId);
		logJson.put("user_agent",request.getHeader("User-Agent"));
		logJson.put("referer",request.getHeader("Referer"));
		logJson.put("user_name",SelfCache.get(SelfCache.unameSessionKey(sessionId)));
		logJson.put("request_uri",request.getRequestURL().toString());
		logJson.put("remote_addr",request.getRemoteAddr());
		logJson.put("method",joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());
		logJson.put("create_date", TimeParse.Long2StrTime(System.currentTimeMillis(),"yyyy-MM-dd HH:mm:ss"));
		logJson.put("params", Arrays.toString(joinPoint.getArgs()));
	}

	@AfterReturning(returning = "ret", pointcut = "controllerAspect()")
	public void doAfterReturning(Object ret) throws Throwable {
		System.err.println("system_log:"+logJson.toString()); //fastjson null字段默认不显示。
		log.error("system_log:{}",logJson.toString());
	}

}
package com.bangcle;

import com.bangcle.util.ParaUtils;
import com.google.common.io.Files;
import java.io.File;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;


/**
 * Created by zhaogj on 03/11/2016.
 */
@SpringBootApplication
@Slf4j
public class Application {

  /**
   * 主方法.
   * param args
   */
  public static void main(String[] args) {
    //必须在此处设置
    setProperty();
    ParaUtils.TESTING = false;
    SpringApplication.run(Application.class, args);
  }

  /**
   * 设置运行时参数，/tmp下目录容易被删除，所以将默认/tmp下的目录指定到工程目录下.
   * 没有找到配置文件对应的参数名，先在程序中设定.目前只发现这些路径在/tmp下，如有还有，建议修改.
   * @Author: zhusiwei
   * @Data: 2018/2/5
   * @params
   **/
  public static void setProperty() {
    File tmpPath = new File(System.getProperty("user.dir") + "/tmp");
    if (tmpPath.exists() && tmpPath.isDirectory()) {
      File[] files = tmpPath.listFiles();
      for (File file : files) {
        log.info("delete tmp  {} = {}", file.getPath(), deleteDir(file));
      }
    }
    System.setProperty("java.io.tmpdir", tmpPath.getPath());
    System.setProperty("catalina.home", tmpPath.getPath());
    System.setProperty("catalina.base", tmpPath.getPath());
  }

  private static boolean deleteDir(File dir) {
    if (dir.isDirectory()) {
      String[] children = dir.list();
      for (int i = 0; i < children.length; i++) {
        boolean success = deleteDir(new File(dir, children[i]));
        if (!success) {
          return false;
        }
      }
    }
    // 目录此时为空，可以删除
    return dir.delete();
  }
}
package com.bangcle.component;

import com.bangcle.config.system.SystemInit;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.HbaseRepository;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.thread.CleanESDocThread;
import com.bangcle.thread.CreatReportThread;
import com.bangcle.thread.PushSubReportTaskThread;
import com.bangcle.util.ParaUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.ImportResource;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

/**
 * Created by zhaogj on 17/11/2016. 工程启动时需要加载的动作写在这里
 */
@Component
@Slf4j
@Order(value = 1)
@ImportResource(locations = {"classpath:kaptcha.xml"})
public class StartRunnerComponent implements CommandLineRunner {

  @Autowired
  private EsRepository es;

  @Autowired
  private SystemInit systemInit;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private HbaseRepository hbaseRepository;

  @Autowired
  private PushSubReportTaskThread pushSubReportTaskThread;

  @Autowired
  private CreatReportThread creatReportThread;

  @Override
  public void run(String... args) throws Exception {
    log.info("StartRunnerComponent is run");
    log.info("totalMemory:{}M", Runtime.getRuntime().totalMemory() / 1024 / 1024);
    if (ParaUtils.TESTING) {
      log.info("this is a test");
    } else {
      log.info("this is not a test");

      systemInit.initDatabase();
      systemInit.initAppleEquipment();
      hbaseRepository.init();
      //建行要求不存在es的情况下，页面也要能看 by zhaogj
      new Thread() {
        @Override
        public void run() {
          try {
            es.buildClient();
            es.keepAlive();
          } catch (Exception e) {
            log.error("", e);
          }
        }
      }.start();
      (new Thread(new CleanESDocThread(es, commonBaseService), "CleanESDocThread")).start();
      pushSubReportTaskThread.doJob();
      creatReportThread.doJob();
    }
  }

}
package com.bangcle.config.system;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.EnvDescription;
import com.bangcle.entity.ThreatDescription;
import com.bangcle.entity.User;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.EnvDescriptionRepository;
import com.bangcle.repository.ThreatDescriptionRepository;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.ThreatLocationFraudService;
import com.bangcle.util.PubString;
import com.google.common.base.Joiner;
import com.google.common.io.Files;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/1/31.
 */
@Slf4j
@Service
public class SystemInit {

  @Autowired
  EnvDescriptionRepository envDescriptionRepository;

  @Autowired
  ThreatDescriptionRepository threatDescriptionRepository;

  @Autowired
  private ThreatLocationFraudService threatLocationFraudService;

  @Autowired
  private UserRepository userRepository;

  @Autowired
  private AppRepository appRepository;


  public void initDatabase() {
    log.info("user.dir = {}", System.getProperty("user.dir"));
    initEvnDesc();
    initThreatDesc();
    createUserAndApp();
    updateLicenseSwitch();
  }

  /**
   * 默认创建超级管理员用户和演示应用.
   */
  private void createUserAndApp() {
    try {
      String email = "everisk@bangcle.com";
      String appName = "演示应用";
      Integer id = 1;
      User user = userRepository.findByEmail(email);
      Date createDate = new Date(1513238400000L);
      if (user == null) {
        user = new User();
        user.setName("超级管理员");
        user.setEncryptedPassword("$2a$10$Inlai5lTrhU5eA/.qIoTc.zmWnOb1eLvFiGctPhUS88aKYVdBzcgu");
        user.setEmail(email);
        user.setRoleId(0);
        user.setCreatedAt(createDate);
        user.setUpdatedAt(createDate);
        userRepository.save(user);
      }
      App app = appRepository.findById(id);
      if (app == null && user != null) {
        app = new App();
        app.setCreatedAt(createDate);
        app.setUpdatedAt(createDate);
        app.setName(appName);
        app.setUserId(user.getId());
        app.setId(id);
        Calendar calendar = Calendar.getInstance();
        Date date = new Date(System.currentTimeMillis());
        calendar.setTime(date);
        calendar.add(Calendar.YEAR, 5);
        date = calendar.getTime();
        app.setDateStartTime(new Date());
        app.setDateEndTime(date);
        app.setDliveInfo(1);
        appRepository.save(app);
      }
      //插入默认位置欺诈信息.
      JSONObject jsonObject = threatLocationFraudService.cheatAddrConfigSelect(id);
      JSONObject data = (JSONObject) jsonObject.get("data");
      if (data.isEmpty()) {
        threatLocationFraudService.cheatAddrConfigInsert(2.0, 15, id, new Date());
      }
    } catch (Exception e) {
      log.info("{}", e);
    }
  }

  private void updateLicenseSwitch() {
    List<App> all = appRepository.findAll();
    for (App app : all) {
      if (app.getId() != 1) {
        if (app.getParameters() != null && !"".equals(app.getParameters())) {
          String parameters = app.getParameters();
          JSONObject parametersJson = JSONObject.parseObject(parameters);
          JSONObject logic_switch = (JSONObject) parametersJson.get("logic_switch");
          JSONObject licenseInfo = licenseInfo(parametersJson, logic_switch);
          if (licenseInfo != null) {
            app.setParameters(licenseInfo.toJSONString());
            appRepository.save(app);
          }
        }
      }
    }
  }

  private JSONObject licenseInfo(JSONObject licenseInfo, JSONObject logicSwitch) {
    String[] originKeys = {"location", "host_fraud", "devices_reuse", "game_plugin", "speed"};
    String[] newKeys = {"position", "host", "device_reuse", "game_cheating", "accelerate"};
    boolean flag = false;
    for (int i = 0; i < originKeys.length; i++) {
      if (licenseInfo.containsKey(originKeys[i])) {
        licenseInfo.put(newKeys[i], licenseInfo.get(originKeys[i]));
        licenseInfo.remove(originKeys[i]);
        flag = true; // 需要更新
      }
    }
    licenseInfo.put("logic_switch", logicSwitch(logicSwitch));
    // 不更新返回null
    return flag ? licenseInfo : null;
  }

  private JSONObject logicSwitch(JSONObject logicSwitch) {
    String[] originKeys = {"location", "host_fraud", "devices_reuse", "game_plugin", "speed"};
    String[] newKeys = {"position", "host", "device_reuse", "game_cheating", "accelerate"};
    for (int i = 0; i < originKeys.length; i++) {
      if (logicSwitch.containsKey(originKeys[i])) {
        logicSwitch.put(newKeys[i], logicSwitch.get(originKeys[i]));
        logicSwitch.remove(originKeys[i]);
      }
    }
    return logicSwitch;
  }

  private void initEvnDesc() {
    //初始化环境描述信息
    File file = new File("./data/evn_desc.txt");
    if (file.exists()) {
      BufferedReader bufferedReader = null;
      try {
        bufferedReader = new BufferedReader(new FileReader(file));
        String lineStr = null;
        EnvDescription envDescription = null;
        String[] lineTmp = null;
        while ((lineStr = bufferedReader.readLine()) != null) {
          lineTmp = (lineStr + "\tend").split("\t");
          if (lineTmp.length > 4) {
            envDescription = new EnvDescription();
            envDescription.setDataType(lineTmp[0]);
            envDescription.setTypeName(lineTmp[1]);
            envDescription.setExceptionDescription(lineTmp[2]);
            envDescription.setExceptionAnalysis(lineTmp[3]);

            EnvDescription envDescExist = envDescriptionRepository.findByDataType(lineTmp[0]);
            if (envDescExist != null) {
              envDescription.setId(envDescExist.getId());
            }
            envDescriptionRepository.save(envDescription);
          } else {
            log.info("evn_desc.txt length = {} , last = {}", lineTmp.length,
                lineTmp[lineTmp.length - 1]);
          }
        }
      } catch (FileNotFoundException e) {
        log.error("error", e);
      } catch (UnsupportedEncodingException e) {
        log.error("error", e);
      } catch (IOException e) {
        log.error("error", e);
      } finally {
        if (bufferedReader != null) {
          try {
            bufferedReader.close();
          } catch (IOException e) {
            log.error("error", e);
          }
        }
      }
    } else {
      log.info("evn_desc.txt does not exist");
    }
  }

  private void initThreatDesc() {
    //初始化威胁描述信息
    File file = new File("./data/threat_desc.txt");
    if (file.exists()) {
      BufferedReader bufferedReader = null;
      try {
        bufferedReader = new BufferedReader(new FileReader(file));
        String lineStr = null;
        ThreatDescription threatDescription = null;
        String[] lineTmp = null;
        while ((lineStr = bufferedReader.readLine()) != null) {
          lineTmp = (lineStr + "\tend").split("\t");
          if (lineTmp.length > 4) {
            threatDescription = new ThreatDescription();
            threatDescription.setDataType(lineTmp[0]);
            threatDescription.setTypeName(lineTmp[1]);
            threatDescription.setThreatDescription(lineTmp[2]);
            threatDescription.setThreatAnalysis(lineTmp[3]);

            ThreatDescription threatDescExist = threatDescriptionRepository
                .findByDataType(lineTmp[0]);
            if (threatDescExist != null) {
              threatDescription.setId(threatDescExist.getId());
            }
            threatDescriptionRepository.save(threatDescription);
          } else {
            log.info("threat_desc.txt length = {} , last = {}", lineTmp.length,
                lineTmp[lineTmp.length - 1]);
          }
        }
      } catch (FileNotFoundException e) {
        log.error("error", e);
      } catch (UnsupportedEncodingException e) {
        log.error("error", e);
      } catch (IOException e) {
        log.error("error", e);
      } finally {
        if (bufferedReader != null) {
          try {
            bufferedReader.close();
          } catch (IOException e) {
            log.error("error", e);
          }
        }
      }
    } else {
      log.info("threat_desc.txt does not exist");
    }
  }


  /***
   * 初始化苹果设备编号与设备型号的对应关系
   */
  public void initAppleEquipment() {
    //读取映射配置文件
    String filePath = System.getProperty("user.dir") + File.separator + "config" + File.separator;
    File file = new File(filePath + "apple-equipment.json");

    try {
      List<String> lines = Files.readLines(file, Charset.defaultCharset());

      String lineJson = Joiner.on("").skipNulls().join(lines);

      JSONArray arrayData = JSONArray.parseArray(lineJson);
      int dataCount = arrayData.size();

      for (int i = 0; i < dataCount; i++) {
        JSONObject oneJson = arrayData.getJSONObject(i);
        String generation = oneJson.getString("Generation");
        JSONArray arrayIdentifier = oneJson.getJSONArray("Identifier");
        int countIdentifier = arrayIdentifier.size();
        for (int j = 0; j < countIdentifier; j++) {
          PubString.cacheAppleEquipment.put(arrayIdentifier.getString(j), generation);
        }
      }
    } catch (IOException e) {
      log.error("", e);
    }
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.AppService;
import com.bangcle.service.UserService;
import com.bangcle.util.SelfCache;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午9:48 17-10-23.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class AppController extends BaseController {

  @Autowired
  private AppRepository appRepo;

  @Autowired
  private UserRepository userRepo;

  @Autowired
  public HttpServletRequest request;

  @Autowired
  private UserService userService;

  @Autowired
  private AppService appService;

  @Autowired
  private AppController appController;

  /**
   * param id description: 返回对应id下的应用列表.
   */
  public App getById(Integer id) {
    App app = appRepo.findById(id);
    return app;
  }

  /**
   * description: 返回所有的应用.
   */
  public List<App> appfindAll() {
    List<App> apps = appRepo.findAll();
    return apps;
  }

  /**
   * description:应用切换.
   */
  @RequestMapping(value = "/app/switch", method = RequestMethod.POST)
  public JSONObject appSwitch(String appId) {
    App app = appRepo.findById(Integer.parseInt(appId));
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    JSONObject result = new JSONObject();
    User user = userRepo.findById(userId);
    List<Integer> userAppIds = new ArrayList<>();
    if (user == null) {
      log.info("user is null");
    }
    if (user.getOperableApps() != null && !user.getOperableApps().isEmpty()) {
      userAppIds = JSON.parseArray(user.getOperableApps(), Integer.class);
    }
    //将获取到的用户id和要切换的应用对应的用户id做对比，如果相同则允许切换
    if (userAppIds.isEmpty()) {
      if (userService.isSuperAdmin(user) || userService.isAdmin(user)) {
        SelfCache.set(SelfCache.appIdSessionKey(sessionId), app.getId());
        result.put("code", 0);
        result.put("msg", "");
      }
    } else if (userAppIds.contains(app.getId()) || "1".equals(appId)) {
      SelfCache.set(SelfCache.appIdSessionKey(sessionId), app.getId());
      result.put("code", 0);
      result.put("msg", "");
    } else {
      result.put("code", 1);
      result.put("msg", ErrorInfo.NoAuthority.getInfo());
    }
    return result;
  }

  /**
   * 所有可操作的应用列表.
   */
  @RequestMapping(value = "/app/operabled", method = RequestMethod.POST)
  public JSONObject getOperableApps() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userService.findById(userId);
    List<App> listApps = new ArrayList<>();
    App demo = appRepo.findById(1);
    if (userService.isSuperAdmin(user)) {
      listApps = appRepo.findAll();
    }
    if (userService.isAdmin(user)) {
      listApps = appRepo.findByUserId(userId);
      listApps.add(0, demo);
    }
    if (userService.isAuditor(user) || userService.isOperator(user)) {
      JSONArray jsonArray = JSON.parseArray(user.getOperableApps());
      for (int i = 0; i < jsonArray.size(); i++) {
        Integer agentId = jsonArray.getInteger(i);
        App app = appController.getById(agentId);
        listApps.add(app);
      }
      listApps.add(0, demo);
    }
    List<Map<String, Object>> listApp = new ArrayList<>();
    for (App app : listApps) {
      Map<String, Object> mapApp = new HashMap<>();
      mapApp.put("app_id", app.getId());
      mapApp.put("app_name", app.getName());
      mapApp.put("register_time_all", sdf.format(app.getCreatedAt()));
      listApp.add(mapApp);
    }
    JSONObject data = new JSONObject();
    App app = appRepo.findById(Integer.parseInt(getCurrentAgentId()));
    data.put("app_current", app.getId());
    data.put("register_time", sdf.format(app.getCreatedAt()));
    data.put("app_list", listApp);
    JSONObject result = new JSONObject();
    result.put("msg", "");
    result.put("data", data);
    result.put("code", 0);
    return result;
  }

  /**
   * 通过selfdMd5获取对应应用.
   */
  @RequestMapping(value = "/app/info/summary", method = RequestMethod.POST)
  public JSONObject getAppSummary(
      @RequestParam(value = "self_md5") String strSelfMd5) {
    JSONObject result = new JSONObject();
    JSONObject data = appService.getAppSummary(getCurrentAgentId(), strSelfMd5);
    result.put("msg", "");
    result.put("data", data);
    result.put("code", 0);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.AppInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-终端应用信息-应用详情.
 */
@Slf4j
@RestController
//@CrossOrigin(origins = {"http://localhost:8080", "http://127.0.0.1:8080"})
@RequestMapping("/everisk/api/v4/web/")
public class AppInfoController extends BaseController {

  @Autowired
  private AppInfoService appInfoService;

  /**
   * 应用列表统计.
   */
  @RequestMapping(value = "/app/info", method = RequestMethod.POST)
  public JSONObject appSort(
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "page", required = false) Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime)
      throws ParseException {
    JSONObject result = new JSONObject();
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = appInfoService.appSort(getCurrentAgentId(), listManufacturer,
        listLocation, listOsVersion, longsTime[0], longsTime[1],
        page, size, "desc");
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.AppStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-终端应用信息-应用统计.
 */
@Slf4j
@RestController
//@CrossOrigin(origins = {"http://localhost:8080", "http://127.0.0.1:8080"})
@RequestMapping("/everisk/api/v4/web/")
public class AppStatController extends BaseController {

  @Autowired
  private AppStatService appStatService;

  /**
   * 应用安装设备数Top10.
   */
  @RequestMapping(value = "/app/rank", method = RequestMethod.POST)
  public JSONObject appCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = appStatService
        .appCount(getCurrentAgentId(), listManufacturer, listLocation,
            listOsVersion, listAppVersion, longsTime[0], longsTime[1]);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.bangcle.entity.User;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.UserService;
import com.bangcle.util.SelfCache;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午9:42 17-10-24.
 */
@RestController
public class BaseController {

  @Autowired
  public HttpServletRequest request;

  @Autowired
  public HttpServletResponse response;

  @Autowired
  public UserService userService;

  @Autowired
  private UserRepository userRepo;

  // 设置session中存的app的id的 key = sessionId + AppId
  private static String AppId = "app_id";

  protected static String ALL = "all";

  /**
   * description: 获得当前访问的app的id.
   */
  public String getCurrentAgentId() {

    return String.valueOf(SelfCache.get(SelfCache.appIdSessionKey(request.getSession().getId())));

  }

  /**
   * description: 获得当前agent_id,返回值为int类型.
   */
  public Integer getIntCurrentAgentId() {

    return Integer.parseInt(
        SelfCache.get(SelfCache.appIdSessionKey(request.getSession().getId())).toString());

  }

  public User getUserInfo() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer
        .parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userRepo.findById(userId);
    return user;
  }

  public User getUserInfoById(Integer userId) {
    User user = userRepo.findById(userId);
    return user;
  }

  /**
   * 判断是否是管理员帐号.
   */
  public boolean isSuperAdmin() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userService.findById(userId);
    if (userService.isSuperAdmin(user)) {
      return true;
    }
    return false;
  }

  public boolean isAdmin() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userService.findById(userId);
    if (userService.isAdmin(user)) {
      return true;
    }
    return false;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.CheaterAppDefService;
import com.bangcle.util.WebUtils;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/strategy/game_cheater_def/")
public class CheaterAppDefController extends BaseController {

  @Autowired
  CheaterAppDefService cheaterAppDefService;

  /**
   * 新增外挂应用定义.
   */
  @RequestMapping(value = "/add_app", method = RequestMethod.POST)
  public JSONObject addCheaterAppDef(
      @RequestParam(value = "cheater_name", required = true) String cheaterName,
      @RequestParam(value = "cheater_md5", required = true) String cheaterMd5,
      @RequestParam(value = "cheater_pkg_name", required = true) String pkgName,
      @RequestParam(value = "platform", required = true) String platform) {

    if (cheaterName.trim().equals("") || cheaterMd5.trim().equals("") || pkgName.trim()
        .equals("")) {
      return WebUtils.doJsonObject(1, ErrorInfo.ParamMustExist.getInfo());
    }
    String result = cheaterAppDefService
        .addCheaterAppDef(Integer.parseInt(getCurrentAgentId()), cheaterName, cheaterMd5, pkgName,
            platform);
    if (result.equals("")) {
      return WebUtils.doJsonObject(0, "");
    } else {
      return WebUtils.doJsonObject(1, result);
    }
  }

  /**
   * 外挂应用列表.
   */
  @RequestMapping(value = "/apps_list", method = RequestMethod.POST)
  public JSONObject cheaterAppList() {

    JSONObject data = cheaterAppDefService.cheaterAppList(Integer.parseInt(getCurrentAgentId()));
    return WebUtils.doJsonObject(0, "", data);

  }

  /**
   * 删除外挂应用.
   */
  @RequestMapping(value = "/delete_apps", method = RequestMethod.POST)
  public JSONObject deleteCheaterApp(
      @RequestParam(value = "appIds", required = true) List<Integer> cheaterAppIds) {

    if (cheaterAppDefService
        .deleteCheaterApp(Integer.parseInt(getCurrentAgentId()), cheaterAppIds)) {
      return WebUtils.doJsonObject(0, "");
    }
    return WebUtils.doJsonObject(1, ErrorInfo.DeleteFailure.getInfo());

  }

  /**
   * 启用／关闭外挂应用.
   */
  @RequestMapping(value = "/switch_apps", method = RequestMethod.POST)
  public JSONObject switchCheaterApp(
      @RequestParam(value = "onOff", required = true) Integer onOff,
      @RequestParam(value = "appIds", required = true) List<Integer> cheaterAppIds) {

    if (cheaterAppDefService
        .switchCheaterApp(Integer.parseInt(getCurrentAgentId()), onOff, cheaterAppIds)) {
      return WebUtils.doJsonObject(0, "");
    }
    return WebUtils.doJsonObject(1, ErrorInfo.ErrorRequst.getInfo());

  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.CheaterTraitDefService;
import com.bangcle.util.WebUtils;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/strategy/cheater_trait_def/")
public class CheaterTraitDefController extends BaseController {

  @Autowired
  CheaterTraitDefService cheaterTraitDefService;

  /**
   * 新增外挂特征定义.
   */
  @RequestMapping(value = "/add_trait", method = RequestMethod.POST)
  public Object addCheaterTraitDef(
      @RequestParam(value = "cheater_name", required = true) String cheaterName,
      @RequestParam(value = "cheater_trait", required = true) String cheaterTrait,
      @RequestParam(value = "platform", required = true) String platform) {
    if (cheaterName.trim().equals("") || cheaterTrait.trim().equals("")) {
      return WebUtils.doJsonObject(1, ErrorInfo.ParamMustExist.getInfo());
    }
    String result = cheaterTraitDefService
        .addCheaterTraitDef(Integer.parseInt(getCurrentAgentId()), cheaterName, cheaterTrait,
            platform);
    if (result.equals("")) {
      return WebUtils.doJsonObject(0, "");
    } else {
      return WebUtils.doJsonObject(1, result);
    }

  }

  /**
   * 外挂特征列表.
   */
  @RequestMapping(value = "/trait_list", method = RequestMethod.POST)
  public JSONObject cheaterTraitList() {

    JSONObject data = cheaterTraitDefService
        .cheaterTraitList(Integer.parseInt(getCurrentAgentId()));
    return WebUtils.doJsonObject(0, "", data);

  }

  /**
   * 删除外挂特征.
   */
  @RequestMapping(value = "/delete_traits", method = RequestMethod.POST)
  public JSONObject deleteCheaterTrait(
      @RequestParam(value = "traitIds", required = true) List<Integer> traitIds) {

    if (cheaterTraitDefService
        .deleteCheaterTrait(Integer.parseInt(getCurrentAgentId()), traitIds)) {
      return WebUtils.doJsonObject(0, "");
    }
    return WebUtils.doJsonObject(1, ErrorInfo.ErrorRequst.getInfo());

  }

  /**
   * 启用／关闭外挂特征.
   */
  @RequestMapping(value = "/switch_traits", method = RequestMethod.POST)
  public JSONObject switchCheaterTrait(
      @RequestParam(value = "onOff", required = true) Integer onOff,
      @RequestParam(value = "traitIds", required = true) List<Integer> traitIds) {

    if (cheaterTraitDefService
        .switchCheaterTrait(Integer.parseInt(getCurrentAgentId()), onOff, traitIds)) {
      return WebUtils.doJsonObject(0, "");
    }

    return WebUtils.doJsonObject(1, ErrorInfo.ErrorRequst.getInfo());

  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.ConfigureDevListService;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ConfigureDevListController extends BaseController {

  @Autowired
  private ConfigureDevListService configureDevListService;

  /**
   * 创建列表.
   */
  @RequestMapping(value = "/configure/devlist/create", method = RequestMethod.POST)
  public JSONObject create(@RequestParam(required = true) String type,
      @RequestParam(required = true) String value,
      @RequestParam(required = true) String option,
      @RequestParam(name = "option_value", required = false) String optionValue,
      @RequestParam(required = true) int status,
      @RequestParam(name = "is_black_or_white", required = true) int isBlackOrWhite) {
    JSONObject result = new JSONObject();
    JSONObject data = configureDevListService
        .create(Integer.parseInt(getCurrentAgentId()), type, value, option, optionValue, status,
            isBlackOrWhite);
    result.put("code", 0);
    if (data.containsKey("code")) {
      result.put("code", data.get("code"));
      result.put("msg", data.get("msg"));
    }
    return result;
  }

  /**
   * 搜索功能, 一个接口列出黑白名单两个列表.
   */
  @RequestMapping(value = "/configure/devlist/search", method = RequestMethod.POST)
  public JSONObject search(String type, String value) {
    JSONObject result = new JSONObject();
    JSONObject whiteDataObject = configureDevListService
        .search(Integer.parseInt(getCurrentAgentId()), type, value, 0);
    JSONObject blackDataObject = configureDevListService
        .search(Integer.parseInt(getCurrentAgentId()), type, value, 1);
    JSONObject dataObject = new JSONObject();
    dataObject.put("datalist_black", blackDataObject.getJSONArray("datalist"));
    dataObject.put("datalist_white", whiteDataObject.getJSONArray("datalist"));
    result.put("data", dataObject);
    result.put("code", 0);
    return result;
  }

  /**
   * 启用or停用.
   */
  @RequestMapping(value = "/configure/devlist/start", method = RequestMethod.POST)
  public JSONObject start(@RequestParam(required = true) List<Integer> ids,
      @RequestParam(required = true) int status) {
    JSONObject result = new JSONObject();
    boolean isSuccess = configureDevListService
        .updateStatus(Integer.parseInt(getCurrentAgentId()), ids, status);
    result.put("code", 0);
    if (!isSuccess) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
    }
    return result;
  }

  /**
   * delete .
   */
  @RequestMapping(value = "/configure/devlist/delete", method = RequestMethod.POST)
  public JSONObject delete(@RequestParam(required = true) List<Integer> ids) {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    try {
      configureDevListService.delete(Integer.parseInt(getCurrentAgentId()), ids);
    } catch (Exception e) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
    }

    return result;
  }


  /**
   * 切换规则 .
   */
  @RequestMapping(value = "/configure/devlist/change", method = RequestMethod.POST)
  public JSONObject change(@RequestParam(name = "c_id", required = true) int id,
      @RequestParam(required = true) String option,
      @RequestParam(name = "option_value", required = false) String optionValue) {
    JSONObject result = new JSONObject();
    configureDevListService
        .updateRule(Integer.parseInt(getCurrentAgentId()), id, option, optionValue);
    result.put("code", 0);
    return result;
  }

  /**
   * 获取策略提示语.
   */
  @RequestMapping(value = "/configure/devlist/instruction", method = RequestMethod.POST)
  public JSONObject instructionList() {
    String optionValue = configureDevListService
        .getInstruction(Integer.parseInt(getCurrentAgentId()));
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("instruction", optionValue);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", dataJsonObject);
    return result;
  }

  /**
   * 修改策略提示语.
   */
  @RequestMapping(value = "/configure/devlist/instruction/change", method = RequestMethod.POST)
  public JSONObject instructionCreate(
      @RequestParam(name = "option_value", required = true) String optionValue) {
    configureDevListService.updateInstruction(Integer.parseInt(getCurrentAgentId()), optionValue);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    return result;
  }

  /**
   * 批量创建列表.
   */
  @RequestMapping(value = "/configure/devlist/batch/create", method = RequestMethod.POST)
  public JSONObject batchCreate(
      @RequestParam(required = true) String value,
      String option,
      @RequestParam(required = true) int status,
      @RequestParam(name = "is_black_or_white", required = true) int isBlackOrWhite
  ) {
    JSONArray jsonArray = configureDevListService.filterValue(value);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    if (jsonArray == null || jsonArray.isEmpty()) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ParamMustExist.getInfo());
    } else {
      JSONObject jsonObject = configureDevListService
          .batchCreate(Integer.parseInt(getCurrentAgentId()), jsonArray, option, status,
              isBlackOrWhite);
      if (jsonObject.containsKey("code")) {
        Long code = jsonObject.getLongValue("code");
        result.put("code", code);
        if (code > 0L) {
          result.put("msg", jsonObject.getString("msg"));
        }
      }
    }
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ConfigureEmulatorListService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ConfigureEmulatorListController extends BaseController {

  @Autowired
  private ConfigureEmulatorListService configureEmulatorListService;

  /**
   * 模拟器黑白名单列表.
   */
  @RequestMapping(value = "/configure/emulator/list", method = RequestMethod.POST)
  public JSONObject list() {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    JSONObject data = configureEmulatorListService.list(Integer.parseInt(getCurrentAgentId()));
    JSONObject dataJsonObject = new JSONObject();
    JSONArray datalistArray = data.getJSONArray("datalist");
    dataJsonObject.put("datalist", datalistArray);
    result.put("data", dataJsonObject);
    return result;
  }

  /**
   * 模拟器黑白名单.
   */
  @RequestMapping(value = "/configure/emulator/start", method = RequestMethod.POST)
  public JSONObject start(@RequestParam(name = "e_id", required = true) int id,
      @RequestParam(required = true) int status) {
    JSONObject result = new JSONObject();
    configureEmulatorListService.updateStatus(Integer.parseInt(getCurrentAgentId()), id, status);
    result.put("code", 0);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ConfigureInjectListService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ConfigureInjectListController extends BaseController {

  @Autowired
  private ConfigureInjectListService configureInjectListService;

  /**
   * 创建列表.
   */
  @RequestMapping(value = "/configure/inject/create", method = RequestMethod.POST)
  public JSONObject create(
      @RequestParam(required = true) String name,
      @RequestParam(name = "feature", required = true) String feature,
      @RequestParam(name = "status", required = false) Integer status,
      @RequestParam(name = "is_black_or_white", required = true) int isBlackOrWhite) {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    if (status == null) {
      status = 0;
    }
    JSONObject dataOject = configureInjectListService
        .create(Integer.parseInt(getCurrentAgentId()), name, feature, status, isBlackOrWhite);
    if (0 != dataOject.getInteger("code")) {
      result.put("code", dataOject.get("code"));
      result.put("msg", dataOject.get("msg"));
    }
    return result;
  }

  /**
   * 列表.
   */
  @RequestMapping(value = "/configure/inject/list", method = RequestMethod.POST)
  public JSONObject list() {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    JSONObject dataObject = configureInjectListService.list(Integer.parseInt(getCurrentAgentId()));
    result.put("data", dataObject);
    return result;
  }

  /**
   * 启用or停用.
   */
  @RequestMapping(value = "/configure/inject/start", method = RequestMethod.POST)
  public JSONObject start(@RequestParam(required = true) List<Integer> ids,
      @RequestParam(required = true) int status) {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    configureInjectListService.updateStatus(Integer.parseInt(getCurrentAgentId()), ids, status);
    return result;
  }

  /**
   * delete.
   */
  @RequestMapping(value = "/configure/inject/delete", method = RequestMethod.POST)
  public JSONObject delete(@RequestParam(required = true) List<Integer> ids) {
    JSONObject result = new JSONObject();
    result.put("code", 0);
    configureInjectListService.deleteInIds(Integer.parseInt(getCurrentAgentId()), ids);
    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.CrashInfoService;
import com.bangcle.util.TimeParse;
import com.bangcle.util.WebUtils;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 崩溃分析-崩溃分析-崩溃详情.
 */
@Slf4j
@RestController
//@CrossOrigin(origins = {"http://localhost:8080", "http://127.0.0.1:8080"})
@RequestMapping("/everisk/api/v4/web/")
public class CrashInfoController extends BaseController {

  @Autowired
  private CrashInfoService crashInfoService;

  /**
   * stat_type:用于区分是崩溃次数统计还是崩溃设备数统计 crash_type crash_dev 崩溃类型/设备排行.
   */
  @RequestMapping(value = "/crash/type_info", method = RequestMethod.POST)
  public JSONObject crashTypeSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "sort_field", required = false) String strSortField,
      @RequestParam(value = "page", required = false) Integer page,
      @RequestParam(value = "size", required = false) Integer size,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashTypeSort(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer, listOsVersion,
            strSortBy, strSortField, longsTime[0], longsTime[1], page, size);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 具体崩溃类型下的崩溃趋势.
   */
  @RequestMapping(value = "/crash/type_one/trend", method = RequestMethod.POST)
  public JSONObject crashTypeOneTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppInfo,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsInfo,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "crash_type", required = true) String crashType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashTypeOneTrend(getCurrentAgentId(), listAppInfo, listLocation, listManufacturer,
            listOsInfo, longsTime[0], longsTime[1], crashType);
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * 崩溃占比top5(设备类型、地域、系统版本、应用版本)崩溃次数/崩溃设备数.
   */
  @RequestMapping(value = "/crash/type_one/dist", method = RequestMethod.POST)
  public JSONObject crashTypeOneDist(
      @RequestParam(value = "app_version", required = false) List<String> listAppInfo,
      @RequestParam(value = "count_type", required = true) String strCountType,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "dist_type", required = true) String strDistType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsInfo,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "crash_type", required = true) String crashType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashTypeOneDist(getCurrentAgentId(), listAppInfo, listLocation, listManufacturer,
            listOsInfo, longsTime[0], longsTime[1], crashType, strCountType, strDistType);
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * 具体崩溃类型——崩溃列表.
   */
  @RequestMapping(value = "/crash/type_one/info_list", method = RequestMethod.POST)
  public JSONObject crashTypeOneInfoList(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "crash_type", required = true) String crashType,
      @RequestParam(value = "page", required = false, defaultValue = "1") int page,
      @RequestParam(value = "size", required = false, defaultValue = "20") int size)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashTypeOneInfoList(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer,
            listOsVersion, longsTime[0], longsTime[1], crashType, page, size);
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * 崩溃设备排行.
   */
  @RequestMapping(value = "/crash/dev_info", method = RequestMethod.POST)
  public JSONObject crashDevSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "page", required = false) Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "sort_field", required = false) String strSortField,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException, InterruptedException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashDevSort(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer,
            listOsVersion, strSortBy, strSortField,
            page, size, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * 具体设备的崩溃趋势.
   */
  @RequestMapping(value = "/crash/dev_one/trend", method = RequestMethod.POST)
  public JSONObject crashDevOneTrend(
      @RequestParam(value = "udid", required = true) String udId,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "start_time", required = true) String startTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashDevOneTrend(getCurrentAgentId(), udId, longsTime[0], longsTime[1]);
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * 具体设备的崩溃信息列表.
   */
  @RequestMapping(value = "/crash/dev_one/info_list", method = RequestMethod.POST)
  public JSONObject crashDevOneInfoList(
      @RequestParam(value = "udid", required = true) String udId,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "page", required = false, defaultValue = "1") int page,
      @RequestParam(value = "size", required = false, defaultValue = "20") int size)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashInfoService
        .crashDevOneInfoList(getCurrentAgentId(), udId, longsTime[0], longsTime[1], page, size);
    return WebUtils.doJsonObject(0, "", data);
  }


  /**
   * 崩溃详情.
   */
  @RequestMapping(value = "/crash/crash_info", method = RequestMethod.POST)
  public JSONObject crashInfo(
      @RequestParam(value = "id", required = true) String esId,
      @RequestParam(value = "index", required = true) String esIndex,
      @RequestParam(value = "type", required = true) String esType)
      throws ParseException {

    JSONObject data = crashInfoService
        .crashInfo(esId, esIndex, esType);
    return WebUtils.doJsonObject(0, "", data);
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.CrashStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 崩溃分析-崩溃分析-崩溃统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class CrashStatController extends BaseController {

  @Autowired
  private CrashStatService crashStatService;

  /**
   * 崩溃分析总数统计.
   */
  @RequestMapping(value = "/crash/stat", method = RequestMethod.POST)
  public JSONObject crashCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashStatService
        .crashCount(getCurrentAgentId(), listAppVersion, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 崩溃趋势.
   */
  @RequestMapping(value = "/crash/trend", method = RequestMethod.POST)
  public JSONObject crashTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashStatService
        .crashTrend(getCurrentAgentId(), listAppVersion, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 崩溃分类统计.
   */
  @RequestMapping(value = "/crash/classify", method = RequestMethod.POST)
  public JSONObject crashDist(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "count_type", required = false) String strCountType,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashStatService
        .crashDist(getCurrentAgentId(), listAppVersion, strCountType, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 崩溃次数/设备数排名前十城市.
   */
  @RequestMapping(value = "/crash/rank", method = RequestMethod.POST)
  public JSONObject crashRank(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "count_type", required = false) String strCountType,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashStatService
        .crashRank(getCurrentAgentId(), listAppVersion, strCountType, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * dist:区分统计类型 location device os_version app_version count_type:区分统计次数还是设备数 crash_dev_count
   * crash_count 崩溃分布.
   */
  @RequestMapping(value = "/crash/dist", method = RequestMethod.POST)
  public JSONObject crashStat(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "count_type", required = false) String strCountType,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "dist_type", required = false) String strDistType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = crashStatService
        .crashStat(getCurrentAgentId(), listAppVersion, strCountType, listManufacturer, strDistType,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.DataStrategyService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:13 18-1-19.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class DataStrategyController extends BaseController {

  @Autowired
  private DataStrategyService dataStrategyService;

  /**
   * description：获取数据采集配置列表.
   */
  @RequestMapping(value = "/pick/conf/list", method = RequestMethod.POST)
  public JSONObject getPickConfList() {
    JSONObject result = dataStrategyService.findList(getCurrentAgentId());
    return result;
  }

  /**
   * description：新增数据采集配置.
   */
  @RequestMapping(value = "/pick/conf/create", method = RequestMethod.POST)
  public JSONObject pickConfCreate(@RequestParam(value = "locations") List locations,
      @RequestParam(value = "msg_types") List types,
      @RequestParam(value = "name") String name) {
    JSONObject result = dataStrategyService.save(getCurrentAgentId(), name, types, locations);
    return result;
  }

  /**
   * description:数据采集配置修改.
   */
  @RequestMapping(value = "/pick/conf/update", method = RequestMethod.POST)
  public JSONObject pickConfUpdate(@RequestParam(value = "locations") List locations,
      @RequestParam(value = "msg_types") List types,
      @RequestParam(value = "name") String name,
      @RequestParam(value = "num_id") Integer id) {
    JSONObject result = dataStrategyService.update(name, types, locations, id, getCurrentAgentId());
    return result;
  }

  /**
   * description：数据采集配置状态修改.
   */
  @RequestMapping(value = "/pick/conf/status", method = RequestMethod.POST)
  public JSONObject pickConfStatus(
      @RequestParam(value = "num_id") Integer id,
      @RequestParam(value = "status") Integer status) {
    JSONObject result = dataStrategyService.updateStatus(id, status, getCurrentAgentId());
    return result;
  }


  /**
   * description：数据采集配置删除.
   */
  @RequestMapping(value = "/pick/conf/delete", method = RequestMethod.POST)
  public JSONObject pickConfDelete(@RequestParam(value = "num_id") Integer id) {
    JSONObject result = dataStrategyService.delete(id, getCurrentAgentId());
    return result;
  }

  /**
   * description：数据采集配置信息回显.
   */
  @RequestMapping(value = "/pick/conf/info", method = RequestMethod.POST)
  public JSONObject pickConfInfo(@RequestParam(value = "num_id") Integer id) {
    JSONObject result = dataStrategyService.findById(id);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.DevInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-终端设备信息-设备详情.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class DevInfoController extends BaseController {

  @Autowired
  private DevInfoService devInfoService;

  /**
   * 所有/新增设备.
   */
  @RequestMapping(value = "/dev/info", method = RequestMethod.POST)
  public JSONObject devSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "page", required = false) Integer page,
      @RequestParam(value = "size", required = false) Integer size,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "stat_type", required = false) String strStatType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = devInfoService
        .devSort(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion, listAppVersion,
            longsTime[0], longsTime[1],
            page, size, strSortBy, strStatType);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.DevStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-终端设备信息-设备统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class DevStatController extends BaseController {

  @Autowired
  private DevStatService devStatService;

  /**
   * 终端设备信息总数统计.
   */
  @RequestMapping(value = "/dev/stat", method = RequestMethod.POST)
  public JSONObject devCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = devStatService
        .devCount(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion, listAppVersion,
            longsTime[0],
            longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 设备数趋势.
   */
  @RequestMapping(value = "/dev/trend", method = RequestMethod.POST)
  public JSONObject devTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = devStatService
        .devTrend(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion, listAppVersion,
            longsTime[0],
            longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 设备分布.
   */
  @RequestMapping(value = "/dev/dist", method = RequestMethod.POST)
  public JSONObject devStat(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "count_type", required = false) String strCountType,
      @RequestParam(value = "dist_type", required = false) String strDistType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = devStatService
        .devStat(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion, listAppVersion,
            longsTime[0], longsTime[1], strCountType, strDistType);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 设备安装的应用列表.
   */
  @RequestMapping(value = "/dev/detail/analyze", method = RequestMethod.POST)
  public JSONObject getDevAnalyze(
      @RequestParam(value = "udid") String udid,
      @RequestParam(value = "page") Integer page,
      @RequestParam(value = "size") Integer size
  )throws ParseException {
    JSONObject result = new JSONObject();
    JSONObject data = devStatService
        .getDevAnalyze(getCurrentAgentId(), udid, page, size);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * 设备详情.
   */
  @RequestMapping(value = "/dev/info/summary", method = RequestMethod.POST)
  public JSONObject getAppSummary(@RequestParam(value = "udid") String udid) {
    JSONObject data = devStatService.getDevSummary(getCurrentAgentId(), udid);
    JSONObject result = new JSONObject();
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.EnvInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-环境感知分析-环境详情.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class EnvInfoController extends BaseController {

  @Autowired
  private EnvInfoService envInfoService;

  /**
   * sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型 location device os_version app_version
   * 地域/设备/系统版本/应用版本排行.
   */
  @RequestMapping(value = "/env/info", method = RequestMethod.POST)
  public JSONObject envSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "stat_type", required = false) String strStatType,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envInfoService
        .envSort(getCurrentAgentId(), listAppVersion, strEnvType, listLocation, listManufacturer,
            listOsVersion, strStatType, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 环境详情-设备列表.
   */
  @RequestMapping(value = "/env/stat/list", method = RequestMethod.POST)
  public JSONObject getEnvList(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "sort_field", required = false) String strSortField,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "page", required = false) Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envInfoService
        .getEnvList(getCurrentAgentId(), listAppVersion, strEnvType, listLocation, listManufacturer,
            listOsVersion, strSortField, strSortBy, page, size, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 环境详情-异常解析.
   */
  @RequestMapping(value = "/env/detail/analyze", method = RequestMethod.POST)
  public JSONObject getEnvAnalyze(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "udid") String udid,
      @RequestParam(value = "run_key",required = false) String runKey,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envInfoService
        .getEnvAnalyze(getCurrentAgentId(), listAppVersion, strEnvType, listLocation,
            listManufacturer, listOsVersion, udid, runKey, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("msg", "");
    result.put("data", data);
    result.put("code", 0);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.EnvStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-环境感知分析-环境统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class EnvStatController extends BaseController {

  @Autowired
  private EnvStatService envStatService;

  /**
   * 环境感知总数统计.
   */
  @RequestMapping(value = "/env/stat", method = RequestMethod.POST)
  public JSONObject envCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envStatService
        .envCount(getCurrentAgentId(), listAppVersion, strEnvType, listLocation, listManufacturer,
            listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 异常环境趋势.
   */
  @RequestMapping(value = "/env/trend", method = RequestMethod.POST)
  public JSONObject envTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envStatService
        .envTrend(getCurrentAgentId(), listAppVersion, strEnvType, listLocation, listManufacturer,
            listOsVersion,
            longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 异常环境分类统计.
   */
  @RequestMapping(value = "/env/classify", method = RequestMethod.POST)
  public JSONObject envDist(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envStatService
        .envDist(getCurrentAgentId(), listAppVersion, strEnvType, listLocation, listManufacturer,
            listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * dist_type:区分统计类型 location device os_version app_version 异常环境分布.
   */
  @RequestMapping(value = "/env/dist", method = RequestMethod.POST)
  public JSONObject envStat(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "dist_type", required = false) String strDistType,
      @RequestParam(value = "data_type", required = false) String strEnvType,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = envStatService
        .envStat(getCurrentAgentId(), listAppVersion, listLocation,
            listManufacturer, listOsVersion, strDistType, strEnvType,
            longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.EventInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-安全事件分析-事件详情.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class EventInfoController extends BaseController {

  @Autowired
  private EventInfoService eventInfoService;

  /**
   * sort_field:用于区分排序字段：event_count event_dev_count sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型
   * location source 地域/攻击源排行.
   */
  @RequestMapping(value = "/event/info", method = RequestMethod.POST)
  public JSONObject eventSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "page", required = false) Integer page,
      @RequestParam(value = "size", required = false) Integer size,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "sort_field", required = false) String strSortField,
      @RequestParam(value = "stat_type", required = false) String strStatType,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventInfoService
        .eventSort(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer, listOsVersion,
            page, size, strSortBy, strSortField, strStatType, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 事件列表.
   */
  @RequestMapping(value = "/event/stat/list", method = RequestMethod.POST)
  public JSONObject getEventList(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "ip", required = false) String strIp,
      @RequestParam(value = "stat_type", required = false) String strStatType,
      @RequestParam(value = "sort_field", required = false) String strSortField,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "page") Long page,
      @RequestParam(value = "size") Long size,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventInfoService
        .getEventList(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer, listOsVersion,
            strIp,
            page, size, strStatType, strSortField, strSortBy, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 时间链.
   */
  @RequestMapping(value = "/event/time/line", method = RequestMethod.POST)
  public JSONObject eventTimeLine(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "udid") String udid,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventInfoService
        .eventTimeLine(getCurrentAgentId(), listAppVersion, listLocation, listManufacturer,
            listOsVersion, udid, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description：通过事件id或取对应的事件.
   */
  @RequestMapping(value = "/event/detail/analyze", method = RequestMethod.POST)
  public JSONObject getEventAnalyze(
      @RequestParam(value = "index_name") String strIndexName,
      @RequestParam(value = "index_type") String strIndexType,
      @RequestParam(value = "event_id") String strEventId)
      throws ParseException {
    JSONObject result = new JSONObject();
    JSONObject data = eventInfoService
        .getEventAnalyze(getCurrentAgentId(), strIndexName, strIndexType, strEventId);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.EventStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-安全事件分析-事件统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class EventStatController extends BaseController {

  @Autowired
  private EventStatService eventStatService;

  /**
   * 安全事件总数统计.
   */
  @RequestMapping(value = "/event/stat", method = RequestMethod.POST)
  public JSONObject eventCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventStatService
        .eventCount(getCurrentAgentId(), listAppVersion,
            listManufacturer, listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 安全事件趋势.
   */
  @RequestMapping(value = "/event/trend", method = RequestMethod.POST)
  public JSONObject eventTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "event_type", required = false) String strEventType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventStatService
        .eventTrend(getCurrentAgentId(), listAppVersion, listLocation,
            listManufacturer, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 安全事件地域分布.
   */
  @RequestMapping(value = "/event/local_dist", method = RequestMethod.POST)
  public JSONObject eventLocalDist(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventStatService
        .eventLocalDist(getCurrentAgentId(), listAppVersion, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 安全事件攻击源分布.
   */
  @RequestMapping(value = "/event/source_dist", method = RequestMethod.POST)
  public JSONObject eventSourceDist(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = eventStatService
        .eventSourceDist(getCurrentAgentId(), listAppVersion, listManufacturer,
            listLocation, listOsVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.controller.model.AppInfo;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.StatService;
import com.bangcle.util.TimeParse;
import io.swagger.annotations.ApiOperation;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 综合态势，每个页面对应一个controller, controller中指调用接口，不做任何函数实现，函数实现都写在service中.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class IndexController extends BaseController {

  @Autowired
  private StatService statService;

  /**
   * param time description: 首页启动趋势 throws ParseException.
   */
  @RequestMapping(value = "/home/start_trend", method = RequestMethod.POST)
  public JSONObject getStartTrend(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService
        .getStartTrend(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页崩溃趋势 throws ParseException.
   */
  @RequestMapping(value = "/home/crash_trend", method = RequestMethod.POST)
  public JSONObject getCrashTrend(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService
        .getCrashTrend(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 首页威胁实时监测 throws ParseException.
   */
  @RequestMapping(value = "/home/real_time", method = RequestMethod.POST)
  public JSONObject getDetection() {
    JSONObject result = new JSONObject();
    JSONObject datalist = statService.getDetection(getCurrentAgentId());
    result.put("data", datalist);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页安全事件统计 throws ParseException.
   */
  @RequestMapping(value = "/home/safe_event", method = RequestMethod.POST)
  public JSONObject getSafeEvent(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService
        .getSafeEvent(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页文字描述 throws ParseException.
   */
  @RequestMapping(value = "/home/text_desc", method = RequestMethod.POST)
  public JSONObject getRiskInfo(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject datalist = statService.getRiskInfo(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("data", datalist);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页威胁分类统计 设备数统计 throws ParseException.
   */
  @RequestMapping(value = "/home/risk_class_stat_dev")
  public JSONObject getRiskDev(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService.getRiskDev(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页威胁分类统计 次数统计 throws ParseException.
   */
  @RequestMapping(value = "/home/risk_class_stat_count", method = RequestMethod.POST)
  public JSONObject getRiskFrequency(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService.getRiskFrequency(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页威胁地域分布地图 throws ParseException.
   */
  @RequestMapping(value = "/home/map", method = RequestMethod.POST)
  public JSONObject getLocationMap(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService.getLocationMap(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description 首页威胁影响地域前五 throws ParseException.
   */
  @RequestMapping(value = "/home/top/location", method = RequestMethod.POST)
  public JSONObject getLocationDistribution(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService
        .getLocationDistribution(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * param time description: 首页威胁影响设备前五 throws ParseException.
   */
  @RequestMapping(value = "/home/top/dev", method = RequestMethod.POST)
  public JSONObject getRiskDevSort(@RequestParam(value = "start_time") String startTime,
      @RequestParam(value = "end_time") String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = statService.getRiskDevSort(longsTime[0], longsTime[1], getCurrentAgentId());
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 获取筛选条件.
   */
  @RequestMapping(value = "/search_init", method = RequestMethod.POST)
  @ApiOperation(value = "筛选条件", notes = "筛选条件获取")
  public JSONObject getFilterCondition(String type) {
    JSONObject jsonData = new JSONObject();
    JSONObject jsonDataList = new JSONObject();
    if (type == null) {
      jsonData.put("code", 1);
      jsonData.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return jsonData;
    } else {
      jsonDataList = statService.getFilterCondition(type, getCurrentAgentId());
    }
    jsonData.put("code", 0);
    jsonData.put("data", jsonDataList);
    jsonData.put("msg", "");
    return jsonData;
  }

  /**
   * description:实时监测.
   */
  @RequestMapping(value = "/home/real_time/monitor", method = RequestMethod.POST)
  public JSONObject realTimeMonitor(
      @RequestParam(value = "monitor_types") List<String> listMonitorTypes,
      @RequestParam(value = "model", required = false) List<String> listModels,
      @RequestParam(value = "location", required = false) List<String> listLocations,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersions,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersions,
      @RequestParam(value = "num_monitor", required = false) Integer numMonitor) {
    JSONObject result = statService
        .realTimeMonitor(getCurrentAgentId(), listMonitorTypes, listModels, listLocations, listOsVersions,
            listAppVersions, numMonitor);
    return result;
  }

  /**
   * description：日活提醒.
   */
  @RequestMapping(value = "/active/dev/count", method = RequestMethod.POST)
  @ApiOperation(value = "日活统计", notes = "日活统计")
  public JSONObject getActiveDevCount() {
    JSONObject result = statService.getActiveDevCount(getCurrentAgentId());
    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.InjectionAttacksConfigService;
import com.bangcle.util.WebUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:43 18-1-17.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class InjectionAttacksConfigController extends BaseController {

  @Autowired
  private InjectionAttacksConfigService injectionAttacksConfigService;

  /**
   * description: 获取系统so库函数防Hook定义列表.
   */
  @RequestMapping(value = "/inject/system/list", method = RequestMethod.POST)
  public JSONObject systemSoConfigSelect() {
    JSONObject data = injectionAttacksConfigService
        .systemSoConfigSelect(getIntCurrentAgentId());
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 系统so库函数防Hook定义新增.
   */
  @RequestMapping(value = "/inject/system/create", method = RequestMethod.POST)
  public JSONObject systemSoConfigSave(@RequestParam(value = "name") String name,
      @RequestParam(value = "system_so") String systemSoName,
      @RequestParam(value = "function_name") String functionName) {
    JSONObject result = injectionAttacksConfigService
        .systemSoConfigSave(name, systemSoName, functionName, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 系统so库函数防Hook定义状态修改.
   */
  @RequestMapping(value = "/inject/system/status", method = RequestMethod.POST)
  public JSONObject systemSoConfigStatusUpdate(@RequestParam(value = "ids") Integer[] ids,
      @RequestParam(value = "status") Integer status) {
    JSONObject result = injectionAttacksConfigService
        .systemSoConfigStatusUpdate(status, ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 系统so库函数防Hook定义删除.
   */
  @RequestMapping(value = "/inject/system/delete", method = RequestMethod.POST)
  public JSONObject systemSoConfigDelete(@RequestParam(value = "ids") Integer[] ids) {
    JSONObject result = injectionAttacksConfigService
        .systemSoConfigDelete(ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 获取应用so库防Hook定义列表.
   */
  @RequestMapping(value = "/inject/app/list", method = RequestMethod.POST)
  public JSONObject appSoConfigSelect() {
    JSONObject data = injectionAttacksConfigService
        .appSoConfigSelect(getIntCurrentAgentId());
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 应用so库函数防Hook定义新增.
   */
  @RequestMapping(value = "/inject/app/create", method = RequestMethod.POST)
  public JSONObject appSoConfigSave(@RequestParam(value = "app_os_name") String appOsName,
      @RequestParam(value = "function_name") String functionName,
      @RequestParam(value = "name") String name,
      @RequestParam(value = "source_name") String sourceName) {
    JSONObject result = injectionAttacksConfigService
        .appSoConfigSave(name, sourceName, functionName, appOsName, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 应用so库函数防Hook定义新增so库.
   */
  @RequestMapping(value = "/inject/so/lib/create", method = RequestMethod.POST)
  public JSONObject soLibrarySave(@RequestParam(value = "name") String name) {
    JSONObject result = injectionAttacksConfigService
        .soLibrarySave(name, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 应用so库函数防Hook定义so库列表.
   */
  @RequestMapping(value = "/inject/so/lib/list", method = RequestMethod.POST)
  public JSONObject soLibrarySelect() {
    JSONObject result = injectionAttacksConfigService
        .soLibrarySelect(getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 应用so库函数防Hook定义状态修改.
   */
  @RequestMapping(value = "/inject/app/status", method = RequestMethod.POST)
  public JSONObject appSoConfigStatusUpdate(@RequestParam(value = "ids") Integer[] ids,
      @RequestParam(value = "status") Integer status) {
    JSONObject result = injectionAttacksConfigService
        .appSoConfigStatusUpdate(status, ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 应用so库函数防Hook定义删除.
   */
  @RequestMapping(value = "/inject/app/delete", method = RequestMethod.POST)
  public JSONObject appSoConfigDelete(@RequestParam(value = "ids") Integer[] ids) {
    JSONObject result = injectionAttacksConfigService
        .appSoConfigDelete(ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: 获取Xposed Hook定义列表.
   */
  @RequestMapping(value = "/inject/xposed/list", method = RequestMethod.POST)
  public JSONObject xposedConfigSelect() {
    JSONObject data = injectionAttacksConfigService
        .xPosedConfigSelect(getIntCurrentAgentId());
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: Xposed Hook定义新增.
   */
  @RequestMapping(value = "/inject/xposed/create", method = RequestMethod.POST)
  public JSONObject xposedConfigSave(@RequestParam(value = "name") String name,
      @RequestParam(value = "xposed_feature") String xposedFeature,
      @RequestParam(value = "function_name") String functionName,
      @RequestParam(value = "class_name") String className) {
    JSONObject result = injectionAttacksConfigService
        .xPosedConfigSave(name, xposedFeature, functionName, className, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: Xposed Hook定义状态修改.
   */
  @RequestMapping(value = "/inject/xposed/status", method = RequestMethod.POST)
  public JSONObject xposedConfigStatusUpdate(@RequestParam(value = "ids") Integer[] ids,
      @RequestParam(value = "status") Integer status) {
    JSONObject result = injectionAttacksConfigService
        .xPosedConfigStatusUpdate(status, ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: Xposed Hook定义删除.
   */
  @RequestMapping(value = "/inject/xposed/delete", method = RequestMethod.POST)
  public JSONObject xposedConfigDelete(@RequestParam(value = "ids") Integer[] ids) {
    JSONObject result = injectionAttacksConfigService
        .xPosedConfigDelete(ids, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: iOS-Dylib库函数防Hook定义列表.
   */
  @RequestMapping(value = "/inject/dylib/list", method = RequestMethod.POST)
  public JSONObject dylibConfigSelect() {
    JSONObject data = injectionAttacksConfigService.dylibConfigSelect(getIntCurrentAgentId());
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: iOS-Dylib库函数防Hook定义新增.
   */
  @RequestMapping(value = "/inject/dylib/create", method = RequestMethod.POST)
  public JSONObject dylibConfigSave(@RequestParam(value = "name") String name,
      @RequestParam(value = "dylib_name") String dylibName,
      @RequestParam(value = "function_name") String functionName) {
    if (dylibName.trim().equals("") || functionName.trim().equals("")) {
      return WebUtils.doJsonObject(1, ErrorInfo.ParamMustExist.getInfo());
    }
    JSONObject result = injectionAttacksConfigService
        .dylibConfigSave(name, dylibName, functionName, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: iOS-Dylib库函数防Hook定义状态修改.
   */
  @RequestMapping(value = "/inject/dylib/status", method = RequestMethod.POST)
  public JSONObject dylibConfigStatusUpdate(@RequestParam(value = "ids") Integer[] ids,
      @RequestParam(value = "status") Integer status) {
    JSONObject result = injectionAttacksConfigService
        .dylibConfigStatusUpdate(ids, status, getIntCurrentAgentId());
    return result;
  }

  /**
   * description: iOS-Dylib库函数防Hook定义删除.
   */
  @RequestMapping(value = "/inject/dylib/delete", method = RequestMethod.POST)
  public JSONObject dylibConfigDelete(@RequestParam(value = "ids") Integer[] ids) {
    JSONObject result = injectionAttacksConfigService
        .dylibConfigDelete(ids, getIntCurrentAgentId());
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.User;
import com.bangcle.service.LicenseService;
import com.bangcle.service.UserService;
import com.bangcle.util.PubString;
import com.bangcle.util.SelfCache;
import java.util.HashMap;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class LicenseController extends BaseController {

  @Autowired
  private LicenseService licenseService;

  @Autowired
  private UserService userService;

  /**
   * license导入功能.
   */
  @RequestMapping(value = "/license/import", method = RequestMethod.POST)
  public JSONObject importLicense(@RequestParam("file") MultipartFile licenseFile) {
    JSONObject result = new JSONObject();
    result.put("code", 1);
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    log.info("importLicense file = {}", licenseFile.getOriginalFilename());
    User user = userService.findById(userId);
    //判读导入权限
    if (user.getRoleId() == PubString.SUPER_USER || user.getRoleId() == PubString.ADMIN_USER) {
      HashMap<String, List<JSONObject>> licenseInfo = licenseService
          .decryptLicenseFile(licenseFile);
      if (licenseInfo.containsKey("user_info")) {
        JSONObject userInfo = (JSONObject) licenseInfo.get("user_info");
        String corpName = userInfo.getString("corp_name");
        if (user.getRoleId() == PubString.SUPER_USER || corpName.equals(user.getCorpName())) {
          result = licenseService.createOrUpdateLicense(licenseInfo);
        }
      } else {
        result.put("code", 1);
        return result;
      }
    } else {
      result.put("code", 1);
      return result;
    }

    return result;
  }
}
package com.bangcle.controller.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class AppInfo {

  private String strId;
  private String strName;
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.entity.enums.MSSPErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.service.MsspApiService;
import com.bangcle.util.SelfCache;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by zhusiwei on 2018/4/13.
 * 安控平台获取数据接口
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/mssp/")
public class MsspApiController {

  @Autowired
  MsspApiService msspApiService;
  @Autowired
  public HttpServletRequest request;
  @Autowired
  private AppRepository appRepo;

  /**
   * 心跳数据
   **/
  @RequestMapping(value = "/heartbeat", method = RequestMethod.POST)
  public String heartbeat(@RequestParam(value = "data", required = false) String data) {
    JSONObject result = msspApiService.heartbeat(null);
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 注册和更新接口
   **/
  @RequestMapping(value = "/register", method = RequestMethod.POST)
  public String register(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.register(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 注册威胁感知的操作员
   **/
  @RequestMapping(value = "/operator/register", method = RequestMethod.POST)
  public String registerOperator(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.registerOperator(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 获取登录key的接口
   **/
  @RequestMapping(value = "/getloginkey", method = RequestMethod.POST)
  public String getLoginKey(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.getLoginKey(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 登录威胁感知接口
   **/
  @RequestMapping(value = "/login", method = RequestMethod.POST)
  public JSONObject login(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      JSONObject resultUser = msspApiService.login(checkParam.getJSONObject("jsonData"));
      if (resultUser.getInteger("code").equals(0)) {
        User user = (User) resultUser.get("user");
        String sessionId = request.getSession().getId();

        JSONArray jsonArray = JSON.parseArray(user.getOperableApps());
        List<App> listApps = new ArrayList<>();
        for (int i = 0; i < jsonArray.size(); i++) {
          Integer agentId = jsonArray.getInteger(i);
          App app = appRepo.findById(agentId);
          listApps.add(app);
        }
        App demo = appRepo.findById(1);
        listApps.add(0, demo);
        //如果只有一个应用则默认演示应用，否则默认为客户的应用
        if (listApps.size() > 1) {
          int defaultIndex = 1;
          SelfCache.set(SelfCache.appIdSessionKey(sessionId),
              listApps.get(defaultIndex).getId()); //默认将第一个应用的ID +唯一的登陆信息存到MAP中
        } else {
          SelfCache.set(SelfCache.appIdSessionKey(sessionId),
              listApps.get(0).getId()); //默认将第一个应用的ID +唯一的登陆信息存到MAP中
        }
        SelfCache.set(SelfCache.uidSessionKey(sessionId), user.getId());
        SelfCache.set(SelfCache.unameSessionKey(sessionId), user.getName());
        SelfCache.set(SelfCache.roleIdSessionKey(sessionId), user.getRoleId());

        JSONObject jsonUserInfo = new JSONObject();
        jsonUserInfo.put("user_name", user.getName());
        jsonUserInfo.put("role_id", user.getRoleId());
        result.put("user_info", jsonUserInfo);
        result.put("code", 0);
        result.put("msg", "");
        return result;
      } else {
        result.put("ret_code", 1);
        result.put("ret_msg", ErrorInfo.ErrorEmailOrPassword.getInfo());
      }
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    return result;
  }

  /**
   * 获取风险数据
   **/
  @RequestMapping(value = "/risk/infos", method = RequestMethod.POST)
  public String getRiskInfos(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.getRiskInfo(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 获取运营监测
   **/
  @RequestMapping(value = "/list/infos", method = RequestMethod.POST)
  public String getListInfos(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.getListInfos(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 命名威胁感知应用名称
   **/
  @RequestMapping(value = "/apps/edit", method = RequestMethod.POST)
  public String editAppInfo(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.editAppInfo(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }

  /**
   * 运营监测统计数据
   **/
  @RequestMapping(value = "/list/monitor_info", method = RequestMethod.POST)
  public String getMonitorInfo(@RequestParam(value = "data") String data) {
    JSONObject result = new JSONObject();
    JSONObject checkParam = msspApiService.checkParamFormat(data);
    if (checkParam.getBoolean("check")) {
      result = msspApiService.getMonitorInfo(checkParam.getJSONObject("jsonData"));
    } else {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
    }
    String returnData = msspApiService.genEncryptData(result);
    return returnData;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ProtectStrategyService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:58 18-1-19.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ProtectStrategyController extends BaseController {

  @Autowired
  private ProtectStrategyService protectStrategyService;

  /**
   * description:获取策略配置列表.
   */
  @RequestMapping(value = "/plot/conf/list", method = RequestMethod.POST)
  public JSONObject getPlotConfList() {
    JSONObject result = protectStrategyService.findAll(getCurrentAgentId());
    return result;
  }

  /**
   * description：策略类型 状态修改.
   */
  @RequestMapping(value = "/plot/conf/update", method = RequestMethod.POST)
  public JSONObject plotConfUpdate(@RequestParam(value = "num_id") Integer id,
      @RequestParam(value = "status", required = false) Integer status,
      @RequestParam(value = "plot_type", required = false) Integer type,
      @RequestParam(value = "message", required = false) String message) {
    JSONObject result = protectStrategyService
        .updateStrategy(type, status, id, getCurrentAgentId(),message);
    return result;
  }

  /**
   * description：策略实施列表.
   */
  @RequestMapping(value = "/plot/conf/impl", method = RequestMethod.POST)
  public JSONObject findThreatByStrategy(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersions,
      @RequestParam(value = "location", required = false) List<String> listLocations,
      @RequestParam(value = "model", required = false) List<String> listModels,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersions,
      @RequestParam(value = "data_type", required = false) String strDataType,
      @RequestParam(value = "page", required = false) Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "start_time") String strStartTime,
      @RequestParam(value = "end_time") String strEndTime) throws ParseException {
    List<String> listThreatTypes = new ArrayList<>();
    if (null != strDataType && !strDataType.isEmpty()) {
      listThreatTypes.add(strDataType);
    }
    long[] longsTime = TimeParse.getLongRangeTime(strStartTime, strEndTime);
    JSONObject result = protectStrategyService
        .findThreatByStrategy(getCurrentAgentId(), listModels, listThreatTypes, listLocations,
            listOsVersions, listAppVersions, longsTime[0], longsTime[1], page, size);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ReportFormsService;
import com.bangcle.service.ReportListService;
import java.text.ParseException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by zhusiwei on 2018/3/7.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ReportFormsController extends BaseController {

  @Autowired
  private ReportFormsService reportFormsService;
  @Autowired
  private ReportListService reportListService;

  /**
   * 获取任务信息.
   * param reportId
   * @return
   */
  @RequestMapping(value = "/report_forms", method = RequestMethod.GET)
  public JSONObject getReportForms(@RequestParam(value = "report_id") Integer reportId)
      throws ParseException {

    JSONObject result = new JSONObject();
    JSONObject jsonObject = reportListService.getReportListById(reportId);
    JSONObject reportTaskInfo = reportFormsService
        .getReportFormsInfo(getIntCurrentAgentId(), jsonObject.getInteger("numTaskId"));

    reportTaskInfo.put("reportId",reportId);
    //reportFormsService.getReportFormsData(reportTaskInfo, result);
    //reportTaskInfo.put("reportId", reportId);
    //reportFormsService.getReportFormsData(reportTaskInfo, result);

    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.repository.ReportTaskManageRepository;
import com.bangcle.service.ReportListService;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipOutputStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ResourceLoader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:22 18-4-9.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ReportListController extends BaseController {

  @Autowired
  private ReportListService reportListService;

  @Resource
  private ResourceLoader resourceLoader;

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Autowired
  private ReportTaskManageRepository reportTaskManageRepository;

  @Value("${report_dir}")
  private String strReportDir;

  /**
   * 报表列表.
   */
  @RequestMapping(value = "/report/content/list", method = RequestMethod.POST)
  public JSONObject getReportList(
      @RequestParam(value = "begin_time", required = false) String strBeginTime,
      @RequestParam(value = "end_time", required = false) String strEndTime,
      @RequestParam(value = "task_id", required = false) Integer numTaskId,
      @RequestParam(value = "page") Integer numPage,
      @RequestParam(value = "size") Integer numSize) throws ParseException {
    JSONObject result = reportListService
        .getReportList(getIntCurrentAgentId(), numTaskId, strBeginTime, strEndTime, numPage,
            numSize);
    return result;
  }

  /**
   * 报表任务下拉列表.
   */
  @RequestMapping(value = "/report/task/name", method = RequestMethod.POST)
  public JSONObject getReportTaskNames() {
    JSONObject result = reportListService.getReportTaskNames(getIntCurrentAgentId());
    return result;
  }

  /**
   * 报表下载（当单个报表下载时直接下载Excle文件，当批量下载时下载的为压缩包）.
   */
  @RequestMapping(value = "/report/content/download", method = RequestMethod.GET)
  public void reportContentDownload(
      @RequestParam(value = "content_ids", required = false) List<Integer> listContentIds,
      HttpServletRequest request, HttpServletResponse response)
      throws Exception {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
    String strCurrentDay = sdf.format(new Date());
    byte[] buffer = new byte[1024];
    if (listContentIds != null) {
      //要下载的文件/压缩包路径
      String strDownloadPath = "";
      ReportSubTaskManage reportSubTaskManage = null;
      //任务生成的Excle文件
      File fileExcle = null;
      //Excle文件下载
      if (listContentIds.size() == 1) {
        reportSubTaskManage = reportSubtaskManageRepository
            .findById(listContentIds.get(0));
        //生成Excle文件路径
        String strSourcePath =
            strReportDir + "/" + reportSubTaskManage.getNumAgentId() + "_" + reportSubTaskManage
                .getNumTaskId() + "_"
                + listContentIds.get(0) + "/";
        log.info("strSourcePath:{}", strSourcePath);
        fileExcle = getFiles(reportSubTaskManage);
        //生成的Excle文件的完整路径
        strDownloadPath = strSourcePath + fileExcle.getName();
        //压缩包下载
      } else {
        //生成的压缩文件的文件名 eg：report-20180412.zip
        strDownloadPath = strReportDir + "/" + "report-" + strCurrentDay + ".zip";
        File fileZip = new File(strDownloadPath);
        if (!fileZip.exists()) {
          fileZip.createNewFile();
        }
        ZipOutputStream zipOutputStream = new ZipOutputStream(
            new FileOutputStream(strDownloadPath));
        for (int i : listContentIds) {
          reportSubTaskManage = reportSubtaskManageRepository.findById(i);
          fileExcle = getFiles(reportSubTaskManage);
          FileInputStream fis = new FileInputStream(fileExcle);
          zipOutputStream.putNextEntry(new ZipEntry(fileExcle.getName()));
          //设置压缩文件内的字符编码，不然会变成乱码
          zipOutputStream.setEncoding("GBK");
          int len;
          // 读入需要下载的文件的内容，打包到zip文件
          while ((len = fis.read(buffer)) > 0) {
            zipOutputStream.write(buffer, 0, len);
          }
          zipOutputStream.closeEntry();
          fis.close();
        }
        zipOutputStream.close();
      }
      this.downloadFile(strDownloadPath, response);
    }
  }

  /**
   * 以压缩文件导出.
   */
  public void downloadFile(String strPath, HttpServletResponse response) {
    response.setCharacterEncoding("UTF-8");
    // response.setContentType("application/octet-stream");
    try {
      File file = new File(strPath);
      // 以流的形式下载文件。
      BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file.getPath()));
      byte[] buffer = new byte[fis.available()];
      fis.read(buffer);
      fis.close();
      // 清空response
      response.reset();
      OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
      response.setContentType("application/octet-stream");
      String strHeaderKey = "Content-Disposition";
      String strHeaderValue = String.format("attachment; filename=\"%s\"", file.getName());
      response.setHeader(strHeaderKey, new String(strHeaderValue.getBytes("UTF-8"), "ISO-8859-1"));
      toClient.write(buffer);
      toClient.flush();
      toClient.close();
    } catch (IOException ex) {
      ex.printStackTrace();
    }
  }

  /**
   * 获取传入路径下的Excle文件.
   */
  public File getFiles(ReportSubTaskManage reportSubTaskManage) throws Exception {
    //生成报表路径
    String strPath =
        strReportDir + "/" + reportSubTaskManage.getNumAgentId() + "_" + reportSubTaskManage
            .getNumTaskId() + "_"
            + reportSubTaskManage.getId() + "/";
    File filePath = new File(strPath);
    File[] files = filePath.listFiles();
    for (File f : files) {
      if (f.getName().endsWith(".xlsx")) {
        return f;
      }
    }
    return null;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ReportTaskManageService;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午6:24 18-3-11 报表任务管理页面.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ReportTaskManageController extends BaseController {

  @Autowired
  ReportTaskManageService reportTaskManageService;

  /**
   * 报表任务创建.
   *
   * @param numTaskCycle 0 一次性，1 每天，2 每周，3 每两周，4 一个月，5 一季度
   * @param listReportTypes home 综合态势，threat 威胁态势，run 运行分析，crash 崩溃分析 报表任务创建.
   */
  @RequestMapping(value = "/report/task/create", method = RequestMethod.POST)
  public JSONObject reportTaskCreate(
      @RequestParam(value = "app_infos", required = false) JSONArray listAppInfos,
      @RequestParam(value = "locations", required = false) JSONArray listLocations,
      @RequestParam(value = "os_infos", required = false) JSONArray listOsInfos,
      @RequestParam(value = "task_name") String strTaskName,
      @RequestParam(value = "report_type") JSONArray listReportTypes,
      @RequestParam(value = "begin_time") String strBeginTime,
      @RequestParam(value = "end_time") String strEndTime,
      @RequestParam(value = "task_cycle") Integer numTaskCycle) {
    JSONObject result = reportTaskManageService
        .reportTaskCreate(getIntCurrentAgentId(), listAppInfos, listLocations, listOsInfos,
            listReportTypes, strTaskName, numTaskCycle, strBeginTime, strEndTime);
    return result;
  }

  /**
   * 报表任务删除.
   */
  @RequestMapping(value = "/report/task/delete", method = RequestMethod.POST)
  public JSONObject reportTaskDelete(@RequestParam(value = "task_id") Integer numId) {
    JSONObject result = reportTaskManageService.reportTaskDelete(getIntCurrentAgentId(), numId);
    return result;
  }

  /**
   * 报表任务状态修改.
   */
  @RequestMapping(value = "/report/task/status", method = RequestMethod.POST)
  public JSONObject reportTaskStatus(@RequestParam(value = "task_id") Integer numId,
      @RequestParam(value = "status") Integer numStatus) throws ParseException {
    JSONObject result = reportTaskManageService
        .reportTaskStatus(getIntCurrentAgentId(), numId, numStatus);
    return result;
  }

  /**
   * 报表任务信息回显.
   */
  @RequestMapping(value = "/report/task/info", method = RequestMethod.POST)
  public JSONObject reportTaskInfo(@RequestParam(value = "task_id") Integer numId) {
    JSONObject result = reportTaskManageService.reportTaskInfo(getIntCurrentAgentId(), numId);
    return result;
  }

  /**
   * 报表任务列表.
   */
  @RequestMapping(value = "/report/task/list", method = RequestMethod.POST)
  public JSONObject reportTaskList(@RequestParam(value = "page") Integer numPage,
      @RequestParam(value = "size") Integer numSize) throws ParseException {
    JSONObject result = reportTaskManageService
        .reportTaskList(getIntCurrentAgentId(), numPage, numSize);
    return result;
  }

  /**
   * 报表任务修改.
   */
  @RequestMapping(value = "/report/task/update", method = RequestMethod.POST)
  public JSONObject reportTaskUpdate(
      @RequestParam(value = "app_infos", required = false) JSONArray listAppInfos,
      @RequestParam(value = "locations", required = false) JSONArray listLocations,
      @RequestParam(value = "os_infos", required = false) JSONArray listOsInfos,
      @RequestParam(value = "task_name") String strTaskName,
      @RequestParam(value = "report_type") JSONArray listReportTypes,
      @RequestParam(value = "begin_time") String strBeginTime,
      @RequestParam(value = "end_time") String strEndTime,
      @RequestParam(value = "task_cycle") Integer numTaskCycle,
      @RequestParam(value = "task_id") Integer numId) {
    JSONObject result = reportTaskManageService
        .reportTaskUpdate(getIntCurrentAgentId(), listAppInfos, listLocations, listOsInfos,
            listReportTypes, strTaskName, numTaskCycle, strBeginTime, strEndTime, numId);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.RiskAppDefService;
import com.bangcle.util.WebUtils;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by zhusiwei on 2018/1/15.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/strategy/")
public class RiskAppDefController extends BaseController {

  @Autowired
  RiskAppDefService riskAppDefService;

  /**
   * 新增风险应用.
   */
  @RequestMapping(value = "/riskApp/addApp", method = RequestMethod.POST)
  public JSONObject addRiskApp(
      @RequestParam(value = "app_name", required = true) String appName,
      @RequestParam(value = "app_md5", required = true) String appMd5,
      @RequestParam(value = "package_name", required = true) String pkgName,
      @RequestParam(value = "platform", required = true) String platform) {
    log.info("addRiskApp ============== {}", platform);
    if (appName.trim().equals("") || appMd5.trim().equals("") || pkgName.trim()
        .equals("") || platform.trim().equals("")) {
      return WebUtils.doJsonObject(1, "the param couldn't be null");
    }
    String result = riskAppDefService
        .addRiskApp(Integer.parseInt(getCurrentAgentId()), appName, appMd5, pkgName, platform);
    if (result.equals("")) {
      return WebUtils.doJsonObject(0, "");
    } else {
      return WebUtils.doJsonObject(1, result);
    }

  }

  /**
   * 风险应用列表.
   */
  @RequestMapping(value = "/riskApp/list", method = RequestMethod.POST)
  public JSONObject riskAppList() {

    JSONObject data = riskAppDefService.riskAppList(Integer.parseInt(getCurrentAgentId()));
    return WebUtils.doJsonObject(0, "", data);

  }

  /**
   * 删除风险应用.
   */
  @RequestMapping(value = "/riskApp/deleteApp", method = RequestMethod.POST)
  public JSONObject deleteRiskApp(
      @RequestParam(value = "appIds", required = true) List<Integer> appIds) {

    if (riskAppDefService.deleteRiskApp(Integer.parseInt(getCurrentAgentId()), appIds)) {
      return WebUtils.doJsonObject(0, "");
    }
    return WebUtils.doJsonObject(1, ErrorInfo.DeleteFailure.getInfo());

  }

  /**
   * 启用／关闭风险应用.
   */
  @RequestMapping(value = "/riskApp/switchApp", method = RequestMethod.POST)
  public JSONObject switchRiskApp(
      @RequestParam(value = "onOff", required = true) Integer onOff,
      @RequestParam(value = "appIds", required = true) List<Integer> appIds) {

    if (riskAppDefService.switchRiskApp(Integer.parseInt(getCurrentAgentId()), onOff, appIds)) {
      return WebUtils.doJsonObject(0, "");
    }

    return WebUtils.doJsonObject(1, ErrorInfo.ErrorRequst.getInfo());

  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.RunningInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-运行分析-运行详情.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class RunningInfoController extends BaseController {

  @Autowired
  private RunningInfoService runningInfoService;

  /**
   * sort_by:区分升序还是降序 desc asc 启动列表.
   */
  @RequestMapping(value = "/start/info", method = RequestMethod.POST)
  public JSONObject startSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "udid", required = false) String strUdid,
      @RequestParam(value = "page") Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningInfoService.startSort(getCurrentAgentId(), listManufacturer,
        listLocation, listOsVersion, listAppVersion, strUdid, longsTime[0], longsTime[1], page,
        size,
        strSortBy);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * description: 一台设备的启动趋势.
   */
  @RequestMapping(value = "/start/detail/trend", method = RequestMethod.POST)
  public JSONObject startCountTrend(
      @RequestParam(value = "udid") String udid,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningInfoService
        .startCountTrend(getCurrentAgentId(), udid, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 通过id获取启动信息.
   */
  @RequestMapping(value = "/start/detail/info", method = RequestMethod.POST)
  public JSONObject getStartSummary(
      @RequestParam(value = "udid") String udid,
      @RequestParam(value = "page") Integer page,
      @RequestParam(value = "size") Integer szie,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime) throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = runningInfoService
        .getStartSummary(getCurrentAgentId(), udid, page, szie, longsTime[0], longsTime[1]);
    result.put("msg", "");
    result.put("data", data);
    result.put("code", 0);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.RunningStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 运行分析-运行分析-运行统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class RunningStatController extends BaseController {

  @Autowired
  private RunningStatService runningStatService;

  /**
   * 运行分析总数统计.
   */
  @RequestMapping(value = "/start/stat", method = RequestMethod.POST)
  public JSONObject runningCount(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningStatService
        .runningCount(getCurrentAgentId(), listManufacturer,
            listLocation, listOsVersion, listAppVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 启动趋势.
   */
  @RequestMapping(value = "/start/trend", method = RequestMethod.POST)
  public JSONObject runningTrend(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningStatService
        .runningTrend(getCurrentAgentId(), listManufacturer,
            listLocation, listOsVersion, listAppVersion, longsTime[0], longsTime[1]);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 启动次数排名前十城市/活跃设备排名前十城市.
   */
  @RequestMapping(value = "/start/rank", method = RequestMethod.POST)
  public JSONObject runningRank(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "count_type", required = false) String strCountType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningStatService
        .runningRank(getCurrentAgentId(), listManufacturer,
            listLocation, listOsVersion, listAppVersion, longsTime[0], longsTime[1],
            strCountType);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 启动分布.
   */
  @RequestMapping(value = "/start/dist", method = RequestMethod.POST)
  public JSONObject runningStat(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "count_type", required = false) String strCountType,
      @RequestParam(value = "dist_type", required = false) String strDistType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = runningStatService
        .runningStat(getCurrentAgentId(), listManufacturer,
            listLocation, listOsVersion, listAppVersion, longsTime[0], longsTime[1],
            strCountType, strDistType);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.SafeEventService;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:12 17-12-28.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class SafeEventController extends BaseController {

  @Autowired
  private SafeEventService safeEventService;

  /**
   * 安全事件创建.
   */
  @RequestMapping(value = "/event/create", method = RequestMethod.POST)
  public JSONObject safeEventCreate(
      @RequestParam(value = "event_name", required = false) String strEventName,
      @RequestParam(value = "description", required = false) String strDeacrip,
      @RequestParam(value = "event_type", required = false) Integer numEventType,
      @RequestParam(value = "num_time", required = false) Long numTime,
      @RequestParam(value = "time_type", required = false) String strTimeType,
      @RequestParam(value = "num_count", required = false) Integer numCount,
      @RequestParam(value = "threat_type", required = false) String strThreatType,
      @RequestParam(value = "num_species", required = false) Integer numSpecies,
      @RequestParam(value = "threat_type_list", required = false) List<String> listThreatType,
      @RequestParam(value = "num_order", required = false) Integer numOrder) {
    int numAgentId = Integer.parseInt(getCurrentAgentId());
    JSONObject result = safeEventService
        .safeEventCreate(strEventName, strDeacrip, numEventType, numTime, strTimeType, numCount,
            strThreatType, numSpecies, listThreatType, numOrder, numAgentId);
    return result;
  }

  /**
   * 安全事件列表.
   */
  @RequestMapping(value = "/event/list", method = RequestMethod.POST)
  public JSONObject safeEventList() {
    JSONArray data = safeEventService.safeEventList(Integer.parseInt(getCurrentAgentId()));
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;
  }

  /**
   * 安全事件信息回显.
   */
  @RequestMapping(value = "/event/info_back", method = RequestMethod.POST)
  public JSONObject safeEventInfo(
      @RequestParam(value = "event_id", required = false) Integer eventId) {
    JSONObject data = safeEventService.safeEventInfo(eventId);
    JSONObject result = new JSONObject();
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;
  }

  /**
   * 事件修改.
   */
  @RequestMapping(value = "/event/update", method = RequestMethod.POST)
  public JSONObject safeEventUpdate(
      @RequestParam(value = "event_name", required = false) String strEventName,
      @RequestParam(value = "description", required = false) String strDeacrip,
      @RequestParam(value = "event_type", required = false) Integer numEventType,
      @RequestParam(value = "num_time", required = false) Long numTime,
      @RequestParam(value = "time_type", required = false) String strTimeType,
      @RequestParam(value = "num_count", required = false) Integer numCount,
      @RequestParam(value = "threat_type", required = false) String strThreatType,
      @RequestParam(value = "num_species", required = false) Integer numSpecies,
      @RequestParam(value = "threat_type_list", required = false) List<String> listThreatType,
      @RequestParam(value = "num_order", required = false) Integer numOrder,
      @RequestParam(value = "event_id", required = false) Integer eventId) {
    int numAgentId = Integer.parseInt(getCurrentAgentId());
    JSONObject result = safeEventService
        .safeEventUpdate(strEventName, strDeacrip, numEventType, numTime, strTimeType, numCount,
            strThreatType, numSpecies, listThreatType, numOrder, eventId, numAgentId);
    return result;
  }

  /**
   * 事件状态修改.
   */
  @RequestMapping(value = "/event/on_off")
  public JSONObject safeEventStatus(
      @RequestParam(value = "event_id", required = false) Integer numEventId,
      @RequestParam(value = "status", required = false) Integer numStatus) {
    JSONObject result = safeEventService.safeEventStatus(numEventId, numStatus);
    return result;
  }

  /**
   * 事件删除.
   */
  @RequestMapping(value = "/event/delete", method = RequestMethod.POST)
  public JSONObject safeEventDelete(
      @RequestParam(value = "event_id", required = false) Integer numEventId) {
    JSONObject result = safeEventService.deleteById(numEventId);
    return result;
  }

  /**
   * 优先级调整.
   */
  @RequestMapping(value = "/event/exchange", method = RequestMethod.POST)
  public JSONObject safeEventChange(
      @RequestParam(value = "event_id_up", required = false) Integer eventIdUp,
      @RequestParam(value = "event_id_down", required = false) Integer eventIdDown,
      @RequestParam(value = "level_id_up", required = false) Integer levelIdUp,
      @RequestParam(value = "level_id_down", required = false) Integer levelIdDown) {
    JSONObject result = safeEventService
        .safeEventChange(eventIdUp, eventIdDown, levelIdUp, levelIdDown);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.SearchService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.Arrays;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/everisk/api/v4/web/")
@Slf4j
public class SearchController extends BaseController {

  @Autowired
  private SearchService searchService;

  /**
   * description: 搜索列表.
   */
  @RequestMapping(value = "/search/list", method = RequestMethod.POST)
  public JSONObject search(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "is_root", required = false) Integer isRoot,
      String type, String value, String text, Long page, Long size) throws ParseException {
    JSONObject result = new JSONObject();
    List<String> fieldList = searchService.filterDuckCondition(text);
    if (fieldList != null && fieldList.size() > 20) {
      result.put("code", 1);
      result.put("msg", "模糊搜索条件超出限制，最多20个");
      return result;
    }
    if (startTime == null || endTime == null || "".equals(startTime) || "".equals(endTime)) {
      result.put("code", 1);
      result.put("msg", "参数传递错误，时间格式有误");
      return result;
    }
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    String agentId = getCurrentAgentId();
    String root = null;
    if (isRoot != null) {
      if (isRoot.equals(1)) {
        root = "true";
      } else if (isRoot.equals(2)) {
        root = "false";
      }
    }
    JSONObject searchObject = searchService
        .search(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            longsTime[0], longsTime[1], type, value, fieldList, page, size, root);

    JSONObject dataObject = new JSONObject();
    dataObject.put("total", searchObject.getLongValue("count"));
    dataObject.put("datalist", searchObject.get("data_list"));
    result.put("data", dataObject);
    result.put("code", 0);
    return result;
  }


}
package com.bangcle.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.service.UserService;
import com.bangcle.util.BCrypt;
import com.bangcle.util.SelfCache;
import com.bangcle.util.WebUtils;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:34 17-11-10.
 */
@RestController
@RequestMapping("/everisk/api/v4/web/")
@Slf4j
@Api
public class SessionController extends BaseController {

  @Autowired
  private UserService userService;

  @Autowired
  private DefaultKaptcha defaultKaptcha;

  @Autowired
  private AppController appController;

  @Autowired
  private AppRepository appRepo;

  @Autowired
  public HttpServletRequest request;

  @Autowired
  public HttpServletResponse response;


  /**
   * param strEmail param strPassword param strCode description: 用户登陆.
   */
  @RequestMapping(value = "/users/sign_in", method = RequestMethod.POST)
  @ApiOperation(value = "登录接口", notes = "用于用户登录")
  @ApiImplicitParams({@ApiImplicitParam(name = "email", value = "登录邮箱", required = false),
      @ApiImplicitParam(name = "password", value = "登录密码", required = false),
      @ApiImplicitParam(name = "code", value = "登录验证码", required = false)})
  public JSONObject login(@RequestParam(value = "username", required = false) String username,
      @RequestParam(value = "password", required = false) String password,
      @RequestParam(value = "authcode", required = false) String authcode) {
    //根据用户名获取对象
    User user = userService.findByEmail(username);
    if (user == null) {
      return WebUtils.doJsonObject(1, ErrorInfo.ErrorEmailOrPassword.getInfo());
    }
    Integer userId = user.getId();
    App demo = appRepo.findById(1);
    List<App> listApps = new ArrayList<>();
    //获取所有应用列表
    if (userService.isSuperAdmin(user)) {
      listApps = appController.appfindAll();
    } else if (userService.isAdmin(user)) {
      listApps = appRepo.findByUserId(userId);
      listApps.add(0, demo);
    } else {
      JSONArray jsonArray = JSON.parseArray(user.getOperableApps());
      for (int i = 0; i < jsonArray.size(); i++) {
        Integer agentId = jsonArray.getInteger(i);
        App app = appController.getById(agentId);
        listApps.add(app);
      }
      listApps.add(0, demo);
    }
    String sessionId = request.getSession().getId();
    //密码校验
    if (BCrypt.checkpw(password.trim(), user.getEncryptedPassword())) {
      //将会话信息 应用信息放入缓存中

      SelfCache.set(SelfCache.uidSessionKey(sessionId), user.getId());
      //如果只有一个应用则默认演示应用，否则默认为客户的应用
      if (listApps.size() > 1) {
        int defaultIndex = 1;
        if (userService.isSuperAdmin(user)) {
          defaultIndex = 0;
        }
        SelfCache.set(SelfCache.appIdSessionKey(sessionId),
            listApps.get(defaultIndex).getId()); //默认将第一个应用的ID +唯一的登陆信息存到MAP中
        log.info("默认id{}", listApps.get(defaultIndex).getId());
      } else {
        SelfCache.set(SelfCache.appIdSessionKey(sessionId),
            listApps.get(0).getId()); //默认将第一个应用的ID +唯一的登陆信息存到MAP中
        log.info("默认id{}", listApps.get(0).getId());
      }
      SelfCache.set(SelfCache.unameSessionKey(sessionId), user.getName());
    } else {
      //密码不正确返回
      return WebUtils.doJsonObject(1, ErrorInfo.ErrorEmailOrPassword.getInfo());
    }
    //验证码校验
    String strSession = request.getSession().getId();
    if (!authcode.toLowerCase().equals(
        request.getSession().getAttribute(strSession + "strCode").toString().toLowerCase())) {
      return WebUtils.doJsonObject(1, ErrorInfo.ErrorCode.getInfo());
    }
    SelfCache.set(SelfCache.roleIdSessionKey(sessionId), user.getRoleId());
    JSONObject jsonUserInfo = new JSONObject();
    jsonUserInfo.put("user_name", user.getName());
    jsonUserInfo.put("role_id", user.getRoleId());
    JSONObject data = new JSONObject();

    data.put("user_info", jsonUserInfo);
    return WebUtils.doJsonObject(0, "", data);
  }

  /**
   * description: 生成验证码保存到Session中.
   */
  @RequestMapping(value = "/users/kaptcha", method = RequestMethod.GET)
  @ApiOperation(value = "验证码", notes = "用于生成验证码")
  public String kaptCha() throws IOException {
    //生产验证码字符串并保存到session中
    String strCode = defaultKaptcha.createText();
    String strSessions = request.getSession().getId();
    request.getSession().setAttribute(strSessions + "strCode", strCode);
    //将图片输出给浏览器
    BufferedImage imageCode = defaultKaptcha.createImage(strCode);
    response.setContentType("image/png");
    OutputStream os = response.getOutputStream();
    ImageIO.write(imageCode, "png", os);
    return strCode;
  }

  /**
   * description: 退出登录接口.
   */
  @RequestMapping(value = "/users/sign_out", method = RequestMethod.POST)
  @ApiOperation(value = "退出接口", notes = "退出登录接口")
  public JSONObject logout() {
    String sessionId = request.getSession().getId();
    // 清除所有session的缓存
    SelfCache.remove(SelfCache.uidSessionKey(sessionId));
    SelfCache.remove(SelfCache.unameSessionKey(sessionId));
    SelfCache.remove(SelfCache.appIdSessionKey(sessionId));
    SelfCache.remove(SelfCache.appNameSessionKey(sessionId));
    SelfCache.remove(SelfCache.roleIdSessionKey(sessionId));
    JSONObject jsonObject = new JSONObject();
    jsonObject.put("code", 0);
    jsonObject.put("msg", "");
    return jsonObject;
  }
}
package com.bangcle.controller;

import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.util.ReportsExportBaseParam;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.RestController;

/**
 * 检索报表表内容，并调用产生报表的数据接口，生成报表
 *
 * @author zhangdi
 */
@Configuration
@EnableScheduling
@RestController
@Slf4j
public class StartReportJobController {

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Scheduled(cron = "0 0/1 * * * ?") // 每10分钟执行一次
  public void StartReportJob() {

    List<ReportSubTaskManage> listReportSubTaskManages = reportSubtaskManageRepository
        .findByNumStatus(ReportsExportBaseParam.REPORT_STATUS_TYPE_UNDONE);

    for (ReportSubTaskManage reportSubTaskManage : listReportSubTaskManages) {
      //ReportsData.genDetailObject(Long.parseLong(mapTmp.get("id") + ""));
    }
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.LicenseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value = "/everisk/api/v4/web")
public class SystemConfigController extends BaseController {

  @Autowired
  private LicenseService licenseService;

  @RequestMapping(value = "/license/timing/limit", method = RequestMethod.POST)
  public JSONObject remainTime() {
    return licenseService.getRemainTime(getIntCurrentAgentId());
  }


  @RequestMapping(value = "/system/license/list", method = RequestMethod.POST)
  public JSONObject licenseDetail(@RequestParam(value = "user_id",required = false) String userId) {
    return licenseService.getLicenseDetail(userId);
  }

  @RequestMapping(value = "/system/app/list", method = RequestMethod.POST)
  public JSONObject app_List() {
    return licenseService.findAllApplication();

  }

  @RequestMapping(value = "/system/app/info", method = RequestMethod.POST)
  public JSONObject echo(@RequestParam(value = "app_id") Integer appId) {
    return licenseService.echo(appId);
  }

  @RequestMapping(value = "/system/app/update", method = RequestMethod.POST)
  public JSONObject update(@RequestParam(value = "app_id") Integer appId,
      @RequestParam(value = "app_name") String appName,
      @RequestParam(value = "user_email") String userEmail,
      @RequestParam(value = "user_name") String userName,
      @RequestParam(value = "user_phone") String userPhone) {

    return licenseService.update(appId, appName, userEmail, userName, userPhone);

  }

}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ThreatHostFraudService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:55 18-2-8.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ThreatHostFraudController extends BaseController {

  @Autowired
  private ThreatHostFraudService threatHostFraudService;

  /**
   * description:威胁自定义-域名欺诈-新增.
   */
  @RequestMapping(value = "/host/cheat/create", method = RequestMethod.POST)
  public JSONObject cheatHostConfigInsert(@RequestParam(value = "host") String strHost,
      @RequestParam(value = "ip") String strIp) {
    JSONObject result = threatHostFraudService.cheatHostConfigInsert(getIntCurrentAgentId(), strHost, strIp);
    return result;
  }

  /**
   * description:威胁自定义-域名欺诈-列表.
   */
  @RequestMapping(value = "/host/cheat/list", method = RequestMethod.POST)
  public JSONObject cheatHostConfigList() {
    JSONObject result = threatHostFraudService.cheatHostConfigList(getIntCurrentAgentId());
    return result;
  }

  /**
   * description:威胁自定义-域名欺诈-删除.
   */
  @RequestMapping(value = "/host/cheat/delete", method = RequestMethod.POST)
  public JSONObject cheatHostConfigDelete(@RequestParam(value = "num_ids") Integer[] ids) {
    JSONObject result = threatHostFraudService.cheatHostConfigDelete(getIntCurrentAgentId(), ids);
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ThreatInfoService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-威胁感知分析-威胁详情.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ThreatInfoController extends BaseController {

  @Autowired
  private ThreatInfoService threatInfoService;

  /**
   * description：地域 设备 系统版本 应用版本排行.
   */
  @RequestMapping(value = "/threat/info", method = RequestMethod.POST)
  public JSONObject threatSort(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strThreatType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "stat_type", required = false) String strStatType)
      throws ParseException {
    JSONObject result = new JSONObject();
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = threatInfoService
        .threatSort(getCurrentAgentId(), listAppVersion, strThreatType, listLocation, listManufacturer,
            listOsVersion, longsTime[0], longsTime[1], strStatType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description:威胁列表.
   */
  @RequestMapping(value = "/threat/stat/list", method = RequestMethod.POST)
  public JSONObject getThreatList(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strThreatType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "stat_type", required = true) String strStatType,
      @RequestParam(value = "sort_by", required = false) String strSortBy,
      @RequestParam(value = "sort_field", required = false) String strSortFiled,
      @RequestParam(value = "page", required = false) Long page,
      @RequestParam(value = "size", required = false) Long size,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    JSONObject result = new JSONObject();
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = threatInfoService
        .getThreatList(getCurrentAgentId(), listAppVersion, strThreatType, listLocation, listManufacturer,
            listOsVersion, strStatType, strSortBy, strSortFiled, page, size, longsTime[0],
            longsTime[1]);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description:时间链.
   */
  @RequestMapping(value = "/threat/time/line", method = RequestMethod.POST)
  public JSONObject threatTimeLine(
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "data_type", required = false) String strThreatType,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "udid", required = true) String udid,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime)
      throws ParseException {
    JSONObject result = new JSONObject();
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject data = threatInfoService
        .getTimeLine(getCurrentAgentId(), listAppVersion, strThreatType, listLocation, listManufacturer,
            listOsVersion, udid, longsTime[0], longsTime[1]);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description:威胁解析.
   */
  @RequestMapping(value = "/threat/detail/analyze", method = RequestMethod.POST)
  public JSONObject getThreatAnalyze(
      @RequestParam(value = "threat_id") String strThreatId)
      throws ParseException {
    JSONObject result = new JSONObject();
    JSONObject data = threatInfoService
        .getThreatAnalyze(strThreatId, getCurrentAgentId());
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.ThreatLocationFraudService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午4:21 18-1-18.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ThreatLocationFraudController extends BaseController {

  @Autowired
  private ThreatLocationFraudService threatLocationFraudService;

  /**
   * description:位置欺诈配置信息获取.
   */
  @RequestMapping(value = "/game/cheat/info", method = RequestMethod.POST)
  public JSONObject cheatAddrConfigSelect() {
    JSONObject result = threatLocationFraudService.cheatAddrConfigSelect(getIntCurrentAgentId());
    return result;
  }

  /**
   * description：位置欺诈修改.
   */
  @RequestMapping(value = "/game/cheat/update", method = RequestMethod.POST)
  public JSONObject cheatAddrConfigUpdate(@RequestParam(value = "num_id") Integer id,
      @RequestParam(value = "detectionCycle", required = false) Double cycle,
      @RequestParam(value = "distance", required = false) Double distance) {
    JSONObject result = new JSONObject();
    if (cycle == cycle.intValue()){
      result = threatLocationFraudService
          .cheatAddrConfigUpdate(distance, cycle.intValue(), id, getIntCurrentAgentId());
      return result;
    }else {
      result.put("msg", ErrorInfo.ErrorParagramFormat.getInfo());
      result.put("code", 1);
      return result;
    }
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.ThreatStatService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 威胁态势-威胁感知分析-威胁统计.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class ThreatStatController extends BaseController {

  @Autowired
  private ThreatStatService threatStatService;

  /**
   * param dev_type_select param location_select param os_version_select param app_version_select
   * param start_time param end_time param risk_type_select description: 威胁统计顶部数量统计 throws
   * ParseException.
   */
  @RequestMapping(value = "/threat/stat", method = RequestMethod.POST)
  public JSONObject threatCount(
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "data_type", required = false) String strTreatType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = threatStatService
        .threatCount(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion,
            listAppVersion, longsTime[0], longsTime[1], strTreatType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param dev_type_select param location_select param os_version_select param app_version_select
   * param start_time param end_time param risk_type_select description: 威胁总体趋势 throws
   * ParseException.
   */
  @RequestMapping(value = "/threat/trend", method = RequestMethod.POST)
  public JSONObject threatTrend(
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "data_type", required = false) String strTreatType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = threatStatService
        .threatTrend(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion,
            listAppVersion, longsTime[0], longsTime[1], strTreatType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param dev_type_select param location_select param os_version_select param app_version_select
   * param start_time param end_time param risk_type_select description: 威胁分类统计 throws
   * ParseException.
   */
  @RequestMapping(value = "/threat/classify", method = RequestMethod.POST)
  public JSONObject threatStatCount(
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "data_type", required = false) String strThreatType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = threatStatService
        .threatStatCount(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion,
            listAppVersion, longsTime[0], longsTime[1], strThreatType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param model param location_select param os_version_select param app_version_select
   * param start_time param end_time param risk_type_select description: 威胁分布 throws
   * ParseException.
   */
  @RequestMapping(value = "/threat/dist")
  public JSONObject threatStat(
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "start_time", required = true) String startTime,
      @RequestParam(value = "end_time", required = true) String endTime,
      @RequestParam(value = "data_type", required = false) String strThreatType,
      @RequestParam(value = "count_type", required = true) String strCountType,
      @RequestParam(value = "dist_type", required = true) String strDistType)
      throws ParseException {
    log.info("threatStat come in .........");
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = threatStatService
        .threatStat(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion,
            listAppVersion, longsTime[0], longsTime[1], strThreatType, strCountType,
            strDistType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * param dev_type_select param location_select param os_version_select param app_version_select
   * param start_time param end_time param risk_type_select description： 威胁策略实施统计 throws
   * ParseException.
   */
  @RequestMapping(value = "/threat/tactics", method = RequestMethod.POST)
  public JSONObject threatPlotCount(
      @RequestParam(value = "model", required = false) List<String> listManufacturer,
      @RequestParam(value = "location", required = false) List<String> listLocation,
      @RequestParam(value = "os_version", required = false) List<String> listOsVersion,
      @RequestParam(value = "app_version", required = false) List<String> listAppVersion,
      @RequestParam(value = "start_time", required = false) String startTime,
      @RequestParam(value = "end_time", required = false) String endTime,
      @RequestParam(value = "data_type", required = false) String strThreatType)
      throws ParseException {
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = new JSONObject();
    JSONObject data = threatStatService
        .threatPlotCount(getCurrentAgentId(), listManufacturer, listLocation, listOsVersion,
            listAppVersion, longsTime[0], longsTime[1], strThreatType);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }
}
package com.bangcle.controller;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.service.UserService;
import com.bangcle.util.BCrypt;
import com.bangcle.util.PubString;
import com.bangcle.util.SelfCache;
import java.text.ParseException;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:43 17-12-26.
 */
@Slf4j
@RestController
@RequestMapping("/everisk/api/v4/web/")
public class UserManageController extends BaseController {

  @Autowired
  private UserService userService;

  /**
   * description:用户列表.
   */
  @RequestMapping(value = "/user/list", method = RequestMethod.POST)
  public JSONObject getUserList() {
    JSONObject result = new JSONObject();
    JSONObject data = userService.getUserList();
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description:所有应用.
   */
  @RequestMapping(value = "/user/all_apps", method = RequestMethod.POST)
  public JSONObject getAppList() {
    JSONObject result = new JSONObject();
    User user = getUserInfo();
    JSONObject data = userService.getAppList(user);
    result.put("data", data);
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * description:创建用户.
   */
  @RequestMapping(value = "/user/create")
  public JSONObject userCreate(
      @RequestParam(value = "apps", required = false) List<Integer> listApps,
      @RequestParam(value = "email", required = false) String email,
      @RequestParam(value = "password", required = false) String password,
      @RequestParam(value = "role_id", required = false) Integer roleId,
      @RequestParam(value = "user_name", required = false) String userName) {
    JSONObject result = new JSONObject();
    User user = getUserInfo();
    //只有管理员账户才有权限创建帐号
    if (userService.isAdmin(user) && (roleId == PubString.OPERATE_USER
        || roleId == PubString.AUDITOR_USER)) {
      result = userService.userCreate(listApps, userName, email, password, roleId);
    } else {
      result.put("msg", ErrorInfo.NoAuthority.getInfo());
      result.put("code", 1);
    }
    return result;
  }

  /**
   * description:用户信息回显.
   */
  @RequestMapping(value = "/user/info")
  public JSONObject getUserInfo(
      @RequestParam(value = "user_id", required = false) Integer userId
  ) throws ParseException {
    JSONObject result = new JSONObject();
    JSONObject data = userService.getUserInfo(userId);
    result.put("data", data);
    result.put("msg", "");
    result.put("code", 0);
    return result;
  }

  /**
   * description:用户信息修改.
   */
  @RequestMapping(value = "/user/update")
  public JSONObject userUpdate(
      @RequestParam(value = "apps", required = false) List<Integer> listApps,
      @RequestParam(value = "email", required = false) String email,
      @RequestParam(value = "password", required = false) String password,
      @RequestParam(value = "role_id", required = false) Integer roleId,
      @RequestParam(value = "user_name", required = false) String userName,
      @RequestParam(value = "user_id", required = false) Integer userId) throws ParseException {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int currentUserId = Integer
        .parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    log.info("当前用户id{}", currentUserId);
    JSONObject result = new JSONObject();
    User user = getUserInfo();
    User updateUser = getUserInfoById(userId);
    //管理员账户有修改所有账户的权限
    if (userService.isAdmin(user)) {
      if (userId == currentUserId) {
        result.put("msg", ErrorInfo.NoAuthority.getInfo());
        result.put("code", 1);
      } else {
        result = userService.userUpdate(userId, listApps, userName, email, password, roleId);
      }
    } else if (userService.isSuperAdmin(
        user)) {
      //修改管理员的用户名、邮箱
      if (userId == currentUserId) {
        result.put("msg", ErrorInfo.NoAuthority.getInfo());
        result.put("code", 1);
      } else {
        result = userService.userUpdate(userId, null, userName, email, password, null);
      }
    } else {
      result.put("msg", ErrorInfo.NoAuthority.getInfo());
      result.put("code", 1);
    }
    return result;
  }

  /**
   * description:删除用户.
   */
  @RequestMapping(value = "/user/delete")
  public JSONObject userDelete(
      @RequestParam(value = "user_id", required = false) Integer userId
  ) throws ParseException {
    User delUser = getUserInfoById(userId);
    JSONObject result = new JSONObject();
    User opt = getUserInfo();
    //管理员账户有删除所有账户的权限
    if (userId.equals(opt.getId())) {
      result.put("msg", ErrorInfo.NoAuthority.getInfo());
      result.put("code", 1);
      return result;
    }
    if (userService.isAdmin(opt) && delUser.getGroupId().equals(opt.getId())) {
      try {
        userService.userDelete(userId);
        result.put("msg", "");
        result.put("code", 0);
      } catch (Exception e) {
        log.error("error", e);
        result.put("msg", ErrorInfo.DeleteFailure.getInfo());
        result.put("code", 1);
      }
    } else if (userService.isSuperAdmin(opt) && delUser.getRoleId().equals(PubString.ADMIN_USER)) {
      userService.userDelete(userId);
      result.put("msg", "");
      result.put("code", 0);
    } else {
      result.put("msg", ErrorInfo.NoAuthority.getInfo());
      result.put("code", 1);
    }
    return result;
  }

  /**
   * description:修改用户密码.
   */
  @RequestMapping(value = "/user/update_pw")
  public JSONObject userUpDatePW(
      @RequestParam(value = "new_password") String newPassword,
      @RequestParam(value = "old_password") String oldPassword
  ) throws ParseException {
    JSONObject result = new JSONObject();
    User opt = getUserInfo();
    if (BCrypt.checkpw(oldPassword, opt.getEncryptedPassword())) {
      result = userService
          .userUpdate(opt.getId(), null, opt.getName(), opt.getEmail(), newPassword, null);
    } else {
      result.put("msg", ErrorInfo.ErrorPassword.getInfo());
      result.put("code", 1);
    }

    return result;
  }
}
package com.bangcle.entity;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午9:53 17-10-23.
 */

@Entity
@Table(name = "bangcle_apps")
public class App {

  @Id
  private Integer id;

  @Column
  private String name;

  @Column(name = "os_platform")
  private Integer osPlatform;

  @Column
  private String owner;

  @Column(name = "owner_email")
  private String ownerEmail;

  @Column(name = "owner_phone")
  private String ownerPhone;

  @Column(name = "user_id")
  private Integer userId;

  @Column(name = "created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date createdAt;

  @Column(name = "updated_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date updatedAt;

  @Column(name = "plot_time")
  @Temporal(TemporalType.TIMESTAMP)
  private Date plotTime;

  @Column(name = "start_config")
  private String startConfig;

  @Column
  private Integer status;

  @Column(name = "is_default")
  private Integer isDefault;

  @Column(name = "is_use_cache")
  private Integer isUseCache;

  @Column(name = "pkg_name")
  private String pkgName;

  @Column(name = "license_info", length = 1024)
  private String parameters;

  @Column(name = "dlive_info")
  private Integer dliveInfo;

  @Column(name = "date_start_time")
  private Date dateStartTime;

  @Column(name = "date_end_time")
  private Date dateEndTime;

  public Integer getDliveInfo() {
    return dliveInfo;
  }

  public void setDliveInfo(Integer dliveInfo) {
    this.dliveInfo = dliveInfo;
  }

  public String getParameters() {
    return parameters;
  }

  public JSONObject setParameters(String parameters) {
    this.parameters = parameters;

    JSONObject jso = JSON.parseObject(parameters);
    return jso;
  }


  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Integer getOsPlatform() {
    return osPlatform;
  }

  public void setOsPlatform(Integer osPlatform) {
    this.osPlatform = osPlatform;
  }

  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public String getOwnerEmail() {
    return ownerEmail;
  }

  public void setOwnerEmail(String ownerEmail) {
    this.ownerEmail = ownerEmail;
  }

  public String getOwnerPhone() {
    return ownerPhone;
  }

  public void setOwnerPhone(String ownerPhone) {
    this.ownerPhone = ownerPhone;
  }

  public Date getPlotTime() {
    return plotTime;
  }

  public void setPlotTime(Date plotTime) {
    this.plotTime = plotTime;
  }

  public String getStartConfig() {
    return startConfig;
  }

  public void setStartConfig(String startConfig) {
    this.startConfig = startConfig;
  }

  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Integer getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Integer isDefault) {
    this.isDefault = isDefault;
  }

  public Integer getIsUseCache() {
    return isUseCache;
  }

  public void setIsUseCache(Integer isUseCache) {
    this.isUseCache = isUseCache;
  }

  public String getPkgName() {
    return pkgName;
  }

  public void setPkgName(String pkgName) {
    this.pkgName = pkgName;
  }

  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public Date getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public Date getDateStartTime(){ return dateStartTime; }

  public void setDateStartTime(Date dateStartTime){ this.dateStartTime = dateStartTime; }

  public Date getDateEndTime(){ return dateEndTime; }

  public void setDateEndTime(Date dateEndTime){ this.dateEndTime = dateEndTime; }
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * 应用SO库防Hook定义
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_app_so")
public class AppSoConfig {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  //名称
  @Column(name = "name")
  private String name;

  //调用源
  @Column(name = "source_name")
  private String sourceName;

  //被调用函数
  @Column(name = "function_name")
  private String functionName;

  //应用so库名称
  @Column(name = "app_os_name")
  private String appSoName;

  //状态(启用、停用、删除)
  @Column(name = "status")
  private Integer status;

  //添加时间
  @Column(name = "created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date create_time;

  //应用id
  @Column(name = "agent_id")
  private Integer agentId;

  public AppSoConfig() {
  }

  public AppSoConfig(String name, String sourceName, String functionName, String appSoName,
      Integer status, Date create_time, Integer agentId) {
    this.name = name;
    this.sourceName = sourceName;
    this.functionName = functionName;
    this.appSoName = appSoName;
    this.status = status;
    this.create_time = create_time;
    this.agentId = agentId;
  }
}
package com.bangcle.entity;

import javax.persistence.Entity;
import javax.persistence.Id;
import lombok.Data;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:08 18-2-9.
 */
@Data
@Entity
public class bangcleEventThreat {

  @Id
  private String threat_id;

  private String threat_type;

  private String threat_time;
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/***
 * 策略配置-威胁自定义-位置欺诈 数据库表映射
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_cheat_addr")
public class CheatAddrConfig {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "address_offset")
  private Double addressOffset;

  @Column(name = "detection_cycle")
  private Integer detectionCycle;

  @Column(name = "agent_id")
  private Integer agentId;

  @Column(name = "updated_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date updatedAt;

  public CheatAddrConfig() {
  }

  public CheatAddrConfig(Double addressOffset, Integer detectionCycle, Integer agentId,
      Date updatedAt) {
    this.addressOffset = addressOffset;
    this.detectionCycle = detectionCycle;
    this.agentId = agentId;
    this.updatedAt = updatedAt;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_cheater_app")
public class CheaterApp {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "cheater_app_id")
  private Integer cheaterAppId;

  @Column(name = "app_id", nullable = false)
  private Integer appId;

  @Column(name = "cheater_md5", nullable = false)
  private String cheaterMd5;

  @Column(name = "cheater_name", nullable = false)
  private String cheaterName;

  @Column(name = "cheater_pkg_name", nullable = false)
  private String cheaterPkgName;

  @Column(name = "platform", nullable = false, columnDefinition = " VARCHAR(64) DEFAULT ''")
  private String platform = "";

  @Column(name = "create_time", updatable = false, columnDefinition = "BIGINT default 0")
  private Long createTime;

  @Column(name = "on_off", nullable = false, columnDefinition = "Integer default 0")
  private Integer onOff = 0;

  @Column(name = "del_flag", nullable = false, columnDefinition = "Integer default 0")
  private Integer delFlag = 0;

}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_cheater_trait")
public class CheaterTrait {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "cheater_trait_id")
  private Integer cheaterTraitId;

  @Column(name = "app_id", nullable = false)
  private Integer appId;

  @Column(name = "cheater_name", nullable = false)
  private String cheaterName;

  @Column(name = "cheater_trait", nullable = false)
  private String cheaterTrait;

  @Column(name = "platform", nullable = false, columnDefinition = " VARCHAR(64) DEFAULT ''")
  private String platform = "";

  @Column(name = "create_time", updatable = false, columnDefinition = "BIGINT default 0")
  private Long createTime;

  @Column(name = "on_off", nullable = false, columnDefinition = "Integer default 0")
  private Integer onOff = 0;

  @Column(name = "del_flag", nullable = false, columnDefinition = "Integer default 0")
  private Integer delFlag = 0;
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * 策略配置-威胁自定义-域名欺诈 数据库表映射
 * author email: yongjin.pan@bangcle.com version time: 下午8:01 18-2-8.
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_cheat_host")
public class CheatHostConfig {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "num_agent_id")
  private Integer agentId;

  @Column(name = "str_host")
  private String strHost;

  @Column(name = "str_ip")
  private String strIp;

  @Column(name = "date_create")
  @Temporal(TemporalType.TIMESTAMP)
  private Date dateCreate;

  public CheatHostConfig() {}

  public CheatHostConfig(Integer agentId, String strHost, String strIp, Date dateCreate) {
    this.agentId = agentId;
    this.strHost = strHost;
    this.strIp = strIp;
    this.dateCreate = dateCreate;
  }
}
package com.bangcle.entity;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "bangcle_conf_plot_base_list")
public class ConfigureBaseList {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  // app的id，app的标识
  @Column(name = "int_agent_id")
  private Integer agentId;

  @Column(name = "str_content",  nullable = true, length = 65535)
  private String content;

  @Column(name = "str_ios_content",  nullable = true, length = 65535)
  private String iosContent;

  public String getIosContent() {
    return iosContent;
  }

  public void setIosContent(String iosContent) {
    this.iosContent = iosContent;
  }

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * 设备黑白名单配置表.
 * */

@Entity
@Table(name = "bangcle_conf_plot_dev_list")
public class ConfigureDevList {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  // app的id，app的标识
  @Column(name = "int_agent_id")
  private Integer agentId;

  // 设备特征类型，udid、imei等
  @Column(name = "str_type")
  private String type;

  // 特征值，udid、imei等具体的值
  @Column(name = "str_value")
  private String value;

  @Column(name = "str_udid_value", nullable = true, length = 4096)
  private String udidString;

  // 策略规则, msg(提示)、quit(退出)、msgquit(退出并提示)
  @Column(name = "str_option")
  private String option;

  // 配置提示时的提示语，显示到客户的用户的手机上
  @Column(name = "str_option_value")
  private String optionValue;

  // 启用、停用状态 0: 停止 1: 启用
  @Column(name = "int_status")
  private Integer status;

  // 0: 白，1: 黑
  @Column(name = "int_white_or_black")
  private Integer whiteOrBlack;

  // 默认是0，1是已经被删除了
  @Column(name = "int_is_deleted")
  private Integer isDeleted = 0;

  public ConfigureDevList() {

  }

  public ConfigureDevList(Integer agentId, String type, String value, String option, String optionValue, int status,
      int isBlackOrWhite){
    setAgentId(agentId);
    setType(type);
    setValue(value);
    setOption(option);
    setOptionValue(optionValue);
    setStatus(status);
    setWhiteOrBlack(isBlackOrWhite);
  }


  public String getUdidString() {
    return udidString;
  }

  public void setUdidString(String udidString) {
    this.udidString = udidString;
  }


  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public String getOption() {
    return option;
  }

  public void setOption(String option) {
    this.option = option;
  }

  public String getOptionValue() {
    return optionValue;
  }

  public void setOptionValue(String optionValue) {
    this.optionValue = optionValue;
  }

  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Integer getWhiteOrBlack() {
    return whiteOrBlack;
  }

  public void setWhiteOrBlack(Integer whiteOrBlack) {
    this.whiteOrBlack = whiteOrBlack;
  }

  public Integer getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Integer isDeleted) {
    this.isDeleted = isDeleted;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "bangcle_conf_plot_dev_list_instruction")
public class ConfigureDevListInstruction {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  // app的id，app的标识
  @Column(name = "int_agent_id")
  private Integer agentId;

  @Column(name = "str_value")
  private String value;

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * 模拟器白名单
 * */
@Entity
@Table(name = "bangcle_conf_plot_emulator_list")
public class ConfigureEmulatorList {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  // app的id，app的标识
  @Column(name = "int_agent_id")
  private Integer agentId;

  // 启用、停用状态 0: 停止 1: 启用
  @Column(name = "int_status")
  private Integer status;

  @Column(name = "str_name")
  private String name;

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getFeature() {
    return feature;
  }

  public void setFeature(String feature) {
    this.feature = feature;
  }

  // 跟客户端交互可以用这个字段
  @Column(name = "str_feature")

  private String feature;
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * 注入黑白名单
 * */
@Entity
@Table(name = "bangcle_conf_plot_inject_list")
public class ConfigureInjectList {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  // app的id，app的标识
  @Column(name = "int_agent_id")
  private Integer agentId;

  // 名称
  @Column(name = "str_name")
  private String name;

  // 特征
  @Column(name = "str_feature")
  private String feature;

  // 启用、停用状态 0: 停止 1: 启用
  @Column(name = "int_status")
  private Integer status;

  // 0: 白，1: 黑
  @Column(name = "int_white_or_black")
  private Integer whiteOBlack; // 这把Or改成了O，是因为jpa data or是关键字，用了会报错的.

  // 默认是0，1是已经被删除了
  @Column(name = "int_is_deleted")
  private Integer isDeleted = 0;


  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getFeature() {
    return feature;
  }

  public void setFeature(String feature) {
    this.feature = feature;
  }

  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Integer getWhiteOBlack() {
    return whiteOBlack;
  }

  public void setWhiteOBlack(Integer whiteOBlack) {
    this.whiteOBlack = whiteOBlack;
  }

  public Integer getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Integer isDeleted) {
    this.isDeleted = isDeleted;
  }
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Data;

@Data
@Entity
@Table(name = "bangcle_conf_plot_data_strategy")
public class DataStrategy {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;
  @Column
  private String name;
  @Column(length = 4000)
  private String locations;
  @Column(length = 4000)
  private String types;
  @Column
  private Integer status;
  @Column(name = "app_id")
  private String appId;
  @Column(name = "create_time")
  private Date createTime;
  @Column(name = "update_time")
  private Date updateTime;

}
package com.bangcle.entity;

import com.bangcle.util.PubString;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/2/7.
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_dylib")
public class DylibConfig {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  //名称
  @Column(name = "name")
  private String name;

  //Xposed特征
  @Column(name = "dylib_name")
  private String dylibName;

  //函数名
  @Column(name = "function_name")
  private String functionName;

  //状态
  @Column(name = "status", nullable = false, columnDefinition = "Integer default 0")
  private Integer status = PubString.STOP_STATUS;


  @Column(name = "create_time", updatable = false, columnDefinition = "BIGINT default 0")
  private Long createTime;


  @Column(name = "del_flag", nullable = false, columnDefinition = "Integer default 0")
  private Integer delFlag = 0;
  //appid
  @Column(name = "agent_id")
  private Integer agentId;
}
package com.bangcle.entity.enums;

/**
 * author email: xiang1.li@secneo.com
 * version time: 2017年6月24日下午3:15:02.
 */
public enum ErrorInfo {
  NoAuthority("您没有权限进行此操作"),
  CreateFailure("创建失败"),
  ObjectIsNull("对象为空"),
  TacticsGroupNotExist("策略组不存在"),
  UpdateFaiure("启动操作失败"),
  AlreadyConfig("已经配置过了,请不要重复配置"),
  TacticsEventCannotDelete("事件已经启用过或正在启动中，不允许删除"),
  RecordNotExist("删除失败，记录不存在或者已经被删除"),
  DeleteFailure("删除失败"),
  UpdateFailure("修改失败"),
  ParamMustExist("参数不允许为空"),
  ParamTooLarge("请将参数设置为小于五位数的正整数!"),
  EventParamTooLarge("参数设置过大！"),
  PleaseLogIn("请重新登录"),
  ReportTaskNameTooLong("请将报表任务名称设置为长度小于15位的字符串！"),
  ErrorTimeRange("时间范围允许为空！"),
  ErrorEmailFormat("邮箱格式错误！"),
  ErrorPhoneFormat("联系方式格式错误！"),
  ErrorReportExist("报表任务已经存在，请勿重复创建！"),
  ErrorAddressOffset("请将位置漂移设置为正数！"),
  ErrorParagramFormat("请将检测周期设置为大于或等于10的正整数！"),
  ErrorIpFormat("IP格式错误！"),
  ErrorEmailOrPassword("用户名或密码不正确!"),
  ErrorUserExit("该用户已经存在，请不要重复创建！"),
  ErrorEventExit("该事件已经存在!"),
  ErrorPasswordFormat("密码须至少包含大写字母 小写字母 数字 特殊字符中的两种，且长度为8-16位！"),
  ErrorThreatNum("请输入不小于8的正整数"),
  ErrorCode("验证码输入错误"),
  ErrorPassword("密码错误"),
  ErrorUpdate("更新失败"),
  ErrorRequst("请求失败");

  private String info;

  private ErrorInfo(String info) {
    this.info = info;
  }

  public String getInfo() {
    return info;
  }

}
package com.bangcle.entity.enums;

/**
 * Created by zhusiwei on 2018/4/13.
 */
public enum MSSPErrorInfo {
  //安控平台接口返回信息
  MSSP_ParamFormatError("参数格式不正确"),
  MSSP_LicenseParseError("LICENSE解析异常"),
  MSSP_UserNotExist("用户不存在"),
  MSSP_LicenseSaveFail("注册失败，lincese注册失败"),
  MSSP_UserMatchLicenseFail("注册失败，用户与license不匹配"),
  MSSP_ServerException("服务器内部异常"),
  MSSP_RegisterFail("注册失败"),
  MSSP_NoPermission("您没有权限进行此操作"),
  MSSP_APPMatchLicenseFail("app和用户不对应");
  private String info;

  private MSSPErrorInfo(String info) {
    this.info = info;
  }

  public String getInfo() {
    return info;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/1/31.
 */
@Data
@Entity
@Table(name = "bangcle_env_description")
public class EnvDescription {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  @Column(name = "data_type", unique = true, columnDefinition = " VARCHAR(128)")
  private String dataType;

  @Column(name = "type_name", unique = true, columnDefinition = " VARCHAR(64)")
  private String typeName;

  @Column(name = "exception_description", columnDefinition = "Text DEFAULT ''")
  private String exceptionDescription;

  @Column(name = "exception_analysis", columnDefinition = "Text DEFAULT ''")
  private String exceptionAnalysis;

}
package com.bangcle.entity;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Data;

@Entity
@Table(name = "bangcle_conf_plot_protect_strategy")
@Data
public class ProtectStrategy implements Serializable{
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;
  @Column
  private Integer status;                                                   // 0关闭  1开启
  @Column(name="threat_type")
  private String threatType;
  @Column
  private Integer strategy;                                                  // 0 允许  1 提示  2提示并推出 3 退出
  @Column(name="app_id")
  private String appId;
  @Column(name = "message")
  private String message;

}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午7:43 18-4-4.
 */
@Entity
@Table(name = "bangcle_report_sub_management")
@Data
public class ReportSubTaskManage {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "num_agent_id")
  private Integer numAgentId;

  @Column(name = "str_report_name")
  private String strReportName;


  @Column(name = "num_task_cycle")
  private Integer numTaskCycle;

  @Column(name = "str_begin_time")
  private String strBeginTime;

  @Column(name = "str_end_time")
  private String strEndTime;

  @Column(name = "num_status")
  private Integer numStatus;

  @Column(name = "date_created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date dateCreatedAt;

  @Column(name = "num_task_id")
  private Integer numTaskId;

  @Column(name = "str_path")
  private String strPath;


  public ReportSubTaskManage(Integer numAgentId, String strReportName, Integer numTaskCycle,
      String strBeginTime, String strEndTime, Integer numStatus, Date dateCreatedAt,
      Integer numTaskId, String strPath) {
    this.numAgentId = numAgentId;
    this.strReportName = strReportName;
    this.numTaskCycle = numTaskCycle;
    this.strBeginTime = strBeginTime;
    this.strEndTime = strEndTime;
    this.numStatus = numStatus;
    this.dateCreatedAt = dateCreatedAt;
    this.numTaskId = numTaskId;
    this.strPath = strPath;
  }

  public ReportSubTaskManage() {}
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:04 18-3-11
 * 报表任务管理部分.
 */
@Entity
@Table(name = "bangcle_report_task_management")
@Data
public class ReportTaskManage {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "num_agent_id")
  private Integer numAgentId;

  @Column(name = "str_task_name")
  private String strTaskName;

  @Column(name = "str_locations", length = 4000)
  private String strLocations;

  @Column(name = "str_os_infos", length = 4000)
  private String strOsInfos;

  @Column(name = "str_app_infos", length = 4000)
  private String strAppInfos;

  @Column(name = "str_report_type")
  private String strReportType;

  @Column(name = "num_task_cycle")
  private Integer numTaskCycle;

  @Column(name = "str_begin_time")
  private String strBeginTime;

  @Column(name = "str_end_time")
  private String strEndTime;

  @Column(name = "num_status")
  private Integer numStatus;

  @Column(name = "date_created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date dateCreatedAt;

  @Column(name = "date_update_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date dateUpdateAt;

  @Column(name = "num_report_count")
  private Integer numReportCount = 0;

  @Column(name = "str_last_time")
  private Date strLastTime;

  @Column(name = "str_next_time")
  private String strNextTime;

}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/1/15.
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_riskapp")
public class RiskApp {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "risk_app_id")
  private Integer riskAppId;

  @Column(name = "app_id", nullable = false)
  private Integer appId;

  @Column(name = "app_md5", nullable = false)
  private String appMd5;

  @Column(name = "app_name", nullable = false)
  private String appName;

  @Column(name = "create_time", updatable = false, columnDefinition = "BIGINT default 0")
  private Long createTime;

  @Column(name = "on_off", nullable = false, columnDefinition = "Integer default 0")
  private Integer onOff = 0;

  @Column(name = "del_flag", nullable = false, columnDefinition = "Integer default 0")
  private Integer delFlag = 0;

  @Column(name = "package_name", nullable = false)
  private String packageName;

  @Column(name = "platform", nullable = false, columnDefinition = " VARCHAR(64) DEFAULT ''")
  private String platform = "";

}
package com.bangcle.entity;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenerationTime;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午7:08 17-12-22.
 */
@Entity
@Table(name = "bangcle_conf_safe_event")
@EntityListeners(AuditingEntityListener.class)
public class SafeEvent {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "agent_id")
  private Integer agentId;

  @Column
  private String name;

  @Column(length = 4000)
  private String description;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "creat_at", updatable = false, columnDefinition = "timestamp default current_timestamp")
  @CreationTimestamp
  private Date createAt;

  @Temporal(TemporalType.TIMESTAMP)
  @UpdateTimestamp
  @Column(name = "update_at", columnDefinition = "timestamp default current_timestamp")
  private Date updateAt;

  @Column(name = "status", columnDefinition = "INT default 0", nullable = false)
  private Integer status = 0;

  //@Lob
  //@Basic(fetch = FetchType.EAGER)
  @Column(name = "content", nullable = true, length = 4000)
  private String content;

  @Column(name = "num_level")
  private Integer level;

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Integer getAgentId() {
    return agentId;
  }

  public void setAgentId(Integer agentId) {
    this.agentId = agentId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Date getCreateAt() {
    return createAt;
  }

  public void setCreateAt(Date createAt) {
    this.createAt = createAt;
  }

  public Date getUpdateAt() {
    return updateAt;
  }

  public void setUpdateAt(Date updateAt) {
    this.updateAt = updateAt;
  }

  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  //@Lob
  //@Basic(fetch = FetchType.EAGER)
  @Column(name = "content", nullable = true)
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }
}package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/***
 * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义-函数所在SO库
 */

@Data
@Entity
@Table(name = "bangcle_conf_plot_so_library")
public class SoLibrary {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  //函数所在SO库名称
  @Column(name = "name")
  private String name;

  //创建时间
  @Column(name = "created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date create_time;

  //appid
  @Column(name = "agent_id")
  private Integer agentId;

  public SoLibrary() {
  }

  public SoLibrary(String name, Date create_time, Integer agentId) {
    this.name = name;
    this.create_time = create_time;
    this.agentId = agentId;
  }
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * 系统SO库函数防Hook定义 mode
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_system_so")
public class SystemSoConfig {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "name")
  private String name;

  @Column(name = "function_name")
  private String functionName;

  @Column(name = "system_os")
  private String systemSOName;

  @Column(name = "status")
  private Integer status;

  @Column(name = "created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date create_time;

  @Column(name = "agent_id")
  private Integer agentId;

  public SystemSoConfig() {
  }

  public SystemSoConfig(String name, String functionName, String systemSOName,
      Integer status, Date create_time, Integer agentId) {
    this.name = name;
    this.functionName = functionName;
    this.systemSOName = systemSOName;
    this.status = status;
    this.create_time = create_time;
    this.agentId = agentId;
  }
}
package com.bangcle.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Data;

/**
 * Created by zhusiwei on 2018/1/31.
 */
@Data
@Entity
@Table(name = "bangcle_threat_description")
public class ThreatDescription {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  @Column(name = "data_type", unique = true, columnDefinition = " VARCHAR(128)")
  private String dataType;

  @Column(name = "type_name", unique = true, columnDefinition = " VARCHAR(64)")
  private String typeName;

  @Column(name = "threat_description", columnDefinition = "Text DEFAULT ''")
  private String threatDescription;

  @Column(name = "threat_analysis", columnDefinition = "Text DEFAULT ''")
  private String threatAnalysis;
}
package com.bangcle.entity;

import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.CreationTimestamp;

@Entity
@Table(name = "bangcle_users")
public class User {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @Column(name = "corp_name")
  private String corpName;

  @Column
  private String email;

  @Column
  private String name;

  @Column(name = "encrypted_password")
  private String encryptedPassword;

  @Column(name = "created_at", updatable = false, columnDefinition = "timestamp default current_timestamp")
  @Temporal(TemporalType.TIMESTAMP)
  private Date createdAt;

  @Column(name = "updated_at", updatable = false, columnDefinition = "timestamp default current_timestamp")
  @CreationTimestamp
  @Temporal(TemporalType.TIMESTAMP)
  private Date updatedAt;

  @Column(name = "role_id", nullable = true)
  private Integer roleId;

  @Column(name = "group_id")
  private Integer groupId;

  @Column(name = "register_by")
  private Integer registerBy;

  @Column(name = "soc_login_key")
  private String socLoginKey;

  @Column(name = "operable_apps")
  private String operableApps;

  @Column(name = "mssp_name")
  private String msspName;

  @Column(name = "mssp_login_key")
  private String msspLoginKey;


  public String getMsspLoginKey() {
    return msspLoginKey;
  }

  public void setMsspLoginKey(String msspLoginKey) {
    this.msspLoginKey = msspLoginKey;
  }

  public String getMsspName() {
    return msspName;
  }

  public void setMsspName(String msspName) {
    this.msspName = msspName;
  }

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public String getCorpName() {
    return corpName;
  }

  public void setCorpName(String corpName) {
    this.corpName = corpName;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getEncryptedPassword() {
    return encryptedPassword;
  }

  public void setEncryptedPassword(String encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
  }

  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public Date getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Integer getRoleId() {
    return roleId;
  }

  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }

  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public Integer getRegisterBy() {
    return registerBy;
  }

  public void setRegisterBy(Integer registerBy) {
    this.registerBy = registerBy;
  }

  public String getSocLoginKey() {
    return socLoginKey;
  }

  public void setSocLoginKey(String socLoginKey) {
    this.socLoginKey = socLoginKey;
  }

  public String getOperableApps() {
    return operableApps;
  }

  public void setOperableApps(String operableApps) {
    this.operableApps = operableApps;
  }
}
package com.bangcle.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Data;

/**
 * 策略配置-威胁定义-注入攻击-Xposed Hook定义
 */
@Data
@Entity
@Table(name = "bangcle_conf_plot_xposed")
public class XposedConfig {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  //名称
  @Column(name = "name")
  private String name;

  //Xposed特征
  @Column(name = "xposed_feature")
  private String xposedFeature;

  //函数名
  @Column(name = "function_name")
  private String functionName;

  //类名
  @Column(name = "class_name")
  private String className;


  //状态
  @Column(name = "status")
  private Integer status;

  //创建时间
  @Column(name = "created_at")
  @Temporal(TemporalType.TIMESTAMP)
  private Date create_time;

  //appid
  @Column(name = "agent_id")
  private Integer agentId;

  public XposedConfig() {

  }

  public XposedConfig(String name, String xposedFeature, String functionName,
      String className, Integer status, Date create_time, Integer agentId) {
    this.name = name;
    this.xposedFeature = xposedFeature;
    this.functionName = functionName;
    this.className = className;
    this.status = status;
    this.create_time = create_time;
    this.agentId = agentId;
  }
}
package com.bangcle.filter;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.util.PubString;
import com.bangcle.util.SelfCache;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

/**
 * author email: xiang1.li@secneo.com version time: 2017年6月22日下午2:31:39 description: 权限验证拦截器.
 */
@Slf4j
public class AuthorityInterceptor implements HandlerInterceptor {

  @Override
  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
      throws Exception {
    // log.info("在请求处理之前进行调用（Controller方法调用之前）");
    String sessionId = request.getSession().getId();
    String requestUri = request.getRequestURI();

    if (requestUri != null && requestUri.contains("/everisk/api/v4")) {
      if (requestUri.contains("/everisk/api/v4/web/users/sign_in") || requestUri
          .contains("/everisk/api/v4/web/users/kaptcha") || requestUri
          .contains("/everisk/api/v4/web/mssp/")) {
        return true;
      }
      //判断是否登录
      if (SelfCache.get(SelfCache.uidSessionKey(sessionId)) == null) {
        JSONObject object = new JSONObject();
        object.put("code", 2);
        object.put("msg", ErrorInfo.PleaseLogIn.getInfo());
        response.getWriter().write(JSONObject.toJSONString(object));
        return false;
      }
      //判断是否有配置权限
      if (requestUri.contains("/everisk/api/v4/web/plot/conf") || requestUri
          .contains("/everisk/api/v4/web/game") || requestUri
          .contains("/everisk/api/v4/web/host") || requestUri
          .contains("/everisk/api/v4/web/inject") || requestUri
          .contains("/everisk/api/v4/web/strategy") || requestUri
          .contains("/everisk/api/v4/web/pick/conf") || requestUri
          .contains("/everisk/api/v4/web/configure") || requestUri
          .contains("/everisk/api/v4/web/list/switchThreatenRule") || requestUri
          .contains("/everisk/api/v4/web/event/info_back") || requestUri
          .contains("/everisk/api/v4/web/event/update") || requestUri
          .contains("/everisk/api/v4/web/event/create") || requestUri
          .contains("/everisk/api/v4/web/event/on_off") || requestUri
          .contains("/everisk/api/v4/web/event/list")) {

        //获取当前会话的用户id
        int roleId = Integer
            .parseInt(SelfCache.get(SelfCache.roleIdSessionKey(sessionId)).toString());
        if (roleId == PubString.ADMIN_USER || roleId == PubString.SUPER_USER
            || roleId == PubString.OPERATE_USER) {
          return true;
        }
      }
      //判断系统配置权限
      if (requestUri.contains("/everisk/api/v4/web/system")) {
        //获取当前会话的用户id
        int roleId = Integer
            .parseInt(SelfCache.get(SelfCache.roleIdSessionKey(sessionId)).toString());
        if (roleId == PubString.ADMIN_USER || roleId == PubString.SUPER_USER) {
          return true;
        }
      }
      if (requestUri.contains("/everisk/api/v4/web/mssp/")) {
        if (PubString.NEED_MSSP) {
          return true;
        }
        return false;
      }

    }
    return true;// 只有返回true才会继续向下执行，返回false取消当前请求
  }

  @Override
  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
      ModelAndView modelAndView) throws Exception {
    // log.info("请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）");
  }

  @Override
  public void afterCompletion(HttpServletRequest request, HttpServletResponse response,
      Object handler, Exception ex)
      throws Exception {
    // log.info("在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）");
  }

}package com.bangcle.filter;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

/**
 * author email: xiang1.li@secneo.com
 * version time: 2017年6月22日下午2:28:05
 * description: 加载拦截器的地方.
 */

@Configuration
public class WebMvcConfigurer extends WebMvcConfigurerAdapter {

  @Override
  public void addInterceptors(InterceptorRegistry registry) {
    // 多个拦截器组成一个拦截器链
    // addPathPatterns 用于添加拦截规则
    // excludePathPatterns 用户排除拦截
    registry.addInterceptor(new AuthorityInterceptor()).addPathPatterns("/**");
    super.addInterceptors(registry);
  }

}package com.bangcle;

import net.bull.javamelody.MonitoringFilter;
import net.bull.javamelody.SessionListener;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

//JAVAMELODY监控配置
@Configuration
public class JavamelodyConfiguration {

    @Bean
    public FilterRegistrationBean monitorFilter(){
        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new MonitoringFilter());
        filterRegistrationBean.addUrlPatterns("/*");
        return filterRegistrationBean;
    }

    @Bean
    public ServletListenerRegistrationBean sessionListener(){
        ServletListenerRegistrationBean servletListenerRegistrationBean = new ServletListenerRegistrationBean();
        servletListenerRegistrationBean.setListener(new SessionListener());
        return servletListenerRegistrationBean;
    }

}package com.bangcle.repository;

import com.bangcle.entity.App;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 上午9:51 17-10-23.
 */

@Transactional
public interface AppRepository extends BaseRepository<App, String> {

  App findById(Integer id);

//List<App> findByName(String name);

  @Query(value = "SELECT * FROM bangcle_apps ORDER BY id ASC", nativeQuery = true)
  List<App> findAll();

  @Transactional
  @Query(value = "SELECT * FROM bangcle_apps WHERE user_id=:userId AND id NOT IN (:ids) ORDER BY id ASC", nativeQuery = true)
  List<App> findDelApp(@Param("userId") Integer userId, @Param("ids") Integer[] ids);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_apps WHERE user_id=:userId ORDER BY id ASC", nativeQuery = true)
  List<App> findByUserId(@Param("userId") Integer userId);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_apps WHERE user_id=:userId", nativeQuery = true)
  void delByUserId(@Param("userId") Integer userId);

}
package com.bangcle.repository;

import com.bangcle.entity.AppSoConfig;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义 持久化
 */
@Transactional
public interface AppSoConfigRepository extends
    BaseRepository<AppSoConfig, Integer> {

  @Override
  AppSoConfig save(AppSoConfig appSoConfig);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_plot_app_so WHERE id=:id", nativeQuery = true)
  int deleteById(@Param("id") Integer id);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_app_so WHERE agent_id=:agentId AND status!=:status ORDER BY created_at DESC", nativeQuery = true)
  List<AppSoConfig> findByAgentId(@Param("agentId") Integer agentId,
      @Param("status") Integer status);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_app_so SET status=:status WHERE id IN (:ids) AND agent_id=:agentId", nativeQuery = true)
  int updateById(@Param("status") Integer status, @Param("ids") Integer[] ids, @Param("agentId") Integer agentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_app_so WHERE agent_id=:agentId AND function_name=:functionName And app_os_name=:appOsName", nativeQuery = true)
  List<AppSoConfig> findByFunctionNameAndAppOsName(@Param("agentId") Integer agentId,
      @Param("functionName") String functionName, @Param("appOsName") String appOsName);

}
package com.bangcle.repository;

import java.io.Serializable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.NoRepositoryBean;


/**
 * author email: yongjin.pan@bangcle.com
 * version time: 上午9:55 17-10-23.
 */
@NoRepositoryBean
public interface BaseRepository<T, I extends Serializable> extends JpaRepository<T, Serializable> {

}
package com.bangcle.repository;

import com.bangcle.entity.CheaterApp;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Transactional
public interface CheaterAppDefRepository extends BaseRepository<CheaterApp, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheater_app WHERE app_id=:appId and del_flag=0 order by create_time desc ", nativeQuery = true)
  List<CheaterApp> findByAppId(@Param("appId") Integer appId);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_cheater_app set on_off = :onOff WHERE cheater_app_id in (:cheaterAppIds) and app_id=:appId", nativeQuery = true)
  int updateOnOff(@Param("appId") Integer appId, @Param("onOff") Integer onOff,
      @Param("cheaterAppIds") Integer[] cheaterAppIds);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_cheater_app set del_flag= 1 WHERE cheater_app_id in (:cheaterAppIds) and app_id=:appId", nativeQuery = true)
  int updateDel(@Param("appId") Integer appId, @Param("cheaterAppIds") Integer[] cheaterAppIds);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheater_app WHERE app_id=:appId and del_flag=0 and cheater_md5=:cheaterMd5 and cheater_pkg_name=:pkgName and platform=:platform", nativeQuery = true)
  CheaterApp checkOnly(@Param("appId") Integer appId, @Param("cheaterMd5") String cheaterMd5,
      @Param("pkgName") String pkgName, @Param("platform") String platform);

}
package com.bangcle.repository;

import com.bangcle.entity.CheaterTrait;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Transactional
public interface CheaterTraitDefRepository extends BaseRepository<CheaterTrait, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheater_trait WHERE app_id=:appId and del_flag=0 order by create_time desc ", nativeQuery = true)
  List<CheaterTrait> findByAppId(@Param("appId") Integer appId);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_cheater_trait set on_off = :onOff WHERE cheater_trait_id in (:traitIds) and app_id=:appId", nativeQuery = true)
  int updateOnOff(@Param("appId") Integer appId, @Param("onOff") Integer onOff,
      @Param("traitIds") Integer[] traitIds);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_cheater_trait set del_flag= 1 WHERE cheater_trait_id in (:traitIds) and app_id=:appId", nativeQuery = true)
  int updateDel(@Param("appId") Integer appId, @Param("traitIds") Integer[] traitIds);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheater_trait WHERE app_id=:appId and del_flag=0 and cheater_trait=:cheaterTrait and platform=:platform", nativeQuery = true)
  CheaterTrait checkOnly(@Param("appId") Integer appId, @Param("cheaterTrait") String cheaterTrait,
      @Param("platform") String platform);
}
package com.bangcle.repository;

import com.bangcle.entity.ConfigureBaseList;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public interface ConfigureBaseListRepository extends BaseRepository<ConfigureBaseList, Integer> {

}
package com.bangcle.repository;

import com.bangcle.entity.ConfigureDevListInstruction;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public interface ConfigureDevListInstructionRepo extends BaseRepository<ConfigureDevListInstruction, Integer> {
  List<ConfigureDevListInstruction> findByAgentId(Integer agentId);
}
package com.bangcle.repository;

import com.bangcle.entity.ConfigureDevList;
import java.util.List;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public interface ConfigureDevListRepository extends  BaseRepository<ConfigureDevList, Integer>{

  /**
   * 判断唯一条件是否已经被添加了.
   * */
  @Query(value = "SELECT COUNT(*) FROM bangcle_conf_plot_dev_list c WHERE int_agent_id = :agentId AND str_type = :type AND str_value = :value AND int_is_deleted = 0", nativeQuery = true)
  public long countUnique(@Param("agentId") Integer agentId, @Param("type") String type , @Param("value") String value);

  @Query(value = "SELECT * FROM bangcle_conf_plot_dev_list WHERE int_agent_id = :agentId AND str_type = :type AND str_value= :value AND int_is_deleted = 0 AND int_white_or_black = :isBlackOrWhite ORDER BY id ASC", nativeQuery = true)
  public List<ConfigureDevList> search(@Param("agentId") Integer agentId, @Param("type") String type , @Param("value")  String value, @Param("isBlackOrWhite") Integer isBlackOrWhite);

  @Query(value = "SELECT * FROM bangcle_conf_plot_dev_list  WHERE int_agent_id = :agentId AND int_is_deleted = 0 AND int_white_or_black = :isBlackOrWhite ORDER BY id ASC", nativeQuery = true)
  public List<ConfigureDevList> search(@Param("agentId") Integer agentId, @Param("isBlackOrWhite") Integer isBlackOrWhite);

  @Query(value = "SELECT * FROM bangcle_conf_plot_dev_list  WHERE int_agent_id = :agentId AND str_type = :type AND str_value= :value AND int_is_deleted = 0", nativeQuery = true)
  public List<ConfigureDevList> search(@Param("agentId") Integer agentId, @Param("type") String type , @Param("value")  String value);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_dev_list SET int_status = :status WHERE id IN (:ids) AND int_agent_id = :agentId", nativeQuery = true)
  public void updateStatus(@Param("agentId") Integer agentId, @Param("ids") List<Integer> ids, @Param("status") int status);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_dev_list SET int_is_deleted = 1 WHERE int_agent_id = :agentId AND id IN (:ids)", nativeQuery = true)
  public void deleteInIds(@Param("agentId") Integer agentId, @Param("ids") List<Integer> ids);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_dev_list SET str_option = :option, str_option_value = :optionValue WHERE id = :id AND int_agent_id = :agentId", nativeQuery = true)
  public void updateRule(@Param("agentId") Integer agentId, @Param("id") Integer id, @Param("option") String option, @Param("optionValue") String optionValue);

}
package com.bangcle.repository;

import com.bangcle.entity.ConfigureEmulatorList;
import java.util.List;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public interface ConfigureEmulatorListRepository extends
    BaseRepository<ConfigureEmulatorList, Integer> {

  List<ConfigureEmulatorList> findByAgentId(Integer agentId);

  List<ConfigureEmulatorList> findByAgentIdOrderByIdAsc(Integer agentId);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_emulator_list SET int_status = :status WHERE id = :id AND int_agent_id = :agentId", nativeQuery = true)
  public void updateStatus(@Param("agentId") Integer agentId, @Param("id") Integer id, @Param("status") int status);

}
package com.bangcle.repository;

import com.bangcle.entity.ConfigureInjectList;
import java.util.List;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public interface ConfigureInjectListRepository extends
    BaseRepository<ConfigureInjectList, Integer> {

  List<ConfigureInjectList> findByAgentIdAndNameAndFeature(Integer agentId, String name,
      String feature);

  List<ConfigureInjectList> findByAgentIdAndWhiteOBlackOrderByIdDesc(Integer agentId,
      Integer whiteOrBlack); // OrderByIdDesc

  List<ConfigureInjectList> findByAgentIdAndWhiteOBlackAndIsDeletedOrderByIdDesc(Integer agentId,
      Integer whiteOrBlack, Integer isDeleted);

  @Query(value = "SELECT COUNT(*) FROM bangcle_conf_plot_inject_list c WHERE int_agent_id = :agentId AND str_feature = :feature AND int_is_deleted = 0", nativeQuery = true)
  public long countUnique(@Param("agentId") Integer agentId, @Param("feature") String feature);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_inject_list SET int_status = :status WHERE id IN (:ids) AND int_agent_id = :agentId", nativeQuery = true)
  public void updateStatus(@Param("agentId") Integer agentId, @Param("ids") List<Integer> ids, @Param("status") int status);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_inject_list SET int_is_deleted = 1 WHERE int_agent_id = :agentId AND id IN (:ids)", nativeQuery = true)
  public void deleteInIds(@Param("agentId") Integer agentId, @Param("ids") List<Integer> ids);
}
package com.bangcle.repository;

import com.bangcle.entity.DataStrategy;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

@Transactional
public interface DataStrategyRepository extends BaseRepository<DataStrategy, Integer>{

  @Query(value = "SELECT * FROM bangcle_conf_plot_data_strategy WHERE app_id=:appId", nativeQuery = true)
  List<DataStrategy> findByAppId(@Param("appId") String appId);
}
package com.bangcle.repository;

import com.bangcle.entity.DylibConfig;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/2/7.
 */
public interface DylibConfigRepository extends BaseRepository<DylibConfig, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_dylib WHERE agent_id=:agentId and del_flag=0 order by create_time desc ", nativeQuery = true)
  List<DylibConfig> findByAgentId(@Param("agentId") Integer agentId);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_dylib set status = :status WHERE id in (:ids) and agent_id=:agentId", nativeQuery = true)
  int updateOnOff(@Param("agentId") Integer agentId, @Param("status") Integer status,
      @Param("ids") Integer[] ids);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_dylib set del_flag = 1 WHERE id in (:ids) and agent_id=:agentId", nativeQuery = true)
  int updateDel(@Param("agentId") Integer agentId, @Param("ids") Integer[] ids);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_dylib WHERE agent_id=:agentId and del_flag=0 and dylib_name=:dylibName and function_name=:functionName", nativeQuery = true)
  DylibConfig checkOnly(@Param("agentId") Integer agentId, @Param("dylibName") String dylibName,
      @Param("functionName") String functionName);


}
package com.bangcle.repository;

import com.bangcle.entity.EnvDescription;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/1/31.
 */
@Transactional
public interface EnvDescriptionRepository extends BaseRepository<EnvDescription, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_env_description WHERE data_type=:data_type", nativeQuery = true)
  EnvDescription findByDataType(@Param("data_type") String dataType);


  /*@Transactional
  @Modifying
  @Query(value = "truncate env_description", nativeQuery = true)
  void truncateTable();*/

}
package com.bangcle.repository;

import com.bangcle.util.ParaUtils;
import com.google.common.base.Splitter;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;
import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;
import org.elasticsearch.action.bulk.BackoffPolicy;
import org.elasticsearch.action.bulk.BulkProcessor;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.cluster.health.ClusterHealthStatus;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.collect.MapBuilder;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.ByteSizeUnit;
import org.elasticsearch.common.unit.ByteSizeValue;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 上午10:32 17-10-24.
 */
@Repository
@Slf4j
public class EsRepository {
  public static TransportClient client = null;
  public static BulkProcessor bulkProcessor = null;
  @Value("${es.strClusterName}")
  private String strClusterName;
  public static String strType = "bangcle_type";
  @Value("${es.strTransportHostNames}")
  private String strTransportHostNames;
  private Splitter splitter = Splitter.on(",").trimResults();
  /**
   * build es client.
   */
  public void buildClient() throws Exception {
    if(client!=null){
      client.close();
    }
    log.info("init settings");
    Settings settings = Settings.builder()
        .put("cluster.name", strClusterName)
        .put("client.transport.sniff", false)//5.4.0版本设置为false，不然会告警，不知道为啥
        .build();
    log.info("init clinet");
    Iterable<String> itTransportHostName = splitter.split(strTransportHostNames);
    client = new PreBuiltTransportClient(settings);
    log.info("init InetSocketTransportAddress");
    for (String strTransportHostName : itTransportHostName) {
      log.info("init host: {}", strTransportHostName);
      client.addTransportAddress(
          new TransportAddress(InetAddress.getByName(strTransportHostName), 9300));
    }
  }
  /**
   * build bulk processor.
   */
  public void buildBulkProcessor() throws Exception {
    if(bulkProcessor!=null){
      bulkProcessor.close();
    }
    bulkProcessor = BulkProcessor.builder(client, new BulkProcessor.Listener() {
      @Override
      public void beforeBulk(long executionId, BulkRequest request) {
      }
      @Override
      public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
      }
      @Override
      public void afterBulk(long executionId, BulkRequest request, Throwable failure) {
      }
    }).setBulkActions(1000)
        .setBulkSize(new ByteSizeValue(5, ByteSizeUnit.MB))
        .setFlushInterval(TimeValue.timeValueSeconds(10))
        .setConcurrentRequests(3)
        .setBackoffPolicy(
            BackoffPolicy.exponentialBackoff(TimeValue.timeValueMillis(100), 3))
        .build();
  }
  /**
   * close es client.
   */
  public void closeClient() {
    if (client != null) {
      client.close();
    }
  }
  /**
   * close bulk processor.
   */
  public void closeBulkProcessor() {
    if (bulkProcessor != null) {
      bulkProcessor.close();
    }
  }
  /**
   * delete template.
   */
  public void deleteTemplate(String strTemplateName) {
    client.admin().indices().prepareDeleteTemplate(strTemplateName).get();
  }
  /**
   * put template.
   */
  public void putTemplate() {
    try {
      Map<String, Object> settings = new MapBuilder<String, Object>()
          .put("number_of_shards", 1)
          .put("number_of_replicas", 0)
          .put("refresh_interval", "10s")
          .map();
      Map<String, Object> mapping = new HashMap<String, Object>();
      mapping.put("_all", new MapBuilder<String, Object>().put("enabled", false).map());
      mapping.put("numeric_detection", false);
      mapping.put("dynamic_templates",
          new Object[]{
              new MapBuilder<String, Object>().put("date_tpl",
                  new MapBuilder<String, Object>().put("match", "dt*")
                      .put("mapping",
                          new MapBuilder<String, Object>().put("type", "date")
                              .map())
                      .map())
                  .map(),
              new MapBuilder<String, Object>().put("geo_point_tpl",
                  new MapBuilder<String, Object>().put("match", "geop*")
                      .put("mapping",
                          new MapBuilder<String, Object>().put("type", "geo_point")
                              .map())
                      .map())
                  .map(),
              new MapBuilder<String, Object>().put("ip_tpl",
                  new MapBuilder<String, Object>().put("match", "ip*")
                      .put("mapping",
                          new MapBuilder<String, Object>().put("type", "ip")
                              .map())
                      .map())
                  .map(),
              new MapBuilder<String, Object>().put("obj_tpl",
                  new MapBuilder<String, Object>().put("match", "obj*")
                      .put("mapping",
                          new MapBuilder<String, Object>().put("type", "object")
                              .map())
                      .map())
                  .map(),
              new MapBuilder<String, Object>().put("all_tpl",
                  new MapBuilder<String, Object>().put("match", "*").put("mapping",
                      new MapBuilder<String, Object>().put("type", "keyword")
                          .map())
                      .map())
                  .map()});
      client.admin().indices().preparePutTemplate("template_bangcle")
          .setPatterns(Collections.singletonList("bangcle_*"))
          .setSettings(settings)
          .setOrder(0)
          .addMapping("_default_", mapping)
          .get();
    } catch (Exception e) {
      log.error("", e);
    }
  }

  /**
   * check index exist.
   */
  public boolean exists(String strIndex) {
    IndicesExistsRequest request = new IndicesExistsRequest(strIndex);
    IndicesExistsResponse response = client.admin().indices().exists(request).actionGet();
    if (response.isExists()) {
      return true;
    }
    return false;
  }


  //判断index是否存在
  public String[] washIndex(List<String> listIndexInput) {
    List<String> listIndexOutput = new ArrayList<String>();
    for (String strIndex : listIndexInput) {
      try {
        if(exists(strIndex)){
          listIndexOutput.add(strIndex);
        }
      } catch (Exception e) {
        log.error("", e);
      }
    }
    return listIndexOutput.toArray(new String[]{});
  }

  /**
   * 计算时段内的index后缀
   */
  public List<String> getIndexs(String strPrefix, Long startTime, Long endTime,
      String formatter) {
    strPrefix = strPrefix.replace("*", "");
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(formatter);
    Date startData = new Date(startTime);
    Date endDate = new Date(endTime);
    Calendar calendar = new GregorianCalendar();
    calendar.setTime(startData);
    List<String> listOut = new ArrayList<String>();
    while (calendar.getTime().before(endDate)) {
      listOut.add(strPrefix + simpleDateFormat.format(calendar.getTime()));
      calendar.add(Calendar.DATE, 1);
    }
    listOut.add(strPrefix + simpleDateFormat.format(endDate));
    if (strPrefix.contains("dev")){
      listOut.add(strPrefix);
    }
    return listOut;
  }


  /**
   * delete index.
   */
  public void delete(String strIndex) {
    if (exists(strIndex)) {
      client.admin().indices().prepareDelete(strIndex).get();
    }
  }
  /**
   * create index.
   */
  public void create(String strIndex, int numShards, int numReplicas) {
    client.admin().indices().prepareCreate(strIndex)
        .setSettings(Settings.builder()
            .put("index.number_of_shards", numShards)
            .put("index.number_of_replicas", numReplicas)
            .put("index.refresh_interval", "10s")
        ).get();
  }
  /**
   * update mapping.
   */
  public void putMapping(String strIndex, String strMapping) {
    try {
      client.admin().indices().preparePutMapping(strIndex)
          .setType(strType)
          .setSource(strMapping, XContentType.JSON)
          .get();
    } catch (Exception e) {
      log.error("", e);
    }
  }
  /**
   * init client and bulk processor.
   */
  private void esInit() {
    log.info("es client err, recontent");
    try {
      buildClient();
      buildBulkProcessor();
    } catch (Exception e) {
      log.error("", e);
    }
  }
  /**
   * client keep alive.
   */
  public void keepAlive() {
    new Thread() {
      @Override
      public void run() {
        while (true) {
          if (client == null) {
            esInit();
          }
          try {
            List<DiscoveryNode> nodes = client.connectedNodes();
            if (nodes.isEmpty()) {
              log.info("No nodes available. Verify ES is running!");
              ParaUtils.ES_STATUS_GREEN = false;
              Thread.sleep(1000*10);
              continue;
            } else {
              //log.info("connected to nodes: " + nodes.toString());
              ClusterHealthResponse healths = client.admin().cluster().prepareHealth().get();
              ClusterHealthStatus status = healths.getStatus();
              if ("GREEN".equals(status.name())) {
                if (!ParaUtils.ES_STATUS_GREEN) {
                  ParaUtils.ES_STATUS_GREEN = true;
                }
              } else {
                log.info("es status:{}", status.name());
                if (ParaUtils.ES_STATUS_GREEN) {
                  ParaUtils.ES_STATUS_GREEN = false;
                }
              }
            }
          } catch (Exception e) {
            log.error("es status err", e);
            if (ParaUtils.ES_STATUS_GREEN) {
              ParaUtils.ES_STATUS_GREEN = false;
            }
            esInit();
          }
          try {
            Thread.sleep(1000 * 3);
          } catch (Exception e) {
            log.error("", e);
          }
        }
      }
    }.start();
  }
}
package com.bangcle.repository;

import com.bangcle.util.LoginUtil;
import com.bangcle.util.PubString;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.util.Bytes;
import org.springframework.stereotype.Repository;

/**
 * Created by zhusiwei on 2018/4/3.
 */
@Slf4j
@Repository
public class HbaseRepository {

  public Configuration conf = null;
  @Getter
  public Connection connection = null;
  private final String ZOOKEEPER_DEFAULT_SERVER_PRINCIPAL = "zookeeper/hadoop";
  private final String ZOOKEEPER_DEFAULT_LOGIN_CONTEXT_NAME = "Client";

  public void init(){
    initConf();
    initConnection();
  }
  private void initConf() {
    conf = new Configuration();
    String filePath = System.getProperty("user.dir") + File.separator + "config" + File.separator;
    log.info("filePath = {}", filePath);
    //共有配置
    conf.addResource(new Path(filePath + "core-site.xml"));
    //hbase配置
    conf.addResource(new Path(filePath + "hbase-site.xml"));
    if ("kerberos".equalsIgnoreCase(conf.get("hadoop.security.authentication"))) {
      String PATH_TO_KEYTAB = filePath + "user.keytab";
      String PATH_TO_KRB5_CONF = filePath + "krb5.conf";
      try {
        //--------设置 kafka 认证开始 add by zhangd 20180108-----------
        /**
         * 这里有一个大坑，kafka的认证必须在hdfs认证前，否则会报错！华为，你个坑货！！！
         */
        LoginUtil.setJaasFile(PubString.PRNCIPAL_NAME, PATH_TO_KEYTAB);
        //--------kafka结束-----------
        LoginUtil.setJaasConf(ZOOKEEPER_DEFAULT_LOGIN_CONTEXT_NAME, PubString.PRNCIPAL_NAME,
            PATH_TO_KEYTAB);
        LoginUtil.setZookeeperServerPrincipal(ZOOKEEPER_DEFAULT_SERVER_PRINCIPAL);
        LoginUtil.login(PubString.PRNCIPAL_NAME, PATH_TO_KEYTAB, PATH_TO_KRB5_CONF, conf);
      } catch (IOException e) {
        log.error("initConfig fail", e);
      }
    }
  }

  private void initConnection(){
    try {
      connection = ConnectionFactory.createConnection(conf);
      log.info("connection = {}",connection);
    } catch (IOException e) {
      log.error("error",e);
    }
  }

  public void closeConnection(){
    if(connection!=null&&!connection.isClosed()){
      try {
        connection.close();
      } catch (IOException e) {
        log.error("error",e);
      }
    }
  }

  public HashMap<String,String> getHbaseData(String rowKey, String familyName, Table table) {
    HashMap info = new HashMap();
    try {
      Get get = new Get(Bytes.toBytes(rowKey));
      get.addFamily(Bytes.toBytes(familyName)); // 获取指定列族和列修饰符对应的列
      Result result = table.get(get);
      if (result.isEmpty()) {
        return info;
      } else {
        List<Cell> cells = result.listCells();
        for(Cell cell:cells){
          info.put(Bytes.toString(cell.getQualifier()),Bytes.toString(cell.getValue()));
        }
      }
    } catch (Exception e) {
      log.error("error", e);
    }
    return info;
  }


}
package com.bangcle.repository;

import com.bangcle.entity.App;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Query;

@Transactional
public interface LicenseRepository extends BaseRepository<App, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_apps WHERE id = ?1", nativeQuery = true)
  App findById(Integer app_id);
}
package com.bangcle.repository;

import com.bangcle.entity.ProtectStrategy;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

@Transactional
public interface ProtectStrategyRepository extends BaseRepository<ProtectStrategy,Integer>{

  @Override
  List<ProtectStrategy> findAll();

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_protect_strategy WHERE app_id=:appId ORDER BY id ASC ", nativeQuery = true)
  List<ProtectStrategy> findByAppId(@Param("appId") String appId);

}
package com.bangcle.repository;

import com.bangcle.entity.ReportSubTaskManage;
import java.util.Date;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午7:56 18-4-4.
 */
@Transactional
public interface ReportSubtaskManageRepository extends
    BaseRepository<ReportSubTaskManage, Integer> {

  ReportSubTaskManage findById(Integer id);

  @Query(value = "SELECT min(a.strEndTime) FROM ReportSubTaskManage a WHERE a.numTaskId=:numTaskId AND a.numStatus=:numStatus AND a.strEndTime>:strEndTime")
  String findByTaskIdAndStatusAndEndTime(@Param("numTaskId") Integer numTaskId, @Param("numStatus") Integer numStatus, @Param("strEndTime") String strEndTime);

  @Query(value = "SELECT count(*) FROM ReportSubTaskManage a WHERE a.numTaskId=:numTaskId AND a.numStatus=:numStatus")
  int findByTaskIdAndStatus(@Param("numTaskId") Integer numTaskId, @Param("numStatus") Integer numStatus);

  @Modifying
  @Query(value = "DELETE FROM bangcle_report_sub_management WHERE num_task_id=:numId", nativeQuery = true)
  int deleteByTaskId(@Param("numId") Integer numId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_report_sub_management WHERE"
      + " num_status=:numStatus", nativeQuery = true)
  List<ReportSubTaskManage> findByNumStatus(@Param("numStatus") Integer numStatus);

  @Transactional
  @Query(value = "SELECT a FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
      + " a.dateCreatedAt>:dateBeginTime AND a.dateCreatedAt<:dateEndTime AND num_status=:numStatus ORDER BY a.dateCreatedAt DESC",
      countQuery = "SELECT count(*) FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
          + " a.dateCreatedAt>:dateBeginTime AND a.dateCreatedAt<:dateEndTime AND num_status=:numStatus")
  Page<ReportSubTaskManage> findByTimeAndAgentId(@Param("numAgentId") Integer numAgentId,
      @Param("dateBeginTime") Date dateBeginTime, @Param("dateEndTime") Date dateEndTime,
      @Param("numStatus") Integer numStatus, Pageable pageable);

  @Transactional
  @Query(value = "SELECT count(*) FROM bangcle_report_sub_management WHERE"
      + " num_agent_id=:numAgentId AND"
      + " date_created_at>:dateBeginTime AND date_created_at<:dateEndTime AND num_status=:numStatus", nativeQuery = true)
  int findByTimeAndAgentId(@Param("numAgentId") Integer numAgentId,
      @Param("dateBeginTime") Date dateBeginTime, @Param("dateEndTime") Date dateEndTime, @Param("numStatus") Integer numStatus);

  @Transactional
  @Query(value = "SELECT a FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
      + " a.numTaskId=:numTaskId AND a.dateCreatedAt>:dateBeginTime AND"
      + " a.dateCreatedAt<:dateEndTime AND num_status=:numStatus ORDER BY a.dateCreatedAt DESC",
      countQuery = "SELECT count(*) FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
          + " a.numTaskId=:numTaskId AND a.dateCreatedAt>:dateBeginTime AND"
          + " a.dateCreatedAt<:dateEndTime AND num_status=:numStatus")
  Page<ReportSubTaskManage> findByTimeAndAgentIdAndTaskName(@Param("numAgentId") Integer numAgentId,
      @Param("numTaskId") Integer numTaskId,
      @Param("dateBeginTime") Date dateBeginTime, @Param("dateEndTime") Date dateEndTime, @Param("numStatus") Integer numStatus,
      Pageable pageable);

  @Transactional
  @Query(value = "SELECT count(*) FROM bangcle_report_sub_management WHERE"
      + " num_agent_id=:numAgentId AND"
      + " num_task_id=:numTaskId AND date_created_at>:dateBeginTime AND"
      + " date_created_at<:dateEndTime AND num_status=:numStatus", nativeQuery = true)
  int findByTimeAndAgentIdAndTaskName(@Param("numAgentId") Integer numAgentId,
      @Param("numTaskId") Integer numTaskId,
      @Param("dateBeginTime") Date dateBeginTime, @Param("dateEndTime") Date dateEndTime, @Param("numStatus") Integer numStatus);

  @Transactional
  @Query(value = "SELECT a FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND num_status=:numStatus"
      + " ORDER BY a.dateCreatedAt DESC",
      countQuery = "SELECT count(*) FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND num_status=:numStatus")
  Page<ReportSubTaskManage> findByAgentId(@Param("numAgentId") Integer numAgentId, @Param("numStatus") Integer numStatus,
      Pageable pageable);

  @Transactional
  @Query(value = "SELECT count(*) FROM bangcle_report_sub_management WHERE"
      + " num_agent_id=:numAgentId AND num_status=:numStatus", nativeQuery = true)
  int findByAgentId(@Param("numAgentId") Integer numAgentId, @Param("numStatus") Integer numStatus);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_report_sub_management WHERE"
      + " num_agent_id=:numAgentId", nativeQuery = true)
  List<ReportSubTaskManage> findByAppId(@Param("numAgentId") Integer numAgentId);

  @Transactional
  @Query(value = "SELECT a FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
      + " a.numTaskId=:numTaskId AND num_status=:numStatus ORDER BY a.dateCreatedAt DESC",
      countQuery = "SELECT count(*) FROM ReportSubTaskManage a WHERE a.numAgentId=:numAgentId AND"
          + " a.numTaskId=:numTaskId AND num_status=:numStatus")
  Page<ReportSubTaskManage> findByAgentIdAndTaskName(@Param("numAgentId") Integer numAgentId,
      @Param("numTaskId") Integer numTaskId, @Param("numStatus") Integer numStatus, Pageable pageable);

  @Transactional
  @Query(value = "SELECT count(*) FROM bangcle_report_sub_management WHERE"
      + " num_agent_id=:numAgentId AND num_task_id=:numTaskId AND num_status=:numStatus", nativeQuery = true)
  int findByAgentIdAndTaskName(@Param("numAgentId") Integer numAgentId,
      @Param("numTaskId") Integer numTaskId, @Param("numStatus") Integer numStatus);

  @Query(value = "SELECT * FROM bangcle_report_sub_management WHERE num_task_id=:numTaskId"
      + " AND str_begin_time=:dateBeginTime AND str_end_time=:dateEndTime", nativeQuery = true)
  List<ReportSubTaskManage> findByTaskIdAndTime(@Param("numTaskId") Integer numTaskId,
      @Param("dateBeginTime") String dateBeginTime, @Param("dateEndTime") String dateEndTime);

  @Query(value = "select * from bangcle_report_sub_management where num_task_id in (select id from bangcle_report_task_management where num_status = 1) "
      + "and str_end_time <:new_date and num_status in (:subTaskIds)", nativeQuery = true)
  List<ReportSubTaskManage> findSubTaskId(@Param("new_date") String newDate,
      @Param("subTaskIds") Integer[] subTaskIds);

}
package com.bangcle.repository;

import com.bangcle.entity.ReportTaskManage;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午12:25 18-3-14.
 */
@Transactional
public interface ReportTaskManageRepository extends JpaSpecificationExecutor<ReportTaskManage>,
    BaseRepository<ReportTaskManage, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_report_task_management where str_task_name=:strTaskName"
      + " AND num_agent_id=:numAgentId", nativeQuery = true)
  ReportTaskManage findByTaskNameAndAgentId(@Param("strTaskName") String strTaskName,
      @Param("numAgentId") Integer numAgentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_report_task_management WHERE"
      + " num_status=:numStatus", nativeQuery = true)
  List<ReportTaskManage> findByStatus(@Param("numStatus") Integer numStatus);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_report_task_management where id=:numId"
      + " AND num_agent_id=:numAgentId", nativeQuery = true)
  int deleteByIdAndAgentId(@Param("numId") Integer numId, @Param("numAgentId") Integer numAgentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_report_task_management where id=:numId"
      + " AND num_agent_id=:numAgentId", nativeQuery = true)
  ReportTaskManage findByIdAndAgentId(@Param("numId") Integer numId,
      @Param("numAgentId") Integer numAgentId);

  /*@Transactional
  @Query(value = "SELECT * FROM bangcle_report_task_management where"
      + " num_agent_id=:numAgentId", nativeQuery = true)
  Page<ReportTaskManage> findByAgentId(@Param("numAgentId")
   Integer numAgentId, Pageable pageable);*/

  @Transactional
  @Query(value = "SELECT a FROM ReportTaskManage a where"
      + " a.numAgentId=:numAgentId ORDER BY id DESC",
      countQuery = "SELECT count(*) FROM ReportTaskManage a"
          + " WHERE a.numAgentId=:numAgentId")
  Page<ReportTaskManage> findByAgentId(@Param("numAgentId") Integer numAgentId, Pageable pageable);

  @Transactional
  @Query(value = "SELECT count(*) FROM bangcle_report_task_management"
      + " where num_agent_id=:numAgentId", nativeQuery = true)
  int findTotalByAgentId(@Param("numAgentId") Integer numAgentId);

  ReportTaskManage findById(Integer numId);
}
package com.bangcle.repository;

import com.bangcle.entity.App;
import com.bangcle.entity.RiskApp;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Transactional
public interface RiskAppDefRepository extends BaseRepository<RiskApp, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_riskapp WHERE app_id=:appId and del_flag=0 order by create_time desc ", nativeQuery = true)
  List<RiskApp> findByAppId(@Param("appId") Integer appId);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_riskapp set on_off = :onOff WHERE risk_app_id in (:riskAppIds) and app_id=:appId", nativeQuery = true)
  int updateOnOff(@Param("appId") Integer appId, @Param("onOff") Integer onOff,
      @Param("riskAppIds") Integer[] riskAppIds);

  @Transactional
  @Modifying
  @Query(value = "update bangcle_conf_plot_riskapp set del_flag = 1 WHERE risk_app_id in (:riskAppIds) and app_id=:appId", nativeQuery = true)
  int updateDel(@Param("appId") Integer appId, @Param("riskAppIds") Integer[] riskAppIds);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_riskapp WHERE app_id=:appId and del_flag=0 and app_md5=:appMd5 and package_name=:pkgName and platform=:platform", nativeQuery = true)
  RiskApp checkOnly(@Param("appId") Integer appId, @Param("appMd5") String appMd5,
      @Param("pkgName") String pkgName, @Param("platform") String platform);
}
package com.bangcle.repository;

import com.bangcle.entity.SafeEvent;
import java.util.Date;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:45 17-12-28.
 */
@Transactional
public interface SafeEventRepository extends BaseRepository<SafeEvent,Integer>{

  @Override
  List<SafeEvent> findAll();

  SafeEvent findByName(String strEventName);

  SafeEvent findById(Integer eventId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_safe_event WHERE agent_id=:agentId ORDER BY num_level ASC", nativeQuery = true)
  List<SafeEvent> findByAgentId(@Param("agentId") Integer agentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_safe_event WHERE agent_id=:agentId AND name=:strEventName", nativeQuery = true)
  SafeEvent findByAgentIdAndName(@Param("agentId") Integer agentId, @Param("strEventName") String strEventName);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_safe_event SET name=:strEventName,description=:strDescrip,update_at=:updateAt,content=:strContent WHERE id=:numEventId", nativeQuery = true)
  void updateById(@Param("strEventName") String strEventName, @Param("strDescrip") String strDescrip, @Param("updateAt")
      Date updateAt, @Param("strContent") String strContent, @Param("numEventId") Integer numEventId);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_safe_event SET status=:numStatus WHERE id=:numEventId", nativeQuery = true)
  void updateStatusById(@Param("numStatus") Integer numStatus, @Param("numEventId") Integer numEventId);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_safe_event WHERE id=:eventId", nativeQuery = true)
  void deleteById(@Param("eventId") Integer eventId);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_safe_event SET num_level=:numLevel WHERE id=:numEventId", nativeQuery = true)
  void updateLevelById(@Param("numLevel") Integer numLevel, @Param("numEventId") Integer numEventId);
}
package com.bangcle.repository;

import com.bangcle.entity.SoLibrary;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * 策略配置-威胁自定义-注入攻击-系统SO库函数防Hook定义-函数所在SO库 持久化
 */
@Transactional
public interface SoLibraryRepository extends
    BaseRepository<SoLibrary, Integer> {

  //@Override
  //SoLibrary save(SoLibrary soLibrary);


  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_so_library WHERE agent_id=:agentId", nativeQuery = true)
  List<SoLibrary> findByAgentId(@Param("agentId") Integer agentId);

}
package com.bangcle.repository;

import com.bangcle.entity.SystemSoConfig;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * 策略配置-威胁自定义-注入攻击-系统SO库函数防Hook定义 持久化
 */
@Transactional
public interface SystemSoConfigRepository extends
    BaseRepository<SystemSoConfig, Integer> {

  @Override
  SystemSoConfig save(SystemSoConfig systemSoConfig);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_plot_system_so WHERE id=:id", nativeQuery = true)
  int deleteById(@Param("id") Integer id);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_system_so WHERE agent_id=:agentId AND status!=:status ORDER BY created_at DESC", nativeQuery = true)
  List<SystemSoConfig> findByAgentId(@Param("agentId") Integer agentId,
      @Param("status") Integer status);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_system_so SET status=:status WHERE id IN (:ids) AND agent_id=:agentId", nativeQuery = true)
  int updateById(@Param("status") Integer status, @Param("ids") Integer[] ids,
      @Param("agentId") Integer agentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_system_so WHERE agent_id=:agentId AND function_name=:functionName AND system_os=:systemSoName", nativeQuery = true)
  List<SystemSoConfig> findByFunctionNameAndSystemOs(@Param("agentId") Integer agentId,
      @Param("functionName") String functionName, @Param("systemSoName") String systemSoName);

}
package com.bangcle.repository;

import com.bangcle.entity.ThreatDescription;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * Created by zhusiwei on 2018/1/31.
 */
@Transactional
public interface ThreatDescriptionRepository extends BaseRepository<ThreatDescription, String> {

  @Transactional
  @Query(value = "SELECT * FROM bangcle_threat_description WHERE data_type=:data_type", nativeQuery = true)
  ThreatDescription findByDataType(@Param("data_type") String dataType);

  /*@Transactional
  @Modifying
  @Query(value = "truncate threat_description", nativeQuery = true)
  void truncateTable();*/
}
package com.bangcle.repository;

import com.bangcle.entity.CheatHostConfig;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午9:18 18-2-8.
 */
@Transactional
public interface ThreatHostFraudConfigRepository extends BaseRepository<CheatHostConfig, Integer>{

  @Override
  CheatHostConfig save(CheatHostConfig cheatHostConfig);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheat_host WHERE num_agent_id=:agentId", nativeQuery = true)
  List<CheatHostConfig> findByAgentId(@Param("agentId") Integer agentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheat_host WHERE str_host=:strHost AND num_agent_id=:agentId", nativeQuery = true)
  CheatHostConfig findByHostAndAgentId(@Param("strHost") String strHost, @Param("agentId") Integer agentId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheat_host WHERE str_ip=:strIp AND num_agent_id=:agentId", nativeQuery = true)
  CheatHostConfig findByIpAndAgentId(@Param("strIp") String strIp, @Param("agentId") Integer agentId);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_plot_cheat_host WHERE id in (:ids) AND num_agent_id=:agentId", nativeQuery = true)
  int deleteByIds(@Param("ids") Integer[] ids, @Param("agentId") Integer agentId);
}
package com.bangcle.repository;

import com.bangcle.entity.CheatAddrConfig;
import java.util.Date;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * 策略配置-威胁自定义-位置欺诈 持久化类
 *
 * add by zhangd 2018-01-16
 */
@Transactional
public interface ThreatLocationFraudConfigRepository extends
    BaseRepository<CheatAddrConfig, Integer> {


  @Override
  CheatAddrConfig save(CheatAddrConfig cheatAddrConfig);

  CheatAddrConfig findById(Integer id);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_plot_cheat_addr WHERE id=:id", nativeQuery = true)
  void deleteById(@Param("id") Integer id);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_cheat_addr WHERE agent_id=:agentId", nativeQuery = true)
  CheatAddrConfig findByAgentId(@Param("agentId") Integer agentId);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_cheat_addr SET address_offset=:addressOffset,detection_cycle=:detectionCycle,updated_at=:updatedAt WHERE id=:id AND agent_id=:agentId", nativeQuery = true)
  int updateById(@Param("addressOffset") Integer addressOffset,
      @Param("detectionCycle") Integer detectionCycle,
      @Param("updatedAt") Date updatedAt, @Param("id") Integer id, @Param("agentId") Integer agentId);

}
package com.bangcle.repository;

import com.bangcle.entity.User;
import java.util.Date;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * author email: xiang1.li@secneo.com version time: 2017年8月9日上午10:15:56.
 */
@Transactional
public interface UserRepository extends BaseRepository<User, Integer> {

  User findByEmail(String email);

  User findByName(String name);

  User findById(Integer userId);

  @Override
  List<User> findAll();

  List<User> findByCorpName(String corpName);

  User findByMsspName(String msspName);

  @Query(value = "SELECT * FROM bangcle_users WHERE role_id =:role_id ORDER BY id ASC", nativeQuery = true)
  List<User> findAdminList(@Param("role_id") Integer roleId);

  @Query(value = "SELECT * FROM bangcle_users WHERE role_id = 1 ORDER BY id ASC", nativeQuery = true)
  List<User> findAdminList();

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_users WHERE id=:userId", nativeQuery = true)
  void deleteById(@Param("userId") Integer userId);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_users WHERE group_id=:groupId", nativeQuery = true)
  void deleteByGroupId(@Param("groupId") Integer groupId);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_users SET email=:userEmail,name=:userName,encrypted_password=:password,role_id=:roleId,operable_apps=:apps,updated_at=:updateAt WHERE id=:userId", nativeQuery = true)
  void updateById(@Param("userEmail") String userEmail, @Param("userName") String userName,
      @Param("password") String password, @Param("roleId") Integer roleId,
      @Param("apps") String apps, @Param("updateAt")
      Date updateAt, @Param("userId") Integer userId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_users WHERE group_id=:groupId ORDER BY id ASC", nativeQuery = true)
  List<User> findByGroupId(@Param("groupId") Integer groupId);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_users WHERE group_id=:groupId and id!=:groupId ORDER BY id ASC", nativeQuery = true)
  List<User> findByGroupIdNoSlef(@Param("groupId") Integer groupId);
}
package com.bangcle.repository;

import com.bangcle.entity.XposedConfig;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

/**
 * 策略配置-威胁自定义-注入攻击-Xposed Hook定义 持久化
 */
@Transactional
public interface XposedConfigRepository extends
    BaseRepository<XposedConfig, Integer> {

  @Override
  XposedConfig save(XposedConfig xposedConfig);

  @Modifying
  @Transactional
  @Query(value = "DELETE FROM bangcle_conf_plot_xposed WHERE id=:id", nativeQuery = true)
  int deleteById(@Param("id") Integer id);

  @Transactional
  @Query(value = "SELECT * FROM bangcle_conf_plot_xposed WHERE agent_id=:agentId AND status!=:status ORDER BY created_at DESC", nativeQuery = true)
  List<XposedConfig> findByAgentId(@Param("agentId") Integer agentId,@Param("status") Integer status);

  @Modifying
  @Transactional
  @Query(value = "UPDATE bangcle_conf_plot_xposed SET status=:status WHERE id IN (:ids) AND agent_id=:agentId", nativeQuery = true)
  int updateById(@Param("status") Integer status, @Param("ids") Integer[] ids, @Param("agentId") Integer agentId);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:30 17-12-1.
 */
public interface AppInfoService {

  /**
   * 应用列表.
   */
  public JSONObject appSort(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList,
      Long startTime, Long endTime, Long page,
      Long size, String strSortBy);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import org.springframework.stereotype.Service;

@Service
public interface AppService {

  public App findById(Integer appId);

  public JSONObject getAppSummary(String appId, String strSelfMd5);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:29 17-12-1.
 */
public interface AppStatService {

  /**
   * 应用安装设备数Top10.
   */
  public JSONObject appCount(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime);
}

package com.bangcle.service;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 上午10:49 17-10-24.
 */
public interface BaseService {

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * Created by zhusiwei on 2018/1/16.
 */
public interface CheaterAppDefService {

  /**
   * 新增外挂应用定义
   */
  public String addCheaterAppDef(Integer appId, String cheaterName, String cheaterMd5,
      String pkgName, String platform);

  /**
   * 外挂应用定义列表
   */
  public JSONObject cheaterAppList(Integer appId);

  /**
   * 删除外挂应用定义
   */
  public boolean deleteCheaterApp(Integer appId, List<Integer> cheaterAppIds);

  /**
   * 启用／关闭外挂应用定义
   */
  public boolean switchCheaterApp(Integer appId, Integer onOff, List<Integer> cheaterAppIds);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * Created by zhusiwei on 2018/1/16.
 */
public interface CheaterTraitDefService {

  /**
   * 新增外挂特征定义
   */
  public String addCheaterTraitDef(Integer appId, String tagName, String tagTrait,
      String platform);

  /**
   * 外挂特征定义列表
   */
  public JSONObject cheaterTraitList(Integer appId);

  /**
   * 删除外挂特征定义
   */
  public boolean deleteCheaterTrait(Integer appId, List<Integer> traitIds);

  /**
   * 启用／关闭外挂特征定义
   */
  public boolean switchCheaterTrait(Integer appId, Integer onOff, List<Integer> traitIds);

}
package com.bangcle.service.common;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;
import java.util.Map;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;

/**
 * 公共统计接口，统计总数，趋势等共用逻辑.
 */
public interface CommonAggService {

  /**
   * 统计总次数、总设备数目。 result: {"count": 100, "dev_count": 30}
   */
  public JSONObject totalCount(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      boolean oneIndex);

  /**
   * 统计趋势，对于时间跨度大于一天的，统计每天的次数、设备数目, 小于一天的统计每小时的次数、设备数目. result: {"date_list":["2017-12-01",
   * "2017-12-02"], "count_list":[100, 200], "dev_count_list": [50, 90]}
   */
  public JSONObject trendCount(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes);

  /**
   * 根据某个维度，例如位置、设备等统计次数、设备数目. 对于某个维度，值太多的情况，例如udid, 需要topNum; result: [{"field": "北京", "count":
   * 200, "dev_count": 100}, {"field": "上海", "count": 150, "dev_count": 90}]
   */
  public JSONArray statCountByField(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      String fieldName, long topNum, boolean isTotal, boolean oneIndex);

  /**
   * 列表搜索，依靠基本条件，如果有特殊字段条件，把特殊条件封装到json中去. result:{"count": 100,  "data_list": [{}, {}, {}]}
   * 具体字段以es中 _source中的内容为主.
   */
  public JSONObject searchList(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      long page, long perPageNum, JSONArray conditionJsonArray, boolean oneIndex);

  /**
   * 基数聚合，根据传入参数进行去重 计算出非重复的个数 create by zhaoy
   */
  public long cardinalityAggregation(String appId, List<String> listAppVersion,
      List<String> listManufacturer, Long lEndTime, List<String> listLocation,
      List<String> listOsVersion, List<String> listDataTypes, Long lStartTime, String indexName,
      String indexType, String fieldName, String cardinalityName, boolean oneIndex);

  public JSONArray TermsAggByFiled(String appId, List<String> listAppVersion,
      List<String> listDevTypeSelect, Long lEndTime,
      List<String> listLocationSelect, List<String> listOsVersionSelect, Long lStartTime,
      String strFieldName);

  /**
   * 获得最近/远一次的发生时间.
   */
  public Double getTime(String indexName, String indexType, BoolQueryBuilder boolQueryBuilder,
      String fieldName, Boolean max, String matchField, String strValue, Long startTime,
      Long endTime, boolean oneIndex);

  /**
   * description: 崩溃 威胁详情.
   */
  public JSONObject getDevDetail(String indexName, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes, JSONArray conditionJsonArray,
      String strCabField, Boolean max, String strSortBy, String strSortField, Long page, Long size,
      boolean oneIndex);

  /**
   * description: 对list<Map>排序，strSortBy:排序方式，strSortField:排序字段
   */
  public void sortList(List<Map<String, Object>> mapList, String strSortBy, String strSortField);

  /**
   * description:统计次数和某个字段去重以后的数量.
   */
  public JSONObject timeLineList(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, String strCabFiled, String udid, Long startTime,
      Long endTime, boolean oneIndex);

  /**
   * description: 通过id获得一条对应的记录.
   */
  public JSONObject getDataById(List<String> listIds, String appId, String indexName,
      String indexType);

  /**
   * description:获得最近/远发生的那条数据.
   */
  public Map<String, Object> getDetail(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, Map<String, String> mapTerm, Long startTime, Long endTime,
      boolean oneIndex);

  /**
   * 增加term和terms条件方法
   */
  public void filterSearchCondition(JSONArray conditionJsonArray,
      BoolQueryBuilder boolQueryBuilder);
}
package com.bangcle.service.common;

import com.alibaba.fastjson.JSONArray;
import java.util.List;
import java.util.Map;
import org.elasticsearch.index.query.BoolQueryBuilder;

/**
 * 封装基础方法，用于辅助统计部分。
 */
public interface CommonBaseService {

  /**
   * 构造基础的过滤条件.
   */
  public BoolQueryBuilder filterQueryBuilder(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, List<String> dataTypes);

  /**
   * 构造过滤条件.
   */
  public BoolQueryBuilder filterQueryBuilder(Map<String, ? extends Object> filterMap,
      BoolQueryBuilder boolQueryBuilder);

  /**
   * 根据时间，获得活跃、启动的index_name正则形式.
   */
  public String getStartIndexName(long startTime, long endTime);

  /**
   * 获得活跃、启动的index_name正则形式.
   */
  public String getStartIndexName();

  /**
   * 根据时间，获得威胁的index_name正则形式.
   */
  public String getThreatIndexName(long startTime, long endTime);

  /**
   * 获得威胁的index_name正则形式.
   */
  public String getThreatIndexName();


  /**
   * 根据时间，获得环境的index_name正则形式.
   */
  public String getEnvIndexName(long startTime, long endTime);

  /**
   * 获得环境的index_name正则形式.
   */
  public String getEnvIndexName();

  /**
   * 根据时间，获得安全事件的index_name正则形式.
   */
  public String getEventIndexName(long startTime, long endTime);

  /**
   * 获得安全事件的index_name正则形式.
   */
  public String getEventIndexName();

  /**
   * 根据时间，获得崩溃的index_name正则形式.
   */
  public String getCrashIndexName(long startTime, long endTime);

  /**
   * 获得崩溃的index_name正则形式.
   */
  public String getCrashIndexName();

  /**
   * 获得index的type.
   */
  public String getIndexTypeName();

  /**
   * 根据时间，获得app的index_name正则形式.
   */
  public String getAppIndexName(long startTime, long endTime);

  /**
   * 获得app的index_name正则形式.
   */
  public String getAppIndexName();


  /**
   * 根据时间，获得dev的index_name正则形式.
   */
  public String getDevIndexName(long startTime, long endTime);

  /**
   * 获得dev的index_name正则形式.
   */
  public String getDevIndexName();

  /**
   * 获取陀螺仪的index_name正则形式.
   */
  public String getGyroscopeIndexName();
  /**
   * 获取用户绑定的index_name正则形式.
   */
  public String getUserDataIndexName();


  /**
   * 计算比例，举例: 23.23.
   */
  public double getRate(long count, long allCount);

  /**
   * 计算比例，百分比形式，举例: 23.23%
   */
  public String getPercentRateStr(long count, long allCount);

  /**
   * 排序json数组.
   */
  public JSONArray sortJsonArray(JSONArray jsonArray, String fieldName);

  /**
   * 解决传入集合大小为一，且元素末尾为空字符串导致空字符串被过滤掉的情况.
   */
  public List<String> elementTreat(List<String> listOriginal);

  public String modelToManufacturer(String strStatType);

}
package com.bangcle.service.common;

import com.alibaba.fastjson.JSONArray;
import java.util.HashMap;

/**
 * Created by zhusiwei on 2018/4/3.
 */
public interface CommonHbaseService {
  public HashMap<String,HashMap<String,String>> getDevStatus(String[] devTag);
}
package com.bangcle.service.common;

public interface CryptService {
  /**
   * RSA算法解密，通过公钥key.
   * */
  public String decryptByRsaPublicKey(String body, String publicKey);

  /**
   * 解密license，密钥默认写死在代码里，不暴露出来.
   * */
  public String decryptLicenseString(String body);
}
package com.bangcle.service.common.impl;

import static com.bangcle.repository.EsRepository.client;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.max.Max;
import org.elasticsearch.search.aggregations.metrics.max.MaxAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.min.Min;
import org.elasticsearch.search.aggregations.metrics.min.MinAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class CommonAggServiceImpl implements CommonAggService {

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EsRepository es;

  @Override
  public JSONObject totalCount(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      boolean oneIndex) {
    // 过滤条件，相当于where条件.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);
    String udidCardinalityName = "count_distinct_udid";

    // 聚合内容，相当于 select count(*) 这部分.
    // cardinality是唯一聚合，聚合的字段是udid，这统计的是udid去重后的数量，也就是数量.
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(udidCardinalityName).field(EsFieldModel.UDID);

    String[] indexExist = null;
    JSONObject result = new JSONObject();
    long count = 0;
    long devCount = 0;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }

    // 查询结果
    if (indexExist.length > 0) {
      SearchResponse activeSearchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(udidCardinalityAggregationBuilder)
          .execute().actionGet();

      // 获得返回结果.
      Cardinality cardinality = activeSearchResponse.getAggregations().get(udidCardinalityName);
      count = activeSearchResponse.getHits().getTotalHits();
      devCount = cardinality.getValue();
    }
    result.put("count", count);
    result.put("dev_count", devCount);
    return result;
  }

  @Override
  public JSONObject trendCount(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);

    // 统计每天或者每小时的次数和设备数目.
    List<String> dateList = new ArrayList<>();
    boolean sameDay = TimeParse.isSameDay(startTime, endTime);
    String dateHistogramName = "count_every_time";
    String udidCardinalityName = "count_distinct_udid";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME);
    dateList = handleDateCondition(startTime, endTime, sameDay, udidCardinalityName,
        dateHistogramAggregationBuilder);
    log.info("----------- 4 {}", dateList.size());
    JSONObject result = new JSONObject();
    List<String> indexs = es.getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    List<Long> countList = new ArrayList<>();
    List<Long> devCountList = new ArrayList<>();
    if (indexExist.length == 0) {
      for (String str : dateList) {
        countList.add(0L);
        devCountList.add(0L);
      }
    }

    if (indexExist.length > 0) {
      SearchResponse searchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder).addAggregation(dateHistogramAggregationBuilder)
          .execute().actionGet();

      Map<String, Map<String, Long>> countMap = new HashMap<>();
      Histogram histogram1 = searchResponse.getAggregations().get(dateHistogramName);
      for (Histogram.Bucket entry : histogram1.getBuckets()) {
        long count = entry.getDocCount();
        Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
        long devCount = cardinality.getValue();
        String historgramKey = TimeParse.timeSplit(sameDay, entry.getKeyAsString());
        Map<String, Long> tMap = new HashMap<>();
        tMap.put("count", count);
        tMap.put("dev_count", devCount);
        countMap.put(historgramKey, tMap);
      }

      for (String date : dateList) {
        long count = 0L;
        long devCount = 0L;
        if (countMap.containsKey(date)) {
          count = countMap.get(date).get("count");
          devCount = countMap.get(date).get("dev_count");
        }
        countList.add(count);
        devCountList.add(devCount);
      }
    }
    result.put("date_list", dateList);
    result.put("count_list", countList);
    result.put("dev_count_list", devCountList);
    return result;
  }


  @Override
  public JSONArray statCountByField(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      String fieldName, long topNum, boolean isTotal, boolean oneIndex) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);
    JSONArray dataJsonArray = new JSONArray();
    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }

    JSONObject jsonObject = new JSONObject();
    //次数总计
    long longTotal = 0;
    //去重后的数量总计
    long longTotalDev = 0;
    if (indexExist.length > 0) {
      //udid去重
      String udidCardinalityName = "count_distinct_udid";
      String udidCardinalityAll = "all_udid_count";
      CardinalityAggregationBuilder udidCab = AggregationBuilders
          .cardinality(udidCardinalityName).field(EsFieldModel.UDID);

      CardinalityAggregationBuilder udidCabAll = AggregationBuilders
          .cardinality(udidCardinalityAll).field(EsFieldModel.UDID);

      String termsName = "count_by_field";
      // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
      long size = topNum > 0L ? topNum : 1000L;
      long shardSize = size * 3;
      TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(termsName)
          .field(fieldName)
          .shardSize((int) shardSize)
          .size((int) size)
          .order(BucketOrder.count(false))
          .subAggregation(udidCab);

      SearchResponse searchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(termsAggregationBuilder)
          .addAggregation(udidCabAll)
          .execute()
          .actionGet();

      Terms terms = searchResponse.getAggregations().get(termsName);
      SearchHits searchHits = searchResponse.getHits();
      longTotal = searchHits.getTotalHits();
      Cardinality cardinalityAll = searchResponse.getAggregations().get(udidCardinalityAll);
      longTotalDev = cardinalityAll.getValue();

      for (Terms.Bucket entry : terms.getBuckets()) {
        long count = entry.getDocCount();
        Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
        String field = entry.getKeyAsString();
        long devCount = cardinality.getValue();
        JSONObject dataJsonObject = new JSONObject();
        dataJsonObject.put("count", count);
        dataJsonObject.put("dev_count", devCount);
        dataJsonObject.put("field", field);
        dataJsonArray.add(dataJsonObject);
      }
    }
    if (isTotal) {
      jsonObject.put("count", longTotal);
      jsonObject.put("dev_count", longTotalDev);
      jsonObject.put("field", "总计");
      dataJsonArray.add(0, jsonObject);
    }
    return dataJsonArray;
  }

  @Override
  public JSONObject searchList(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes, long page,
      long perPageNum, JSONArray conditionJsonArray, boolean oneIndex) {
    if (page < 1L) {
      page = 1L;
    }
    if (perPageNum < 1L) {
      perPageNum = 20L;
    }

    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }

    if (indexExist.length == 0) {
      JSONObject result = new JSONObject();
      result.put("count", 0);
      result.put("data_list", new JSONArray());
      return result;
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);

    // 处理其他条件
    filterSearchCondition(conditionJsonArray, boolQueryBuilder);

    SearchResponse searchResponse = es.client
        .prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addSort(EsFieldModel.TIME, SortOrder.DESC)
        .setFrom((int) ((page - 1) * perPageNum))
        .setSize((int) perPageNum)
        .execute().actionGet();
    SearchHits searchHits = searchResponse.getHits();
    SearchHit[] hits = searchHits.getHits();
    JSONArray dataListJsonArray = new JSONArray();
    for (int i = 0; i < hits.length; i++) {
      Map<String, Object> map = hits[i].getSourceAsMap();
      //存入id
      map.put("id", hits[i].getId());
      JSONObject jsonObject = JSONObject.parseObject(JSON.toJSONString(map));
      dataListJsonArray.add(jsonObject);
    }
    JSONObject result = new JSONObject();
    result.put("count", searchHits.getTotalHits());
    result.put("data_list", dataListJsonArray);
    return result;
  }

  @Override
  public long cardinalityAggregation(String appId, List<String> listAppVersion,
      List<String> listManufacturer, Long lEndTime, List<String> listLocation,
      List<String> listOsVersion, List<String> listDataTypes, Long lStartTime, String indexName,
      String indexType, String fieldName, String cardinalityName, boolean oneIndex) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listManufacturer,
            listLocation, listOsVersion, listAppVersion, lStartTime, lEndTime, listDataTypes);
    CardinalityAggregationBuilder cardinalityAggregationBuilder = AggregationBuilders
        .cardinality(cardinalityName).field(fieldName);

    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, lStartTime, lEndTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return 0;
    }
    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addAggregation(cardinalityAggregationBuilder)
        .execute()
        .actionGet();
    Cardinality cardinality = searchResponse.getAggregations().get(cardinalityName);
    return cardinality.getValue();
  }

  /*
  * 处理aggs条件，通过日期统计总数和设备数目.
  * **/
  private List<String> handleDateCondition(Long startTime, Long endTime, boolean sameDay,
      String udidCardinalityName, DateHistogramAggregationBuilder dateHistogramAggregationBuilder) {
    List<String> dateList = new ArrayList<>();
    dateHistogramAggregationBuilder
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    if (sameDay) {
      // 查看一天的数据按照小时分组.
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.HOUR);
      dateList = TimeParse.getHourList();
    } else {
      // 按照每天查看数据    
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.DAY);
      dateList = TimeParse.getDateList(startTime, endTime);
    }
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(udidCardinalityName).field(EsFieldModel.UDID);
    dateHistogramAggregationBuilder.subAggregation(udidCardinalityAggregationBuilder);
    return dateList;
  }

  @Override
  public JSONArray TermsAggByFiled(String appId, List<String> listAppVersion,
      List<String> listDevTypeSelect, Long lEndTime,
      List<String> listLocationSelect, List<String> listOsVersionSelect, Long lStartTime,
      String strFieldName) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listDevTypeSelect,
            listLocationSelect, listOsVersionSelect, listAppVersion, lStartTime, lEndTime, null);
    String strTermsName = "term_by_field";
    TermsAggregationBuilder terms = AggregationBuilders.terms(strTermsName)
        .field(strFieldName);
    SearchResponse searchResponse = es.client.prepareSearch(commonBaseService.getEventIndexName())
        .setQuery(boolQueryBuilder)
        .addAggregation(terms)
        .execute()
        .actionGet();
    Terms termsField = searchResponse.getAggregations().get(strTermsName);
    JSONArray jsonArray = new JSONArray();
    for (Bucket bucket : termsField.getBuckets()) {
      JSONObject jsonObject = new JSONObject();
      long lCount = bucket.getDocCount();
      jsonObject.put(strFieldName, bucket.getKeyAsString());
      jsonObject.put("value", lCount);
      jsonArray.add(jsonObject);
    }
    return jsonArray;
  }

  /**
   * @param max description:获取最近/远一次时间
   */
  @Override
  public Double getTime(String indexName, String indexType, BoolQueryBuilder boolQueryBuilder,
      String fieldName, Boolean max, String matchField, String strValue, Long startTime,
      Long endTime, boolean oneIndex) {
    boolQueryBuilder.must(QueryBuilders.termQuery(matchField, strValue));
    SearchResponse searchResponse = null;
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return 0D;
    }
    if (max) {
      MaxAggregationBuilder aggregationBuilder = AggregationBuilders.max("times").field(fieldName);
      searchResponse = client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(aggregationBuilder)
          .execute()
          .actionGet();
      Max agg = searchResponse.getAggregations().get("times");
      return agg.getValue();
    } else {
      MinAggregationBuilder aggregationBuilder = AggregationBuilders.min("times").field(fieldName);
      searchResponse = client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(aggregationBuilder)
          .execute()
          .actionGet();
      Min agg = searchResponse.getAggregations().get("times");
      return agg.getValue();
    }
  }

  @Override
  public JSONObject getDevDetail(String indexName, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime,
      List<String> dataTypes, JSONArray conditionJsonArray, String strCabField,
      Boolean max, String strSortBy, String strSortField, Long page,
      Long size, boolean oneIndex) {

    long start_time = System.currentTimeMillis();
    List<Map<String, Object>> listAll = statCountByField(indexName,
        commonBaseService.getIndexTypeName(), appId, manufacturerList, locationList, osVersionList,
        appVersionList, startTime, endTime, dataTypes, conditionJsonArray, EsFieldModel.UDID,
        strCabField, strSortBy, strSortField, 1000L, oneIndex);
    if ("last_time".equals(strSortField)) {
      strSortField = "last_time_stamp";
      //根据时间戳排序
      sortList(listAll, strSortBy, strSortField);
    }
    List<Map<String, Object>> listResult = new ArrayList<>();
    for (int i = (int) ((page - 1) * size); i < (page * size) && i < listAll.size(); i++) {
      listResult.add(listAll.get(i));
    }
    long aggs_time = System.currentTimeMillis();
    log.info("(aggs_time - start_time) = {}", (aggs_time - start_time));

    //构造过滤条件
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime, dataTypes);
    filterSearchCondition(conditionJsonArray, boolQueryBuilder);
    BoolQueryBuilder queryBuilderShould = QueryBuilders.boolQuery();
    HashMap<Object, JSONObject> dataTmp = new HashMap<>();
    JSONArray jsonArray = new JSONArray();
    //补全需要的信息
    for (int i = 0; i < listResult.size(); i++) {
      JSONObject data = new JSONObject();
      data.put("count", listResult.get(i).get("count"));
      data.put("data_type_count", listResult.get(i).get("unique_count"));
      dataTmp.put(listResult.get(i).get("field"), data);
      jsonArray.add(data);

      Map<String, String> mapTerm = new HashMap<>();
      mapTerm.put(EsFieldModel.UDID, listResult.get(i).get("field").toString());
      mapTerm.put(EsFieldModel.TIME, listResult.get(i).get("last_time").toString());
      BoolQueryBuilder queryTmp = commonBaseService.filterQueryBuilder(mapTerm, null);
      queryBuilderShould.should(queryTmp);
    }
    boolQueryBuilder.must(queryBuilderShould);

    List<String> indexs = es
        .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);
    SearchRequestBuilder searchRequest = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName()).setQuery(boolQueryBuilder)
        .setSize(listAll.size() * 10);
    //log.info("searchRequest = {}", searchRequest);
    SearchResponse searchResponse = searchRequest.get();
    SearchHits his = searchResponse.getHits();
    SearchHit[] shAll = his.getHits();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    for (SearchHit hit : shAll) {
      Map<String, Object> mapSource = hit.getSourceAsMap();
      if (dataTmp.containsKey(mapSource.get(EsFieldModel.UDID))) {
        JSONObject data = dataTmp.get(mapSource.get(EsFieldModel.UDID));
        data.putAll(mapSource);
        data.put("last_time",
            sdf.format(new Date(Long.valueOf(mapSource.get(EsFieldModel.TIME_STAMP).toString()))));
      }
    }
    long end_time = System.currentTimeMillis();
    log.info("(end_time - start_time) = {}, (end_time - aggs_time) = {}", (end_time - start_time),
        (end_time - aggs_time));

    JSONObject data = new JSONObject();
    data.put("data_list", jsonArray);
    data.put("count", listAll.size());
    return data;
  }


  @Override
  public void sortList(List<Map<String, Object>> mapList, String strSortBy, String strSortField) {
    if ("asc".equals(strSortBy)) {
      Collections.sort(mapList, new Comparator<Map<String, Object>>() {
        @Override
        public int compare(Map<String, Object> o1, Map<String, Object> o2) {
          long l1 = Long.valueOf(o1.get(strSortField).toString());
          long l2 = Long.valueOf(o2.get(strSortField).toString());
          if (l1 == l2) {
            return 0;
          } else if (l2 < l1) {
            return 1;
          } else {
            return -1;
          }
        }
      });
    } else {
      Collections.sort(mapList, new Comparator<Map<String, Object>>() {
        @Override
        public int compare(Map<String, Object> o1, Map<String, Object> o2) {
          long l1 = Long.valueOf(o1.get(strSortField).toString());
          long l2 = Long.valueOf(o2.get(strSortField).toString());
          if (l1 == l2) {
            return 0;
          } else if (l2 > l1) {
            return 1;
          } else {
            return -1;
          }
        }
      });
    }
  }

  @Override
  public JSONObject timeLineList(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, String strCabFiled, String udid,
      Long startTime, Long endTime, boolean oneIndex) {
    SimpleDateFormat sdfd = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat sdfs = new SimpleDateFormat("HH:mm:ss");
    String udidCardinalityName = "count_distinct_udid";
    // cardinality是唯一聚合，聚合的字段是udid，这统计的是udid去重后的数量，也就是数量.
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(udidCardinalityName).field(strCabFiled);
    // 查询结果
    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      JSONObject result = new JSONObject();
      result.put("datalist", new ArrayList<>());
      result.put("udid", udid);
      result.put("last_time", "-");
      result.put("risk_count", 0);
      result.put("risk_type_count", 0);
      return result;
    }

    SearchResponse activeSearchResponse = es.client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .setSize(PubString.numTimeLineSize)
        .addSort(EsFieldModel.TIME, SortOrder.DESC)
        .addAggregation(udidCardinalityAggregationBuilder)
        .execute().actionGet();
    SearchHits his = activeSearchResponse.getHits();
    SearchHit[] shAll = his.getHits();
    List<Map<String, Object>> listMap = new ArrayList<>();
    //为了给第一条数据加入年-月-日，把起始时间设定为选定时间的前一天
    long before = startTime - 24 * 60 * 60 * 1000;
    String lastTime = "-";
    if (shAll.length > 0) {
      //结果集是按时间升序排序的，选定最后一条记录获得的时间即为最近发生时间
      lastTime = TimeParse
          .dataFormat(new Date((long) shAll[0].getSourceAsMap().get(EsFieldModel.TIME_STAMP)));
      for (int i = shAll.length - 1; i >= 0; i--) {
        Map<String, Object> mapSource = shAll[i].getSourceAsMap();
        Map<String, Object> map = new HashMap<>();
        long current = (long) mapSource.get("server_time");
        //每天的第一条数据加入年-月-日
        if (!TimeParse.isSameDayOfMillis(before, current)) {
          map.put("date", sdfd.format(new Date(current)));
        }
        map.put("time", sdfs.format(new Date(current)));
        map.put("threat_id", shAll[i].getId());
        map.put("risk_type", mapSource.get("data_type"));
        map.put("self_md5", mapSource.get("self_md5"));
        before = current;
        listMap.add(map);
        if (!listMap.get(0).containsKey("date")) {
          listMap.get(0).put("date", sdfd.format(new Date(current)));
        }
      }
    }
    // 获得返回结果.
    Cardinality cardinality = activeSearchResponse.getAggregations().get(udidCardinalityName);
    long unique = cardinality.getValue();
    JSONObject result = new JSONObject();
    result.put("datalist", listMap);
    result.put("udid", udid);
    result.put("last_time", lastTime);
    result.put("risk_count", his.getTotalHits());
    result.put("risk_type_count", unique);
    return result;
  }

  @Override
  public JSONObject getDataById(List<String> listIds, String appId, String indexName,
      String indexType) {
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(EsFieldModel.APP_ID, appId);
    bqb.must(termQueryBuilder);
    TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(EsFieldModel.ID, listIds);
    bqb.must(termsQueryBuilder);
    SearchResponse searchResponse = client.prepareSearch(indexName)
        .setTypes(indexType)
        .setQuery(bqb)
        .execute()
        .actionGet();
    SearchHits his = searchResponse.getHits();
    SearchHit[] shAll = his.getHits();
    Map<String, Object> mapSource = new HashMap<>();
    if (shAll.length > 0) {
      mapSource = shAll[0].getSourceAsMap();
    }
    JSONObject data = JSONObject.parseObject(JSON.toJSONString(mapSource));
    return data;
  }

  public Map<String, Object> getDetail(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, Map<String, String> map, Long startTime, Long endTime,
      boolean oneIndex) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    if (map != null && !map.isEmpty()) {
      for (Entry<String, String> entry : map.entrySet()) {
        boolQueryBuilder.must(QueryBuilders.termQuery(entry.getKey(), entry.getValue()));
      }
    }
    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return new HashMap<>();
    }
    SearchResponse searchResponse = client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .execute()
        .actionGet();
    //获得所需要的字段信息
    SearchHits his = searchResponse.getHits();
    SearchHit[] shAll = his.getHits();
    Map<String, Object> mapSource = new HashMap<>();
    if (shAll.length > 0) {
      mapSource = shAll[shAll.length - 1].getSourceAsMap();
      mapSource.put("last_time",
          sdf.format(new Date(Long.valueOf(mapSource.get(EsFieldModel.TIME_STAMP).toString()))));
    }
    return mapSource;
  }

  /**
   * description: 增加排序处理.
   */
  public List<Map<String, Object>> statCountByField(String indexName, String indexType,
      String appId, List<String> manufacturerList, List<String> locationList,
      List<String> osVersionList, List<String> appVersionList, Long startTime,
      Long endTime, List<String> dataTypes, JSONArray conditionJsonArray, String fieldName,
      String cabName, String strSortBy, String strSortField, long topNum, boolean oneIndex) {
    String[] indexExist = null;
    List<Map<String, Object>> mapList = new ArrayList<>();
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      indexExist = es.washIndex(indexs);
    }
    //indexExist.leng==0判断
    if (indexExist.length > 0) {
      //构造过滤条件
      BoolQueryBuilder boolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, appVersionList,
              startTime, endTime, dataTypes);
      filterSearchCondition(conditionJsonArray, boolQueryBuilder);
      //对传入字段去重
      String cardinalityName = "count_distinct";
      CardinalityAggregationBuilder cardinalityAggregationBuilder = AggregationBuilders
          .cardinality(cardinalityName).field(cabName);

      MaxAggregationBuilder aggregationBuilder = AggregationBuilders.max("times")
          .field(EsFieldModel.TIME);
      //判断升/降序
      Boolean isAsc = true;
      if ("desc".equals(strSortBy)) {
        isAsc = false;
      } else if ("asc".equals(strSortBy)) {
        isAsc = true;
      }
      String termsName = "count_by_field";
      // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
      long size = topNum > 0L ? topNum : 100000L;
      long shardSize = size * 3;
      TermsAggregationBuilder termsAggregationBuilder = null;
      //判断排序字段
      if ("data_type_count".equals(strSortField)) {
        termsAggregationBuilder = AggregationBuilders.terms(termsName)
            .subAggregation(cardinalityAggregationBuilder)
            .subAggregation(aggregationBuilder)
            .collectMode(SubAggCollectionMode.BREADTH_FIRST)
            .field(fieldName)
            .shardSize((int) shardSize)
            .size((int) size)
            .order(BucketOrder.compound(BucketOrder.aggregation(cardinalityName, isAsc)
                , BucketOrder.count(isAsc)));
      } else if ("count".equals(strSortField)) {
        termsAggregationBuilder = AggregationBuilders.terms(termsName)
            .subAggregation(cardinalityAggregationBuilder)
            .subAggregation(aggregationBuilder)
            .collectMode(SubAggCollectionMode.BREADTH_FIRST)
            .field(fieldName)
            .shardSize((int) shardSize)
            .size((int) size)
            .order(BucketOrder.count(isAsc));
      } else if ("last_time".equals(strSortField)) {
        termsAggregationBuilder = AggregationBuilders.terms(termsName)
            .subAggregation(cardinalityAggregationBuilder)
            .subAggregation(aggregationBuilder)
            .collectMode(SubAggCollectionMode.BREADTH_FIRST)
            .field(fieldName)
            .shardSize((int) shardSize)
            .size((int) size);
      }
      SearchResponse searchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(termsAggregationBuilder)
          .execute()
          .actionGet();

      Terms terms = searchResponse.getAggregations().get(termsName);
      for (Terms.Bucket entry : terms.getBuckets()) {
        long count = entry.getDocCount();
        Cardinality cardinality = entry.getAggregations().get(cardinalityName);
        long uniqueCount = cardinality.getValue();
        Max agg = entry.getAggregations().get("times");
        Map<String, Object> map = new HashMap<>();
        map.put("last_time_stamp", Math.round(agg.getValue()));
        map.put("last_time", agg.getValueAsString());
        map.put("count", count);
        map.put("unique_count", uniqueCount);
        map.put("field", entry.getKeyAsString());
        mapList.add(map);
      }
    }
    return mapList;
  }

  /**
   * 过滤term，terms条件的方法.
   */
  @Override
  public void filterSearchCondition(JSONArray conditionJsonArray,
      BoolQueryBuilder boolQueryBuilder) {
    if (conditionJsonArray != null) {
      for (Object object : conditionJsonArray) {
        JSONObject conditionJsonObject = (JSONObject) object;
        String fieldName = conditionJsonObject.getString("field");
        Object value = conditionJsonObject.get("value");
        if (fieldName != null && value != null) {
          Class valueClass = value.getClass();
          if (valueClass == JSONArray.class) {
            JSONArray valueArray = (JSONArray) value;
            List<String> valueList = new ArrayList<>();
            for (Object object1 : valueArray) {
              valueList.add((String) object1);
            }
            TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(fieldName, valueList);
            boolQueryBuilder.must(termsQueryBuilder);
          } else if (valueClass == String.class) {
            TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(fieldName, value);
            boolQueryBuilder.must(termQueryBuilder);
          } else if (List.class.isAssignableFrom(valueClass)) {
            TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(fieldName, value);
            boolQueryBuilder.must(termsQueryBuilder);
          }

        }
      }
    }
  }
}
package com.bangcle.service.common.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class CommonBaseServiceImpl implements CommonBaseService {

  private final String startIndexName = "bangcle_start_*";
  private final String threatIndexName = "bangcle_threat_*";
  private final String envIndexName = "bangcle_environment_*";
  private final String eventIndexName = "bangcle_event_safe_*";
  private final String crashIndexName = "bangcle_crash_*";
  private final String appIndexName = "bangcle_app_*";
  private final String devIndexName = "bangcle_devinfo";
  private final String gyroscopeIndexName = "bangcle_gyroscope_*";
  private final String indexTypeName = "bangcle_type";
  private final String userDataIndexName = "bangcle_user_data_*";

  @Override
  public BoolQueryBuilder filterQueryBuilder(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, List<String> dataTypes) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    // 条件过滤，设备型号.
    if (manufacturerList != null && !manufacturerList.isEmpty()) {
      TermsQueryBuilder manBoolQueryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.MANUFACTURER, manufacturerList);
      boolQueryBuilder.must(manBoolQueryBuilder);
    }
    // 条件过滤，位置.
    if (locationList != null && !locationList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.LOCATION, locationList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，系统版本.
    if (osVersionList != null && !osVersionList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.OS_INFO, osVersionList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，应用版本.
    if (appVersionList != null && !appVersionList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.APP_INFO, appVersionList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，数据类型.
    if (dataTypes != null && !dataTypes.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders.termsQuery(EsFieldModel.DATA_TYPE, dataTypes);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，应用id.
    TermQueryBuilder idQueryBuidler = QueryBuilders
        .termQuery(EsFieldModel.APP_ID, appId);
    boolQueryBuilder.must(idQueryBuidler);
    // 条件过滤，时间范围.
    if (endTime > 0L) {
      RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(EsFieldModel.TIME).lt(endTime)
          .gt(startTime);
      boolQueryBuilder.must(rangeQueryBuilder);
    }
    return boolQueryBuilder;
  }

  /**
   * @Author: zhusiwei
   * @Data: 2018/1/11
   * @Description: 判断选用的过滤条件，目前区分List使用terms，其他使用term。如有其他类型需求，请自行追加判断并在此进行说明.
   * @params: [filterMap]
   * @return：org.elasticsearch.index.query.BoolQueryBuilder
   **/
  @Override
  public BoolQueryBuilder filterQueryBuilder(Map<String, ? extends Object> filterMap,
      BoolQueryBuilder boolQueryBuilder) {

    if (boolQueryBuilder == null) {
      boolQueryBuilder = QueryBuilders.boolQuery();
    }
    if (filterMap == null || filterMap.isEmpty()) {
      return boolQueryBuilder;
    }

    for (Map.Entry<String, ? extends Object> entry : filterMap.entrySet()) {
      if (entry.getValue() instanceof List) {
        TermsQueryBuilder manBoolQueryBuilder = QueryBuilders
            .termsQuery(entry.getKey(), (List) entry.getValue());
        boolQueryBuilder.must(manBoolQueryBuilder);
      } else {
        TermQueryBuilder manBoolQueryBuilder = QueryBuilders
            .termQuery(entry.getKey(), entry.getValue());
        boolQueryBuilder.must(manBoolQueryBuilder);
      }
    }
    return boolQueryBuilder;
  }

  @Override
  public String getStartIndexName(long startTime, long endTime) {
    return startIndexName;
  }

  @Override
  public String getStartIndexName() {
    return startIndexName;
  }

  @Override
  public String getThreatIndexName(long startTime, long endTime) {
    return threatIndexName;
  }

  @Override
  public String getThreatIndexName() {
    return threatIndexName;
  }

  @Override
  public String getEnvIndexName(long startTime, long endTime) {
    return envIndexName;
  }

  @Override
  public String getEnvIndexName() {
    return envIndexName;
  }

  @Override
  public String getEventIndexName(long startTime, long endTime) {
    return eventIndexName;
  }

  @Override
  public String getEventIndexName() {
    return eventIndexName;
  }

  @Override
  public String getCrashIndexName(long startTime, long endTime) {
    return crashIndexName;
  }

  @Override
  public String getCrashIndexName() {
    return crashIndexName;
  }

  @Override
  public String getIndexTypeName() {
    return indexTypeName;
  }

  @Override
  public String getAppIndexName(long startTime, long endTime) {
    return appIndexName;
  }

  @Override
  public String getAppIndexName() {
    return appIndexName;
  }

  @Override
  public String getDevIndexName(long startTime, long endTime) {
    return devIndexName;
  }

  @Override
  public String getDevIndexName() {
    return devIndexName;
  }

  @Override
  public String getGyroscopeIndexName() {
    return gyroscopeIndexName;
  }

  @Override
  public String getUserDataIndexName(){return userDataIndexName;}

  @Override
  public double getRate(long count, long allCount) {
    DecimalFormat df = new DecimalFormat("0.0000");
    double doubleRate = 0.0000;
    if (allCount > 0L) {
      String rate = df.format((double) count / allCount);
      doubleRate = Double.parseDouble(rate);
    }
    return doubleRate;
  }

  @Override
  public String getPercentRateStr(long count, long allCount) {
    DecimalFormat df = new DecimalFormat("0.00");
    double rate = 0.0000;
    if (allCount > 0L) {
      rate = (double) count / allCount;
    }
    String strRate = df.format(rate * 100) + "%";
    return strRate;
  }

  /**
   * 排序JsonArray，排序的根据的字段fieldName需要能转成long类型.
   */
  @Override
  public JSONArray sortJsonArray(JSONArray jsonArray, String fieldName) {
    List<Map<String, Object>> list = new ArrayList<>();
    for (Object object : jsonArray) {
      JSONObject jsonObject = (JSONObject) object;
      Map<String, Object> map = new HashMap<>();
      for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {
        map.put(entry.getKey(), entry.getValue());
      }
      list.add(map);
    }
    Collections.sort(list, new Comparator<Map<String, Object>>() {
      @Override
      public int compare(Map<String, Object> o1, Map<String, Object> o2) {
        long l1 = (long) o1.get(fieldName);
        long l2 = (long) o2.get(fieldName);
        return (int) (l2 - l1);
      }
    });
    JSONArray newJsonArray = new JSONArray();
    for (Map<String, Object> map : list) {
      JSONObject object = new JSONObject();
      for (Map.Entry<String, Object> m : map.entrySet()) {
        object.put(m.getKey(), m.getValue());
      }
      newJsonArray.add(object);
    }
    return newJsonArray;
  }

  @Override
  public List<String> elementTreat(List<String> listOriginal) {
    if (listOriginal != null && listOriginal.size() == 1) {
      if (!listOriginal.get(0).contains(" ")) {
        String strOriginal = listOriginal.get(0);
        listOriginal.clear();
        listOriginal.add(strOriginal + " ");
      }
    }
    return listOriginal;
  }

  @Override
  public String modelToManufacturer(String strStatType) {
    String strTermsField = "";
    switch (strStatType) {
      case (EsFieldModel.MODEL):
        strTermsField = EsFieldModel.MANUFACTURER;
        break;
      case (EsFieldModel.OS_VERSION):
        strTermsField = EsFieldModel.OS_INFO;
        break;
      case (EsFieldModel.APP_VERSION):
        strTermsField = EsFieldModel.APP_INFO;
        break;
      case (EsFieldModel.LOCATION):
        strTermsField = EsFieldModel.LOCATION;
        break;
      default:
        strTermsField = EsFieldModel.LOCATION;
        break;
    }
    return strTermsField;
  }
}
package com.bangcle.service.common.impl;

import com.bangcle.repository.HbaseRepository;
import com.bangcle.service.common.CommonHbaseService;
import com.bangcle.util.PubString;
import java.io.IOException;
import java.util.HashMap;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.Table;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/4/3.
 */
@Service
@Slf4j
public class CommonHbaseServiceImpl implements CommonHbaseService {

  @Autowired
  private HbaseRepository hbaseRepository;

  public HashMap<String, HashMap<String, String>> getDevStatus(String[] devTag) {
    HashMap devStatus = new HashMap();
    if (devTag == null) {
      return devStatus;
    }
    Table table = null;
    try {
      Connection connection = hbaseRepository.getConnection();
      table = connection.getTable(TableName.valueOf(PubString.HBASE_DEV_STATUS));
      for (String tag : devTag) {
        HashMap dev = hbaseRepository.getHbaseData(tag, "dev_status", table);
        devStatus.put(tag, dev);
      }
    } catch (IOException e) {
      log.error("error", e);
    } finally {
      try {
        if (table != null) {
          table.close();
        }
      } catch (IOException e) {
        log.error("", e);
      }
    }
    return devStatus;
  }
}
package com.bangcle.service.common.impl;

import com.bangcle.service.common.CryptService;
import com.bangcle.util.RSAUtils;
import java.util.Base64;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class CryptServiceImpl implements CryptService {

  @Override
  public String decryptByRsaPublicKey(String body, String publicKey) {
    String decryptString = null;
    String charsetName = "UTF-8";
    try {
      // byte[] bodyBytes = Base64.decode(body);
      byte[] bodyBytes = Base64.getDecoder().decode(body);
      byte[] decryptBytes = RSAUtils.decryptByPublicKey(bodyBytes, publicKey);
      decryptString = new String(decryptBytes, charsetName);
    } catch (Exception e) {
      e.printStackTrace();
    }
    return decryptString;
  }

  @Override
  public String decryptLicenseString(String body) {
    // 这写死在代码中，不轻易变动，不放在配置文件中是想隐藏下，不暴露.
    StringBuffer publicKey = new StringBuffer();
    publicKey.append("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmiIjW9");
    publicKey.append("y/Va9usxf2CI8MenluoD1ABrOARKzQc6egPvtby6B0uFfn6bee3JY7zp2gQ7+W4");
    publicKey.append("o8WcobaziMUNd2ZItvf13QXCUnvlz/kj8bUXFyR6O8ESI8mPJr0ZWbrg+GNnXwNm4l+kHGh");
    publicKey.append("hMPZkMYjmAohEUy+XOgj8gNVFo3uWmix9ptSJ+jDBuDpMLvkTjwkzrvI3kv8qfHaGgvvd4");
    publicKey.append("PD4hWFnF/hdmD0T85e32qekywg+Oi4A13i5L5tXLgtycs6KbCbENVZkP2Uyf+dj+QBziQ/5l5EtkzMo");
    publicKey.append("K0C9i105+dMM3W34OwCxlbN13bJOG7qBGSnogn3puLkyRD/4NbXKQIDAQAB");
    return decryptByRsaPublicKey(body, publicKey.toString());
  }


}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;

public interface ConfigureDevListService {

  public JSONObject create (Integer agentId, String type, String value, String option, String optionValue,
  int status, int isBlackOrWhite);

  public JSONObject search(Integer agentId, String type , String value, Integer isBlackOrWhite);

  public boolean updateStatus(Integer agentId, List<Integer> ids, int status);

  public void delete(Integer agentId, List<Integer> ids);

  public boolean updateRule(Integer agentId, Integer id, String option, String optionValue);

  public boolean updateInstruction(Integer agentId, String optionValue);

  public String getInstruction(Integer agentId);

  public JSONObject batchCreate(Integer agentId, JSONArray values, String option, int status, int isBlackOrWhite);

  public JSONArray filterValue(String value);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

public interface ConfigureEmulatorListService {

  public JSONObject list(Integer agentId);

  public boolean updateStatus(Integer agentId, Integer id, int status);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

public interface ConfigureInjectListService {
  public JSONObject create(Integer agentId, String name, String feature, int status, int isBlackOrWhite);

  public JSONObject list(Integer agentId);

  public boolean updateStatus(Integer agentId, List<Integer> ids,int status);

  public boolean deleteInIds(Integer agentId, List<Integer> ids);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午11:27 17-12-1.
 */
public interface CrashInfoService {

  /**
   * 崩溃类型/设备排行.
   */
  public JSONObject crashTypeSort(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      String strSortBy, String strSortField, Long startTime, Long endTime, Integer page, Integer size);

  /**
   * 具体崩溃类型下的崩溃趋势.
   */
  public JSONObject crashTypeOneTrend(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      Long startTime, Long endTime, String crashType);

  /**
   * 崩溃排行_崩溃列表.
   */
  public JSONObject crashTypeOneInfoList(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      Long startTime, Long endTime, String crashType, int page, int size);

  /**
   * 崩溃占比top5(设备类型、地域、系统版本、应用版本)崩溃次数/崩溃设备数.
   */
  public JSONObject crashTypeOneDist(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      Long startTime, Long endTime, String crashType, String strCountType, String strDistType);

  public JSONObject crashDevSort(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      String strSortBy, String strSortField, Long page, Long size, Long startTime, Long endTime)
      throws InterruptedException;

  /**
   * 具体设备的崩溃趋势.
   */
  public JSONObject crashDevOneTrend(String appId, String udId, Long startTime, Long endTime);

  /**
   * 具体设备的崩溃信息列表.
   */
  public JSONObject crashDevOneInfoList(String appId, String udId, Long startTime, Long endTime,
      int page, int size);

  /**
   * 崩溃详情.
   */
  public JSONObject crashInfo(String esId, String esIndex, String esType);

}package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.text.ParseException;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午11:27 17-12-1.
 */
public interface CrashStatService {

  /**
   * 崩溃分析总数统计.
   */
  public JSONObject crashCount(String appId, List<String> listAppVersion, List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);

  /**
   * 崩溃趋势.
   */
  public JSONObject crashTrend(String appId, List<String> listAppVersion, List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime)
      throws ParseException;

  /**
   * 崩溃分类统计.
   */
  public JSONObject crashDist(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);

  /**
   * 崩溃次数/设备数排名前十城市.
   */
  public JSONObject crashRank(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);

  /**
   * dist:区分统计类型 location device os_version app_version count_type:区分统计次数还是设备数 crash_dev_count
   * crash_count 崩溃分布.
   */
  public JSONObject crashStat(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer, String strDistType,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;

public interface DataStrategyService {

  /**
   *
   * @param appId 应用id
   * @param name  策略名称
   * @param types  消息过滤类型
   * @param locations  过滤地域
   */
  public JSONObject save(String appId,String name,List types,List locations);

  /**
   * update dataStrategy
   * @param name
   * @param types
   * @param locations
   * @param id
   */
  public JSONObject update(String name,List types,List locations,Integer id,String appId);

  /**
   * delete dataStrategy
   * @param id
   */
  public JSONObject delete(Integer id,String appId);

  public JSONObject findList(String appid);

  public JSONObject findById(Integer id);

  public JSONObject updateStatus(Integer id,Integer status,String appId);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午9:17 17-11-30.
 */
public interface DevInfoService {

  /**
   * 终端设备信息详情.
   */
  public JSONObject devSort(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, long page,
      long size, String sort_by, String listType);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午8:57 17-11-30.
 */
public interface DevStatService {

  /**
   * 终端设备信息总数统计.
   */
  public JSONObject devCount(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime);

  /**
   * 设备数趋势.
   */
  public JSONObject devTrend(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTim);

  /**
   * 设备分布.
   */
  public JSONObject devStat(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type, String distType);

  /**
   * 设备安装的应用列表.
   */
  public JSONObject getDevAnalyze(String appId, String udid, Integer page, Integer size);

  /**
   * 设备信息统计.
   */
  public JSONObject getDevSummary(String appId, String udid);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:08 17-12-1.
 */
public interface EnvInfoService {

  /**
   * sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型 location device os_version app_version
   * 地域/设备/系统版本/应用版本排行.
   */
  public JSONObject envSort(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strStatBy, Long startTime, Long endTime);

  public JSONObject getEnvList(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strSortField,
      String strStatBy, Long page, Long size, Long startTime, Long endTime);

  public JSONObject getEnvAnalyze(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String udid, String runKey, Long startTime, Long endTime);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午2:20 17-12-1.
 */
public interface EnvStatService {

  /**
   * 环境感知总数统计.
   */
  public JSONObject envCount(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion, Long startTime,
      Long endTime);

  /**
   * 异常环境趋势.
   */
  public JSONObject envTrend(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion, Long startTime,
      Long endTime);

  /**
   * 异常环境分类统计.
   */
  public JSONObject envDist(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion, Long startTime,
      Long endTime);

  /**
   * dist_type:区分统计类型 location device os_version app_version 异常环境分布.
   */
  public JSONObject envStat(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion, String strDistType,
      String strEnvType, Long startTime, Long endTime);
}
package com.bangcle.service;

/***
 * es 关联查询接口，提供数据关联查询
 */
public interface ESRelatedQueryService {

  /**
   * 通过udid 与agentid在start数据中获取一条时区数据
   *
   * @param udid udid
   * @param agentId agentid
   * @return 一条时区 例如：GMT+08:00
   */
  String getTimeZoneFromStartMessage(String udid, String agentId);


  /**
   * 通过udid 与agentid在陀螺仪数据中获取一条陀螺仪数据
   *
   * @param udid udid
   * @param agentId agentid
   * @return 返回的陀螺仪数据json
   */
  String getGyroFromGyroMessage(String udid, String agentId);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午4:06 17-12-1.
 */
public interface EventInfoService {

  /**
   * sort_field:用于区分排序字段：event_count event_dev_count sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型
   * location source 地域/攻击源排行.
   */
  public JSONObject eventSort(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Integer page, Integer size, String strSortBy, String strSortField,
      String strStatType, Long startTime, Long endTime);

  /**
   * 事件列表 strStatType:location source.
   */
  public JSONObject getEventList(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strIp, Long page, Long size, String strStatType, String strSortField,
      String strSortBy, Long startTime, Long endTime);

  /**
   * 时间链.
   */
  public JSONObject eventTimeLine(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String udid, Long startTime, Long endTime);

  /**
   * 事件解析.
   */
  public JSONObject getEventAnalyze(String appId, String strIndexName, String strIndexType,
      String strEventId);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午3:24 17-12-1.
 */
public interface EventStatService {

  /**
   * 安全事件总数统计.
   */
  public JSONObject eventCount(String appId, List<String> listAppVersion, List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long lStartTime, Long lEndTime);

  /**
   * 安全事件趋势.
   */
  public JSONObject eventTrend(String appId, List<String> listAppVersion, List<String> listLocation, List<String> listManufacturer,
  List<String> listOsVersion, Long startTime, Long endTime);

  /**
   * 安全事件地域分布.
   */
  public JSONObject eventLocalDist(String appId, List<String> lsitAppVersion, List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);

  /**
   * 安全事件攻击源分布.
   */
  public JSONObject eventSourceDist(String appId, List<String> listAppVersion, List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime);
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.AppInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubString;
import java.text.NumberFormat;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:26 17-12-1.
 */
@Service
@Slf4j
public class AppInfoServiceImpl implements AppInfoService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EsRepository es;

  /**
   * 应用列表.
   */
  @Override
  public JSONObject appSort(String appId, List<String> manufacturerList, List<String> locationList,
      List<String> osVersionList, Long startTime, Long endTime,
      Long page, Long size, String strSortBy) {
    String indexTypeName = commonBaseService.getIndexTypeName();
    if (page < 1L) {
      page = 1L;
    }
    if (size < 1L) {
      size = 20L;
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, null,
            startTime, endTime, null);

    String strTermsByAppName = "termsByAppName";
    String strTermsByVersion = "termsByVersion";
    String strCardinalityName = "cardinalityByUdid";
    int lsize = PubString.lsize;
    int shardSize = PubString.shardSize;
    CardinalityAggregationBuilder cardinalityAggregationBuilder = AggregationBuilders
        .cardinality(strCardinalityName).field(EsFieldModel.UDID);
    TermsAggregationBuilder termsAggregationBuilderByVersion = AggregationBuilders
        .terms(strTermsByVersion).field(EsFieldModel.VER_NAME).size(lsize).shardSize(shardSize)
        .order(BucketOrder.count(false)).subAggregation(cardinalityAggregationBuilder);
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(strTermsByAppName)
        .field(EsFieldModel.SOURCE_APP_NAME).size(lsize).shardSize(shardSize)
        .subAggregation(termsAggregationBuilderByVersion);

    List<String> indexs = es
        .getIndexs(commonBaseService.getAppIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("datalist", new JSONArray());
      data.put("total", 0);
      return data;
    }
    //获取设备数
    String cardinalityDevName = "cardinalityDevName";
    CardinalityAggregationBuilder cardinalityAggregationBuilderDev = AggregationBuilders
        .cardinality(cardinalityDevName).field(EsFieldModel.UDID);

    //按安装时间查询
    boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, null,
            -1L, -1L, null);
    // 条件过滤，时间范围.
    if (endTime > 0L) {
      RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(EsFieldModel.INSTALL_TIME)
          .lt(endTime)
          .gt(startTime);
      boolQueryBuilder.must(rangeQueryBuilder);
    }
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(termsAggregationBuilder)
        .addAggregation(cardinalityAggregationBuilderDev)
        .addSort(EsFieldModel.TIME, SortOrder.DESC);

    //调试
    //log.info("searchRequestBuilder === {}", searchRequestBuilder);
    SearchResponse searchResponse = searchRequestBuilder.get();

    Cardinality cardinalityAll = searchResponse.getAggregations().get(cardinalityDevName);
    long longTotalDev = cardinalityAll.getValue();

    Terms terms = searchResponse.getAggregations().get(strTermsByAppName);
    JSONArray jsonArray = new JSONArray();
    log.info("terms size is {}", terms.getBuckets().size());
    for (Terms.Bucket entry : terms.getBuckets()) {
      Terms termsVersion = entry.getAggregations().get(strTermsByVersion);
      for (Terms.Bucket entryByVersion : termsVersion.getBuckets()) {
        JSONObject jsonObject = new JSONObject();
        Cardinality cardinality = entryByVersion.getAggregations().get(strCardinalityName);
        long longCount = cardinality.getValue();
        String strAppVersion = entryByVersion.getKeyAsString();
        String strAppName = entry.getKeyAsString();
        jsonObject.put("app_name", strAppName);
        jsonObject.put("app_version", strAppVersion);
        jsonObject.put("count", longCount);
        jsonArray.add(jsonObject);
      }
    }
    //对结果进行分页
    JSONArray pageJsonArray = new JSONArray();
    for (int i = (int) ((page - 1) * size); i < (page * size) && i < jsonArray.size(); i++) {
      pageJsonArray.add(jsonArray.get(i));
    }

    //计算应用设备数占总设备数的百分比
    JSONArray jsonResult = new JSONArray();
    for (int i = 0; i < jsonArray.size(); i++) {
      JSONObject json = jsonArray.getJSONObject(i);
      BoolQueryBuilder boolQuery = commonBaseService
          .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, null,
              startTime, endTime, null);
      TermQueryBuilder termsQueryBuilderByAppName = QueryBuilders
          .termQuery(EsFieldModel.SOURCE_APP_NAME, json.getString("app_name"));
      TermQueryBuilder termQueryBuilderByVersion = QueryBuilders
          .termQuery(EsFieldModel.VER_NAME, json.getString("app_version"));
      boolQuery.must(termsQueryBuilderByAppName);
      boolQuery.must(termQueryBuilderByVersion);
      searchResponse = es.client.prepareSearch(indexExist).setTypes(indexTypeName)
          .setQuery(boolQuery).execute().actionGet();
      SearchHit[] searchHits = searchResponse.getHits().getHits();
      if (searchHits != null && searchHits.length > 0) {
        SearchHit searchHit = searchHits[0];
        Map map = searchHit.getSourceAsMap();
        json.put("pkg_name", map.get("pkg_name"));
        json.put("app_version", map.get("ver_name"));
        json.put("cert_issure", map.get("cert_issure"));
        json.put("cert_md5", map.get("cert_md5"));
        json.put("self_md5", map.get("md5"));
        NumberFormat nt = NumberFormat.getPercentInstance();
        nt.setMinimumFractionDigits(2);
        Double percent = json.getDouble("count") / longTotalDev;
        json.put("percent", nt.format(percent));
        if (map.get("self_md5").equals(map.get("md5"))) {
          jsonResult.add(0, json);
        } else {
          jsonResult.add(json);
        }
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", pageJsonArray);
    data.put("total", jsonArray.size());
    return data;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.repository.AppRepository;
import com.bangcle.service.AppService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午2:39 17-11-28.
 */
@Service
@Slf4j
public class AppServiceImpl implements AppService {

  @Autowired
  private AppRepository appRepo;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  @Override
  public App findById(Integer appId) {
    return appRepo.findById(appId);
  }

  @Override
  public JSONObject getAppSummary(String appId, String strSelfMd5) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.MD5, strSelfMd5));
    Map<String, Object> map = commonAggService
        .getDetail(commonBaseService.getAppIndexName(), commonBaseService.getIndexTypeName(),
            boolQueryBuilder, null, 0L, 0L, true);
    log.info(JSON.toJSONString(map));
    JSONObject data = new JSONObject();
    if (!map.isEmpty() && map != null) {
      data.put("app_name", map.get("source_app_name"));
      data.put("pkg_name", map.get("pkg_name"));
      data.put("self_md5", map.get("self_md5"));
      data.put("app_version", map.get(EsFieldModel.APP_INFO));
      data.put("cert_issure", map.get("cert_issure"));
      data.put("cert_md5", map.get("cert_md5"));
      data.put("install_time", TimeParse
          .Long2StrTime(Long.valueOf(map.get("install_time").toString()), "yyyy-MM-dd HH:mm:ss"));
      data.put("update_time", TimeParse
          .Long2StrTime(Long.valueOf(map.get("update_time").toString()), "yyyy-MM-dd HH:mm:ss"));
    }
    return data;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.AppStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import java.util.List;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:29 17-12-1.
 */
@Service
public class AppStatServiceImpl implements AppStatService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EsRepository es;

  /**
   * 应用安装设备数Top10.
   */
  @Override
  public JSONObject appCount(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime) {
    String appIndexName = commonBaseService.getAppIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();

    JSONArray resultArray = statCountByField(appIndexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime, null,
        EsFieldModel.SOURCE_APP_NAME, 100L);
    JSONObject jsonObjectTotal = (JSONObject) resultArray.get(0);
    long longTotalDev = jsonObjectTotal.getLong("dev_count");
    JSONArray datalistJsonArray = new JSONArray();
    for (int i = 1; i < resultArray.size() && i < 11; i++) {
      JSONObject jsonObject = resultArray.getJSONObject(i);
      JSONObject listJsonObject = new JSONObject();
      listJsonObject.put("app_name", jsonObject.get("field"));
      long longDevCount = jsonObject.getLong("dev_count");
      listJsonObject.put("app_count", longDevCount);
      listJsonObject
          .put("percent", commonBaseService.getPercentRateStr(longDevCount, longTotalDev));
      datalistJsonArray.add(listJsonObject);
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }

  /**
   * 按照fieldName字段做汇聚，同时针对UDID字段去重，并且按照去重后数量排序.
   * @return
   */
  public JSONArray statCountByField(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      String fieldName, long topNum) {
    BoolQueryBuilder boolQueryBuilder = filterQueryBuilder(appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);
    JSONArray dataJsonArray = new JSONArray();
    //根据传入时间计算对应的index
    List<String> indexs = es
        .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);

    JSONObject jsonObject = new JSONObject();
    //次数总计
    long longTotal = 0;
    //去重后的数量总计
    long longTotalDev = 0;
    if (indexExist.length > 0) {
      //udid去重
      String udidCardinalityName = "count_distinct_udid";
      String udidCardinalityAll = "all_udid_count";
      CardinalityAggregationBuilder udidCab = AggregationBuilders
          .cardinality(udidCardinalityName).field(EsFieldModel.UDID);

      CardinalityAggregationBuilder udidCabAll = AggregationBuilders
          .cardinality(udidCardinalityAll).field(EsFieldModel.UDID);

      String termsName = "count_by_field";
      // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
      long size = topNum > 0L ? topNum : 1000L;
      long shardSize = size * 3;
      TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(termsName)
          .field(fieldName)
          .shardSize((int) shardSize)
          .size((int) size)
          .order(BucketOrder.compound(BucketOrder.aggregation(udidCardinalityName, false),
              BucketOrder.count(false)))
          .subAggregation(udidCab);

      SearchResponse searchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(termsAggregationBuilder)
          .addAggregation(udidCabAll)
          .execute()
          .actionGet();

      Terms terms = searchResponse.getAggregations().get(termsName);
      SearchHits searchHits = searchResponse.getHits();
      longTotal = searchHits.getTotalHits();
      Cardinality cardinalityAll = searchResponse.getAggregations().get(udidCardinalityAll);
      longTotalDev = cardinalityAll.getValue();

      for (Terms.Bucket entry : terms.getBuckets()) {
        long count = entry.getDocCount();
        Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
        String field = entry.getKeyAsString();
        long devCount = cardinality.getValue();
        JSONObject dataJsonObject = new JSONObject();
        dataJsonObject.put("count", count);
        dataJsonObject.put("dev_count", devCount);
        dataJsonObject.put("field", field);
        dataJsonArray.add(dataJsonObject);
      }
    }
    jsonObject.put("count", longTotal);
    jsonObject.put("dev_count", longTotalDev);
    jsonObject.put("field", "总计");
    dataJsonArray.add(0, jsonObject);

    return dataJsonArray;
  }

  /**
   * 生成过滤条件，与公共方法中的区别为这里的时间用的是应用安装时间，
   * 公共方法中用的是dt_server_time.
   * @return
   */
  public BoolQueryBuilder filterQueryBuilder(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, List<String> dataTypes) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    // 条件过滤，设备型号.
    if (manufacturerList != null && !manufacturerList.isEmpty()) {
      TermsQueryBuilder manBoolQueryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.MANUFACTURER, manufacturerList);
      boolQueryBuilder.must(manBoolQueryBuilder);
    }
    // 条件过滤，位置.
    if (locationList != null && !locationList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.LOCATION, locationList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，系统版本.
    if (osVersionList != null && !osVersionList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.OS_INFO, osVersionList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，应用版本.
    if (appVersionList != null && !appVersionList.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders
          .termsQuery(EsFieldModel.APP_INFO, appVersionList);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，数据类型.
    if (dataTypes != null && !dataTypes.isEmpty()) {
      TermsQueryBuilder queryBuilder = QueryBuilders.termsQuery(EsFieldModel.DATA_TYPE, dataTypes);
      boolQueryBuilder.must(queryBuilder);
    }
    // 条件过滤，应用id.
    TermQueryBuilder idQueryBuidler = QueryBuilders
        .termQuery(EsFieldModel.APP_ID, appId);
    boolQueryBuilder.must(idQueryBuidler);
    // 条件过滤，时间范围.
    if (endTime > 0L) {
      RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(EsFieldModel.INSTALL_TIME)
          .lt(endTime)
          .gt(startTime);
      boolQueryBuilder.must(rangeQueryBuilder);
    }
    return boolQueryBuilder;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.CheaterApp;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.CheaterAppDefRepository;
import com.bangcle.service.CheaterAppDefService;
import com.bangcle.util.TimeParse;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Slf4j
@Service
public class CheaterAppDefServiceImpl implements CheaterAppDefService {

  @Autowired
  CheaterAppDefRepository cheaterAppDefRepository;

  /**
   * 新增外挂应用定义
   */
  public String addCheaterAppDef(Integer appId, String cheaterName, String cheaterMd5,
      String pkgName, String platform) {
    String addFlag = "";
    CheaterApp cheaterApp = cheaterAppDefRepository.checkOnly(appId, cheaterMd5, pkgName, platform);
    if (cheaterApp != null) {
      addFlag = ErrorInfo.AlreadyConfig.getInfo();
    } else {
      cheaterApp = new CheaterApp();
      cheaterApp.setCreateTime(System.currentTimeMillis());
      cheaterApp.setAppId(appId);
      cheaterApp.setCheaterName(cheaterName);
      cheaterApp.setCheaterMd5(cheaterMd5);
      cheaterApp.setCheaterPkgName(pkgName);
      cheaterApp.setPlatform(platform);
      try {
        cheaterAppDefRepository.save(cheaterApp);
      } catch (Exception e) {
        log.error("error", e);
        addFlag = ErrorInfo.CreateFailure.getInfo();
      }
    }
    return addFlag;
  }

  /**
   * 外挂应用定义列表
   */
  public JSONObject cheaterAppList(Integer appId) {
    JSONObject data = new JSONObject();
    JSONArray jsonList = new JSONArray();
    List<CheaterApp> infoList = cheaterAppDefRepository.findByAppId(appId);
    for (CheaterApp cheaterApp : infoList) {
      JSONObject info = new JSONObject();
      info.put("creat_time",
          TimeParse.Long2StrTime(cheaterApp.getCreateTime(), "yyyy-MM-dd HH:mm:ss"));
      info.put("on_off", cheaterApp.getOnOff());
      info.put("cheater_app_id", cheaterApp.getCheaterAppId());
      info.put("cheater_md5", cheaterApp.getCheaterMd5());
      info.put("cheater_name", cheaterApp.getCheaterName());
      info.put("cheater_pkg_name", cheaterApp.getCheaterPkgName());
      info.put("platform", cheaterApp.getPlatform());
      jsonList.add(info);
    }
    data.put("cheaters_list", jsonList);

    return data;
  }

  /**
   * 删除外挂应用定义
   */
  public boolean deleteCheaterApp(Integer appId, List<Integer> cheaterAppIds) {
    boolean delFlag = false;
    int del = cheaterAppDefRepository
        .updateDel(appId, cheaterAppIds.toArray(new Integer[cheaterAppIds.size()]));
    if (del > 0) {
      delFlag = true;
    }
    return delFlag;
  }

  /**
   * 启用／关闭外挂应用定义
   */
  public boolean switchCheaterApp(Integer appId, Integer onOff, List<Integer> cheaterAppIds) {
    boolean switchFlag = false;
    int sw = cheaterAppDefRepository
        .updateOnOff(appId, onOff, cheaterAppIds.toArray(new Integer[cheaterAppIds.size()]));
    if (sw > 0) {
      switchFlag = true;
    }
    return switchFlag;
  }


}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.CheaterTrait;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.CheaterTraitDefRepository;
import com.bangcle.service.CheaterTraitDefService;
import com.bangcle.util.TimeParse;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/1/16.
 */
@Slf4j
@Service
public class CheaterTraitDefServiceImpl implements CheaterTraitDefService {

  @Autowired
  CheaterTraitDefRepository cheaterTraitDefRepository;

  /**
   * 新增外挂特征定义
   */
  public String addCheaterTraitDef(Integer appId, String cheaterName, String cheaterTrait,
      String platform) {
    String addFlag = "";

    CheaterTrait cheaterTraitClass = cheaterTraitDefRepository
        .checkOnly(appId, cheaterTrait, platform);
    if (cheaterTraitClass != null) {
      addFlag = ErrorInfo.AlreadyConfig.getInfo();
    } else {
      cheaterTraitClass = new CheaterTrait();
      cheaterTraitClass.setCreateTime(System.currentTimeMillis());
      cheaterTraitClass.setAppId(appId);
      cheaterTraitClass.setCheaterName(cheaterName);
      cheaterTraitClass.setCheaterTrait(cheaterTrait);
      cheaterTraitClass.setPlatform(platform);
      try {
        cheaterTraitDefRepository.save(cheaterTraitClass);
      } catch (Exception e) {
        log.error("error", e);
        addFlag = ErrorInfo.CreateFailure.getInfo();
      }
    }
    return addFlag;
  }

  /**
   * 外挂特征定义列表
   */
  public JSONObject cheaterTraitList(Integer appId) {
    JSONObject data = new JSONObject();
    JSONArray jsonList = new JSONArray();
    List<CheaterTrait> infoList = cheaterTraitDefRepository.findByAppId(appId);
    for (CheaterTrait cheaterTrait : infoList) {
      JSONObject info = new JSONObject();
      info.put("creat_time",
          TimeParse.Long2StrTime(cheaterTrait.getCreateTime(), "yyyy-MM-dd HH:mm:ss"));
      info.put("on_off", cheaterTrait.getOnOff());
      info.put("cheater_trait", cheaterTrait.getCheaterTrait());
      info.put("cheater_name", cheaterTrait.getCheaterName());
      info.put("cheater_trait_id", cheaterTrait.getCheaterTraitId());
      info.put("platform", cheaterTrait.getPlatform());
      jsonList.add(info);
    }
    data.put("trait_list", jsonList);

    return data;
  }

  /**
   * 删除外挂特征定义
   */
  public boolean deleteCheaterTrait(Integer appId, List<Integer> traitIds) {
    boolean delFlag = false;
    int del = cheaterTraitDefRepository
        .updateDel(appId, traitIds.toArray(new Integer[traitIds.size()]));
    if (del > 0) {
      delFlag = true;
    }
    return delFlag;
  }

  /**
   * 启用／关闭外挂特征定义
   */
  public boolean switchCheaterTrait(Integer appId, Integer onOff, List<Integer> traitIds) {
    boolean switchFlag = false;
    int sw = cheaterTraitDefRepository
        .updateOnOff(appId, onOff, traitIds.toArray(new Integer[traitIds.size()]));
    if (sw > 0) {
      switchFlag = true;
    }
    return switchFlag;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ConfigureDevList;
import com.bangcle.entity.ConfigureDevListInstruction;
import com.bangcle.repository.ConfigureDevListInstructionRepo;
import com.bangcle.repository.ConfigureDevListRepository;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.ConfigureDevListService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.WildcardQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class ConfigureDevListServiceImpl implements ConfigureDevListService {

  @Autowired
  private ConfigureDevListRepository configureDevListRepository;
  @Autowired
  private ConfigureDevListInstructionRepo configureDevListInstructionRepo;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private EsRepository es;

  @Override
  public JSONObject create(Integer agentId, String type, String value, String option, String optionValue, int status,
      int isBlackOrWhite) {
    JSONObject jsonObject = new JSONObject();
    value = value.trim();
    long count = configureDevListRepository.countUnique(agentId, type, value);
    log.info("count {}", count);
    if (count > 0) {
      List<ConfigureDevList> configureDevLists1 = configureDevListRepository.search(agentId, type, value);
      ConfigureDevList configureDevList = null;
      if (configureDevLists1.size() > 0) {
        configureDevList = configureDevLists1.get(0);
      }
      jsonObject.put("code", 1);
      String msg = value;
      if (configureDevList != null) {
        int whiteOrBlack = configureDevList.getWhiteOrBlack();
        if (whiteOrBlack == 1) {
          msg += " 已经在黑名单添加过，无法重复添加";
        } else {
          msg += " 已经在白名单添加过，无法重复添加";
        }
      }
      jsonObject.put("code", 1);
      jsonObject.put("msg", msg);
      return jsonObject;
    }
    ConfigureDevList configureDevList = new ConfigureDevList(agentId, type, value, option, optionValue, status, isBlackOrWhite);
    if ("imei".equals(type.toLowerCase())) {
      JSONArray dataListJsonArray = getUdidArray(agentId, value);
      String udidString = dataListJsonArray.toString();
      configureDevList.setUdidString(udidString);
      log.info("{}", dataListJsonArray);
    }

    configureDevListRepository.save(configureDevList);
    return jsonObject;
  }

  @Override
  public JSONObject search(Integer agentId, String type, String value, Integer isBlackOrWhite) {
    List<ConfigureDevList> configureDevLists = new ArrayList<>();
    if (type == null || value == null || "".equals(type) || "".equals(value)) {
      configureDevLists = configureDevListRepository.search(agentId, isBlackOrWhite);
    } else {
      configureDevLists = configureDevListRepository.search(agentId, type, value, isBlackOrWhite);
    }
    JSONArray newDatalistArray = new JSONArray();
    for (ConfigureDevList configureDevList: configureDevLists) {
      JSONObject newJsonObject = new JSONObject();
      newJsonObject.put("id", configureDevList.getId());
      newJsonObject.put("option", configureDevList.getOption());
      newJsonObject.put("option_value", configureDevList.getOptionValue());
      newJsonObject.put("status", configureDevList.getStatus());
      newJsonObject.put("type", configureDevList.getType());
      newJsonObject.put("value", configureDevList.getValue());
      newDatalistArray.add(newJsonObject);
    }

    JSONObject result = new JSONObject();
    result.put("datalist", newDatalistArray);
    return result;
  }

  @Override
  public boolean updateStatus(Integer agentId, List<Integer> ids, int status) {
    try {
      configureDevListRepository.updateStatus(agentId, ids, status);
    } catch (Exception e) {
      log.error("{}", e);
      return  false;
    }

    return true;
  }

  @Override
  public void delete(Integer agentId,  List<Integer> ids) {
    configureDevListRepository.deleteInIds(agentId, ids);
  }

  @Override
  public boolean updateRule(Integer agentId, Integer id, String option, String optionValue) {
    configureDevListRepository.updateRule(agentId, id ,option, optionValue);
    return true;
  }

  @Override
  public boolean updateInstruction(Integer agentId, String optionValue) {
    List<ConfigureDevListInstruction> configureDevListInstructions = configureDevListInstructionRepo.findByAgentId(agentId);
    ConfigureDevListInstruction instruction = null;
    if (configureDevListInstructions.isEmpty()) {
      // 没有创建
      instruction = new ConfigureDevListInstruction();
      instruction.setAgentId(agentId);
      instruction.setValue(optionValue);
      configureDevListInstructionRepo.save(instruction);
    } else {
      // 更新
      instruction = configureDevListInstructions.get(0);
      instruction.setValue(optionValue);
      configureDevListInstructionRepo.save(instruction);
    }
    return true;
  }

  @Override
  public String getInstruction(Integer agentId) {
    List<ConfigureDevListInstruction> configureDevListInstructions = configureDevListInstructionRepo.findByAgentId(agentId);
    ConfigureDevListInstruction instruction = null;
    if (configureDevListInstructions.isEmpty()) {
      instruction = new ConfigureDevListInstruction();
      instruction.setAgentId(agentId);
      instruction.setValue("请勿使用非法设备！");
      configureDevListInstructionRepo.save(instruction);
    } else {
      instruction = configureDevListInstructions.get(0);
    }
    return  instruction.getValue();
  }

  @Override
  public JSONObject batchCreate(Integer agentId, JSONArray values, String option, int status,
      int isBlackOrWhite) {
    JSONObject jsonObject = new JSONObject();
    List<ConfigureDevList> configureDevLists = new ArrayList<>();
    for (Object object: values) {
      JSONObject veJsonObject = (JSONObject) object;
      String type = veJsonObject.getString("type");
      String value = veJsonObject.getString("value");
      long count = configureDevListRepository.countUnique(agentId, type, value);
      log.info("count {}", count);
      if (count > 0) {
        List<ConfigureDevList> configureDevLists1 = configureDevListRepository.search(agentId, type, value);
        ConfigureDevList configureDevList = null;
        if (configureDevLists1.size() > 0) {
          configureDevList = configureDevLists1.get(0);
        }
        jsonObject.put("code", 1);
        String msg = value;
        if (configureDevList != null) {
          int whiteOrBlack = configureDevList.getWhiteOrBlack();
          if (whiteOrBlack == 1) {
            msg += " 已经在黑名单添加过，无法重复添加";
          } else {
            msg += " 已经在白名单添加过，无法重复添加";
          }
        }
        jsonObject.put("msg", msg);
        return jsonObject;
      }
      ConfigureDevList configureDevList = new ConfigureDevList(agentId, type, value, option, "", status, isBlackOrWhite);
      if ("imei".equals(type.toLowerCase())) {
        JSONArray dataListJsonArray = getUdidArray(agentId, value);
        String udidString = dataListJsonArray.toString();
        configureDevList.setUdidString(udidString);
        log.info("{}", dataListJsonArray);
      }
      configureDevLists.add(configureDevList);
    }

    configureDevListRepository.save(configureDevLists);
    jsonObject.put("code", 0);
    return jsonObject;
  }

  @Override
  public JSONArray filterValue(String value) {
    Set<String> set = new HashSet<>();
    if (value == null) {
      return null;
    }
    value = value.trim();
    if ("".equals(value)) {
      return null;
    }
    String[] valueArray = value.split("\\s+");
    List<String> values = Arrays.asList(valueArray);
    JSONArray jsonArray = new JSONArray();
    for (String string : values) {
      int length = string.length();
      if (length < 36 && length != 15) {
        return new JSONArray();
      } else {
        set.add(string);
      }
    }
    for (String str : set) {
      String type = (str.length() == 15 ? "IMEI" : "UDID");
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("type", type);
      jsonObject.put("value", str);
      jsonArray.add(jsonObject);
    }

    return jsonArray;
  }

  /**
   * 通过imei获取udid的集合.
   * */
  private JSONArray getUdidArray(Integer agentId, String value) {
    JSONArray dataListJsonArray = new JSONArray();
    try {
      BoolQueryBuilder boolQueryBuilder = commonBaseService.filterQueryBuilder("" + agentId, null, null, null,
          null, 0L, System.currentTimeMillis(), null);
      WildcardQueryBuilder wildcardQueryBuilder = QueryBuilders.wildcardQuery("imei", value);
      boolQueryBuilder.must(wildcardQueryBuilder);
      SearchResponse searchResponse = es.client
          .prepareSearch(commonBaseService.getDevIndexName())
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(boolQueryBuilder)
          .addSort(EsFieldModel.TIME, SortOrder.DESC)
          .setFrom(0)
          .setSize(100)
          .execute().actionGet();
      SearchHits searchHits = searchResponse.getHits();
      SearchHit[] hits = searchHits.getHits();

      for (int i = 0; i < hits.length; i++) {
        Map<String, Object> map = hits[i].getSourceAsMap();
        //存入id
        dataListJsonArray.add(map.get("udid"));
      }
    } catch (Exception e) {
      log.error("{}", e);
    }

    return dataListJsonArray;
  }

}
package com.bangcle.service.impl;


import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ConfigureEmulatorList;
import com.bangcle.repository.ConfigureEmulatorListRepository;
import com.bangcle.service.ConfigureEmulatorListService;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class ConfigureEmulatorListServiceImpl implements ConfigureEmulatorListService {
  @Autowired
  private ConfigureEmulatorListRepository configureEmulatorListRepository;

  @Override
  public JSONObject list(Integer agentId) {
    JSONObject data = new JSONObject();
    List<ConfigureEmulatorList> configureEmulatorListLists = configureEmulatorListRepository.findByAgentIdOrderByIdAsc(agentId);
    if (configureEmulatorListLists.isEmpty()) {
      List<ConfigureEmulatorList> newLists = new ArrayList<>();
      Map<String, String> map = emulatorMap();
      for (Map.Entry<String, String> entry : map.entrySet()) {
        String feature = entry.getKey();
        String name = entry.getValue();
        ConfigureEmulatorList configureEmulatorList = new ConfigureEmulatorList();
        configureEmulatorList.setStatus(0);
        configureEmulatorList.setName(name);
        configureEmulatorList.setFeature(feature);
        configureEmulatorList.setAgentId(agentId);
        newLists.add(configureEmulatorList);
      }
      configureEmulatorListRepository.save(newLists);
      configureEmulatorListLists = configureEmulatorListRepository.findByAgentIdOrderByIdAsc(agentId);
    }
    JSONArray newDatalistArray = new JSONArray();
    for (ConfigureEmulatorList configureEmulatorList: configureEmulatorListLists) {
      JSONObject newJsonObject = new JSONObject();
      newJsonObject.put("id", configureEmulatorList.getId());
      newJsonObject.put("name", configureEmulatorList.getName());
      newJsonObject.put("status", configureEmulatorList.getStatus());
      newDatalistArray.add(newJsonObject);
    }
    data.put("datalist", newDatalistArray);
    return data;
  }

  @Override
  public boolean updateStatus(Integer agentId, Integer id, int status) {
    configureEmulatorListRepository.updateStatus(agentId, id, status);
    return true;
  }

  /**
   * feature map to name.
   *       put("google", "AndroidSDK模拟器");
   put("genymotion", "Genymotion模拟器");
   put("tiantian", "靠谱天天模拟器");
   put("nox", "夜神模拟器");
   put("droid4x", "海马玩模拟器");
   put("microvirt", "逍遥安卓模拟器");
   put("bluestacks", "蓝叠模拟器");
   put("itools", "ITools模拟器");
   put("mumu", "网易MuMu");
   put("andy", "Andy模拟器");
   put("momo", "MOMO模拟器");
   * */
  private Map<String, String> emulatorMap() {
    Map<String, String> map = new HashMap<>();
    map.put("google", "google");
    map.put("genymotion", "genymotion");
    map.put("tiantian", "tiantian");
    map.put("nox", "nox");
    map.put("droid4x", "droid4x");
    map.put("microvirt", "microvirt");
    map.put("bluestacks", "bluestacks");
    map.put("itools", "itools");
    map.put("mumu", "mumu");
    map.put("andy", "andy");
    map.put("momo", "momo");
    return map;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ConfigureInjectList;
import com.bangcle.repository.ConfigureInjectListRepository;
import com.bangcle.service.ConfigureEmulatorListService;
import com.bangcle.service.ConfigureInjectListService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class ConfigureInjectListServiceImpl implements ConfigureInjectListService {

  @Autowired
  private ConfigureInjectListRepository configureInjectListRepository;

  @Override
  public JSONObject create(Integer agentId, String name, String feature, int status,
      int isBlackOrWhite) {
    JSONObject dataObject = new JSONObject();
    name = name.trim();
    feature = feature.trim();
    long size = configureInjectListRepository.countUnique(agentId, feature);
    // List<ConfigureInjectList> configureInjectLists = configureInjectListRepository.findByAgentIdAndNameAndFeature(agentId, name, feature);
    if (size > 0) {
      dataObject.put("code", 1);
      dataObject.put("msg", "不允许重复创建");
      return dataObject;
    }
    ConfigureInjectList configureInjectList = new ConfigureInjectList();
    configureInjectList.setAgentId(agentId);
    configureInjectList.setFeature(feature);
    configureInjectList.setName(name);
    configureInjectList.setStatus(status);
    configureInjectList.setWhiteOBlack(isBlackOrWhite);
    configureInjectListRepository.save(configureInjectList);
    dataObject.put("code", 0);
    return dataObject;
  }

  @Override
  public JSONObject list(Integer agentId) {
    List<ConfigureInjectList> whiteConfigureInjectLists = configureInjectListRepository
        .findByAgentIdAndWhiteOBlackAndIsDeletedOrderByIdDesc(agentId, 0, 0);
    List<ConfigureInjectList> blackConfigureInjectLists = configureInjectListRepository
        .findByAgentIdAndWhiteOBlackAndIsDeletedOrderByIdDesc(agentId, 1, 0);
    JSONObject jsonObject = new JSONObject();
    jsonObject.put("datalist_black", blackConfigureInjectLists);
    jsonObject.put("datalist_white", whiteConfigureInjectLists);
    return jsonObject;
  }

  @Override
  public boolean updateStatus(Integer agentId, List<Integer> ids, int status) {
    configureInjectListRepository.updateStatus(agentId, ids, status);
    return true;
  }

  @Override
  public boolean deleteInIds(Integer agentId, List<Integer> ids) {
    configureInjectListRepository.deleteInIds(agentId, ids);
    return true;
  }
}
package com.bangcle.service.impl;

import static com.bangcle.repository.EsRepository.client;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.get.GetRequestBuilder;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.max.Max;
import org.elasticsearch.search.aggregations.metrics.max.MaxAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.min.Min;
import org.elasticsearch.search.aggregations.metrics.min.MinAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:31 17-12-1.
 */
@Service
@Slf4j
public class CrashInfoServiceImpl implements CrashInfoService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EsRepository es;

  /**
   * 崩溃类型/设备排行.
   */
  @Override
  public JSONObject crashTypeSort(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      String strSortBy, String strSortField, Long startTime, Long endTime, Integer page,
      Integer size) {
    //获取对应汇聚条件的次数和设备数[{filed:北京,count:1739,dev_count:386},{filed:上海,count:739,dev_count:86},……]
    JSONArray jsonArray = statCountByField(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsInfo,
        listAppInfo, startTime, endTime, null, EsFieldModel.CRASH_REASON,
        PubString.lsize, strSortField, strSortBy);
    List<Map<String, Object>> mapList = new ArrayList<>();
    for (int i = (int) ((page - 1) * size); i < (page * size) && i < jsonArray.size(); i++) {
      JSONObject job = jsonArray.getJSONObject(i);
      Map<String, Object> map = new HashMap<>();
      map.put("data_type", job.get("data_type"));
      map.put("count", job.get("count"));
      map.put("dev_count", job.get("dev_count"));
      /*//构造过滤条件
      BoolQueryBuilder boolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, listManufacturer, listLocation, listOsInfo, listAppInfo,
              startTime, endTime, null);
      //获得最近一次崩溃时间（时间戳）
      double lastTime = commonAggService.getTime(commonBaseService.getCrashIndexName(),
          commonBaseService.getIndexTypeName(), boolQueryBuilder, EsFieldModel.TIME, true,
          EsFieldModel.CRASH_REASON, job.getString("field"), startTime, endTime, false);
      map.put("last_time", sdf.format(new Date(Math.round(lastTime))));
      //获得第一次崩溃时间（时间戳）
      double firstTime = commonAggService.getTime(commonBaseService.getCrashIndexName(),
          commonBaseService.getIndexTypeName(), boolQueryBuilder, EsFieldModel.TIME, false,
          EsFieldModel.CRASH_REASON, job.getString("field"), startTime, endTime, false);
      map.put("first_time", sdf.format(new Date(Math.round(firstTime))));*/
      map.put("first_time", job.get("first_time"));
      map.put("last_time", job.get("last_time"));
      mapList.add(map);
    }
    //判断根据什么排序
    /*if ("count".equals(strSortField)) {
      commonAggService.sortList(mapList, strSortBy, "count");
    }
    if ("dev_count".equals(strSortField)) {
      commonAggService.sortList(mapList, strSortBy, "dev_count");
    }*/
    /*JSONArray arrayResult = new JSONArray();
    for (int i = (int) ((page - 1) * size); i < (page * size) && i < mapList.size(); i++) {
      arrayResult.add(JSONObject.parseObject(JSON.toJSONString(mapList.get(i))));
    }*/
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    data.put("total", jsonArray.size());
    return data;
  }


  /**
   * 具体崩溃类型下的崩溃趋势.
   */
  @Override
  public JSONObject crashTypeOneTrend(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      Long startTime, Long endTime, String crashType) {

    //过滤条件：query
    BoolQueryBuilder bqb = commonBaseService
        .filterQueryBuilder(appId, listManufacturer, listLocation, listOsInfo, listAppInfo,
            startTime, endTime, null);
    Map<String, Object> filterMap = new HashMap<>();
    filterMap.put(EsFieldModel.CRASH_REASON, crashType);
    commonBaseService.filterQueryBuilder(filterMap, bqb);

    //汇聚条件：按时间汇聚，统计崩溃次数
    String dateHistogramName = "count_every_time";
    DateHistogramAggregationBuilder dateHab = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME)
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    List<String> dateList = null;
    boolean sameDay = TimeParse.isSameDay(startTime, endTime);
    if (sameDay) {
      //小时
      dateList = TimeParse.getHourList();
      dateHab.dateHistogramInterval(DateHistogramInterval.HOUR);
    } else {
      dateList = TimeParse.getDateList(startTime, endTime);
      //天
      dateHab.dateHistogramInterval(DateHistogramInterval.DAY);
    }
    //去重条件：统计设备数
    String udidCardinalityName = "count_distinct_udid";
    CardinalityAggregationBuilder udidCab = AggregationBuilders
        .cardinality(udidCardinalityName).field(EsFieldModel.UDID);
    dateHab.subAggregation(udidCab);

    //去重条件：统计设备数
    String udidTotalCardinalityName = "count_distinct_udid_total";
    CardinalityAggregationBuilder udidTotalCab = AggregationBuilders
        .cardinality(udidTotalCardinalityName).field(EsFieldModel.UDID);

    log.info("crashTypeOneTrend dateList =  {}", dateList);

    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("coord_list", dateList);
      data.put("crash_count_list", new long[dateList.size()]);
      data.put("crash_dev_count_list", new long[dateList.size()]);
      data.put("crash_total_count", 0);
      data.put("crash_dev_total_count", 0);
      return data;
    }

    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setSize(0)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(dateHab)
        .addAggregation(udidTotalCab);

    //调试
    //log.info("searchRequestBuilder === {}", searchRequestBuilder);

    // 统计每天/每小时的次数和设备数目.
    SearchResponse searchResponse = searchRequestBuilder.get();

    Map<String, Map<String, Long>> countMap = new HashMap<>();
    Histogram histogram1 = searchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entry : histogram1.getBuckets()) {
      long count = entry.getDocCount();
      Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
      long devCount = cardinality.getValue();
      String historgramKey = TimeParse.timeSplit(sameDay, entry.getKeyAsString());
      Map<String, Long> mapCount = new HashMap<>();
      mapCount.put("count", count);
      mapCount.put("dev_count", devCount);
      countMap.put(historgramKey, mapCount);
    }

    List<Long> countList = new ArrayList<>();
    List<Long> devCountList = new ArrayList<>();
    for (String date : dateList) {
      long count = 0L;
      long devCount = 0L;
      if (countMap.containsKey(date)) {
        count = countMap.get(date).get("count");
        devCount = countMap.get(date).get("dev_count");
      }
      countList.add(count);
      devCountList.add(devCount);
    }

    //崩溃次数和崩溃设备数趋势 {date_list:[2017-12-01,2017-12-02,……],count_list:[1387,3445,……],dev_count_list:[1129,2374,……]}
    Cardinality totalDevCount = searchResponse.getAggregations().get(udidTotalCardinalityName);
    JSONObject data = new JSONObject();
    data.put("coord_list", dateList);
    data.put("crash_count_list", countList);
    data.put("crash_dev_count_list", devCountList);
    data.put("crash_total_count", searchResponse.getHits().getTotalHits());
    data.put("crash_dev_total_count", totalDevCount.getValue());

    return data;
  }


  /**
   * 崩溃占比top5(设备类型、地域、系统版本、应用版本)崩溃次数/崩溃设备数.
   */
  @Override
  public JSONObject crashTypeOneDist(String appId, List<String> listAppInfo,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsInfo,
      Long startTime, Long endTime, String crashType, String strCountType, String strDistType) {

    //过滤条件：query
    BoolQueryBuilder bqb = commonBaseService
        .filterQueryBuilder(appId, listManufacturer, listLocation, listOsInfo, listAppInfo,
            startTime, endTime, null);
    Map<String, Object> filterMap = new HashMap<>();
    filterMap.put(EsFieldModel.CRASH_REASON, crashType);
    commonBaseService.filterQueryBuilder(filterMap, bqb);

    //判断汇聚分组条件
    TermsAggregationBuilder termsAB = null;
    String termsName = "count_by_field";
    if (strDistType.equals("model")) {
      termsAB = AggregationBuilders.terms(termsName).field(EsFieldModel.MANUFACTURER)
          .order(BucketOrder.count(false));
    } else if (strDistType.equals("location")) {
      termsAB = AggregationBuilders.terms(termsName).field(EsFieldModel.LOCATION)
          .order(BucketOrder.count(false));
    } else if (strDistType.equals("os_version")) {
      termsAB = AggregationBuilders.terms(termsName).field(EsFieldModel.OS_INFO)
          .order(BucketOrder.count(false));
    } else if (strDistType.equals("app_version")) {
      termsAB = AggregationBuilders.terms(termsName).field(EsFieldModel.APP_INFO)
          .order(BucketOrder.count(false));
    }

    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);

    if (termsAB == null || indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("datalist", new JSONArray());
      return data;
    }
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setSize(0)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb);

    //去重条件：统计去重设备总数
    String udidTotalCardinalityName = "count_distinct_udid_total";
    //不同分组下的udid去重
    String udidCardinalityName = "count_distinct_udid";
    //统计设备数，默认统计崩溃总数
    if (strCountType.equals("crash_dev_count")) {
      CardinalityAggregationBuilder udidCAB = AggregationBuilders
          .cardinality(udidCardinalityName).field(EsFieldModel.UDID);
      termsAB.subAggregation(udidCAB);

      CardinalityAggregationBuilder udidTotalCAB = AggregationBuilders
          .cardinality(udidTotalCardinalityName).field(EsFieldModel.UDID);
      searchRequestBuilder.addAggregation(udidTotalCAB);
      termsAB.order(BucketOrder.aggregation(udidCardinalityName, false));
    }

    //只取top5
    termsAB.size(5);
    termsAB.shardSize(PubString.shardSize);
    searchRequestBuilder.addAggregation(termsAB);
    //调试
    //log.info("crashTypeOneDist === {}", searchRequestBuilder);

    //获取分组后的统计结果
    SearchResponse searchResponse = searchRequestBuilder.get();
    Terms countByField = searchResponse.getAggregations().get(termsName);
    JSONArray dataList = new JSONArray();
    if (strCountType.equals("crash_dev_count")) {
      Cardinality totalDevCount = searchResponse.getAggregations().get(udidTotalCardinalityName);
      for (Terms.Bucket bucket : countByField.getBuckets()) {
        Cardinality devCount = bucket.getAggregations().get(udidCardinalityName);
        JSONObject json = new JSONObject();
        json.put("count", devCount.getValue());
        json.put("type", bucket.getKey());
        json.put("percent",
            commonBaseService.getRate(devCount.getValue(), totalDevCount.getValue()));
        dataList.add(json);
      }
    } else {
      long totalCount = searchResponse.getHits().getTotalHits();
      for (Terms.Bucket bucket : countByField.getBuckets()) {
        JSONObject json = new JSONObject();
        json.put("count", bucket.getDocCount());
        json.put("type", bucket.getKey());
        json.put("percent", commonBaseService.getRate(bucket.getDocCount(), totalCount));
        dataList.add(json);
      }
    }

    JSONObject data = new JSONObject();
    data.put("datalist", dataList);
    return data;
  }

  /**
   * 崩溃排行_崩溃列表.
   */
  public JSONObject crashTypeOneInfoList(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Long startTime, Long endTime, String crashType, int page, int size) {

    //过滤条件：query
    BoolQueryBuilder boolQB = commonBaseService
        .filterQueryBuilder(appId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null);
    Map<String, Object> filterMap = new HashMap<>();
    filterMap.put(EsFieldModel.CRASH_REASON, crashType);
    commonBaseService.filterQueryBuilder(filterMap, boolQB);

    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("datalist", new JSONArray());
      data.put("total", 0);
      return data;
    }

    page = page > 0 ? page : 1;
    size = size > 0 ? size : 20;
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setFrom((page - 1) * size)
        .setSize(size)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQB)
        .addSort(EsFieldModel.TIME, SortOrder.DESC);

    //调试
    //log.info("crashTypeOneInfoList === {}", searchRequestBuilder);
    SearchResponse searchResponse = searchRequestBuilder.get();

    JSONArray dataList = new JSONArray();
    SearchHits searchHits = searchResponse.getHits();
    Map<String, Object> mapSource = new HashMap<String, Object>();
    for (SearchHit info : searchHits.getHits()) {
      mapSource = info.getSourceAsMap();
      JSONObject json = new JSONObject();
      long time = Long.parseLong(mapSource.get(EsFieldModel.TIME_STAMP).toString());
      json.put("app_version", mapSource.get(EsFieldModel.APP_VERSION));
      json.put("crash_time", TimeParse.Long2StrTime(time, "yyyy-MM-dd HH:mm:ss"));
      json.put("ip", mapSource.get(EsFieldModel.CLIENT_IP));
      //json.put("ip_lan",
      //    mapSource.get(EsFieldModel.IP_LAN) == null ? "" : mapSource.get(EsFieldModel.IP_LAN));
      if (mapSource.containsKey(EsFieldModel.IMEI)) {
        json.put("imei", mapSource.get(EsFieldModel.IMEI) == null ? "NoPermission"
            : PubFunc.jsonArray2String(mapSource.get(EsFieldModel.IMEI).toString()));
      }else {
        json.put("imei", "NoPermission");
      }
      json.put("location", mapSource.get(EsFieldModel.LOCATION));
      json.put("model", mapSource.get(EsFieldModel.MANUFACTURER));
      json.put("network", mapSource.get(EsFieldModel.NETWORK));
      json.put("os_version", mapSource.get(EsFieldModel.OS_INFO));
      json.put("self_md5", mapSource.get(EsFieldModel.SELF_MD5));
      json.put("udid", mapSource.get(EsFieldModel.UDID));
      json.put("_index", info.getIndex());
      json.put("_type", info.getType());
      json.put("_id", info.getId());
      dataList.add(json);
    }

    JSONObject data = new JSONObject();
    data.put("datalist", dataList);
    data.put("total", searchHits.getTotalHits());
    return data;
  }

  @Override
  public JSONObject crashDevSort(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strSortBy, String strSortField, Long page, Long size, Long startTime, Long endTime)
      throws InterruptedException {
    JSONObject jsonObject = commonAggService
        .getDevDetail(commonBaseService.getCrashIndexName(), appId, listManufacturer, listLocation,
            listOsVersion, listAppVersion, startTime, endTime, null, null,
            EsFieldModel.CRASH_REASON,
            true, strSortBy, strSortField, page, size, false);
    JSONArray jsonArray = (JSONArray) jsonObject.get("data_list");
    List<Map<String, Object>> listResult = new ArrayList<>();
    //分页
    for (int i = 0; i < jsonArray.size(); i++) {
      JSONObject job = jsonArray.getJSONObject(i);
      Map<String, Object> map = new HashMap<>();
      map.put("app_name", job.get(EsFieldModel.APP_NAME));
      if (job.get(EsFieldModel.APP_INFO) == null || String.valueOf(job.get(EsFieldModel.APP_INFO))
          .isEmpty()) {
        map.put("app_version", "");
      } else {
        map.put("app_version", job.get(EsFieldModel.APP_VERSION));
      }
      map.put("location", job.get(EsFieldModel.LOCATION));
      map.put("ip", job.get(EsFieldModel.CLIENT_IP));
      //map.put("ip_lan", job.get(EsFieldModel.IP_LAN) == null ? "" : job.get(EsFieldModel.IP_LAN));
      if (job.containsKey(EsFieldModel.IMEI)) {
        map.put("imei", job.get(EsFieldModel.IMEI) == null ? "NoPermission"
            : PubFunc.jsonArray2String(job.getString(EsFieldModel.IMEI)));
      }else {
        map.put("imei", "NoPermission");
      }
      map.put("model", job.get(EsFieldModel.MANUFACTURER));
      map.put("network", job.get(EsFieldModel.NETWORK));
      map.put("os_version", job.get(EsFieldModel.OS_VERSION));
      map.put("platform", job.get(EsFieldModel.PLATFORM));
      map.put("last_time", job.get("last_time"));
      map.put("udid", job.get(EsFieldModel.UDID));
      map.put("count", job.get("count"));
      map.put("data_type_count", job.get("data_type_count"));
      listResult.add(map);
    }
    JSONObject data = new JSONObject();
    data.put("datalist", listResult);
    data.put("total", jsonObject.get("count"));
    return data;
  }

  /**
   * 具体设备的崩溃趋势.
   */
  public JSONObject crashDevOneTrend(String appId, String udId, Long startTime, Long endTime) {

    //过滤条件：query
    BoolQueryBuilder boolQB = commonBaseService
        .filterQueryBuilder(appId, null, null, null, null,
            startTime, endTime, null);
    Map<String, Object> filterMap = new HashMap<>();
    filterMap.put(EsFieldModel.UDID, udId);
    commonBaseService.filterQueryBuilder(filterMap, boolQB);

    //汇聚条件：按时间汇聚，统计崩溃次数
    String dateHistogramName = "count_every_time";
    DateHistogramAggregationBuilder dateHAB = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME)
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    List<String> dateList = null;
    boolean sameDay = TimeParse.isSameDay(startTime, endTime);
    if (sameDay) {
      //小时
      dateList = TimeParse.getHourList();
      dateHAB.dateHistogramInterval(DateHistogramInterval.HOUR);
    } else {
      dateList = TimeParse.getDateList(startTime, endTime);
      //天
      dateHAB.dateHistogramInterval(DateHistogramInterval.DAY);
    }
    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("coord_list", dateList);
      data.put("crash_count_list", new long[dateList.size()]);
      return data;
    }
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setSize(0)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQB)
        .addAggregation(dateHAB);
    //调试
    //log.info("crashDevOneTrend === {}", searchRequestBuilder);
    SearchResponse searchResponse = searchRequestBuilder.get();
    Map<String, Long> countMap = new HashMap<>();
    Histogram histogram1 = searchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entry : histogram1.getBuckets()) {
      long count = entry.getDocCount();
      String historgramKey = TimeParse.timeSplit(sameDay, entry.getKeyAsString());
      countMap.put(historgramKey, count);
    }
    log.info("countMap = {}", countMap);
    List<Long> countList = new ArrayList<>();
    for (String date : dateList) {
      long count = 0L;
      if (countMap.containsKey(date)) {
        count = countMap.get(date);
      }
      countList.add(count);
    }
    JSONObject data = new JSONObject();
    data.put("coord_list", dateList);
    data.put("crash_count_list", countList);
    return data;
  }

  /**
   * 具体设备的崩溃信息列表.
   */
  public JSONObject crashDevOneInfoList(String appId, String udId, Long startTime, Long endTime,
      int page, int size) {
    //过滤条件：query
    BoolQueryBuilder boolQB = commonBaseService
        .filterQueryBuilder(appId, null, null, null, null,
            startTime, endTime, null);
    Map<String, Object> filterMap = new HashMap<>();
    filterMap.put(EsFieldModel.UDID, udId);
    commonBaseService.filterQueryBuilder(filterMap, boolQB);

    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      JSONObject data = new JSONObject();
      data.put("datalist", new JSONArray());
      data.put("total", 0);
      return data;
    }

    page = page > 0 ? page : 1;
    size = size > 0 ? size : 20;
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setFrom((page - 1) * size)
        .setSize(size)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQB)
        .addSort(EsFieldModel.TIME, SortOrder.DESC);

    //调试
    //log.info("crashDevOneInfoList === {}", searchRequestBuilder);
    SearchResponse searchResponse = searchRequestBuilder.get();

    JSONArray dataList = new JSONArray();
    SearchHits searchHits = searchResponse.getHits();
    Map<String, Object> mapSource = new HashMap<String, Object>();
    for (SearchHit info : searchHits.getHits()) {
      mapSource = info.getSourceAsMap();
      JSONObject json = new JSONObject();
      json.put("app_version", mapSource.get(EsFieldModel.APP_VERSION));
      long time = Long.parseLong(mapSource.get(EsFieldModel.TIME_STAMP).toString());
      json.put("crash_time", TimeParse.Long2StrTime(time, "yyyy-MM-dd HH:mm:ss"));
      json.put("crash_type", mapSource.get(EsFieldModel.CRASH_TYPE));
      json.put("location", mapSource.get(EsFieldModel.LOCATION));
      json.put("model", mapSource.get(EsFieldModel.MANUFACTURER));
      json.put("network", mapSource.get(EsFieldModel.NETWORK));
      json.put("os_version", mapSource.get(EsFieldModel.OS_INFO));
      json.put("self_md5", mapSource.get(EsFieldModel.SELF_MD5));
      if (mapSource.containsKey(EsFieldModel.IMEI)) {
        json.put("imei", mapSource.get(EsFieldModel.IMEI) == null ? "NoPermission"
            : PubFunc.jsonArray2String(mapSource.get(EsFieldModel.IMEI).toString()));
      }else {
        json.put("imei", "NoPermission");
      }
      json.put("udid", mapSource.get(EsFieldModel.UDID));
      json.put("_index", info.getIndex());
      json.put("_type", info.getType());
      json.put("_id", info.getId());
      dataList.add(json);
    }
    JSONObject data = new JSONObject();
    data.put("datalist", dataList);
    data.put("total", searchHits.getTotalHits());
    return data;
  }

  /**
   * 崩溃详情.
   */
  public JSONObject crashInfo(String esId, String esIndex, String esType) {

    JSONObject data = new JSONObject();
    data.put("crash_time", null);
    //data.put("crash_type", null);
    data.put("reason", null);
    data.put("stack", null);
    if (es.exists(esIndex)) {
      GetRequestBuilder getRequestBuilder = es.client.prepareGet(esIndex, esType, esId);
      GetResponse getResponse = getRequestBuilder.execute().actionGet();
      if (getResponse.isExists()) {
        Map<String, Object> mapSource = getResponse.getSourceAsMap();
        JSONObject dataJson = JSON.parseObject(mapSource.get(EsFieldModel.DATA_INFO).toString());
        log.info("dataJson = {}", dataJson);
        long time = Long.parseLong(mapSource.get(EsFieldModel.TIME_STAMP).toString());
        data.put("crash_time", TimeParse.Long2StrTime(time, "yyyy-MM-dd HH:mm:ss"));
        //data.put("crash_type", mapSource.get(EsFieldModel.CRASH_REASON));
        data.put("reason", mapSource.get(EsFieldModel.CRASH_REASON));
        //data.put("reason", mapSource.get(EsFieldModel.CRASH_REASON));
        data.put("stack", dataJson.get(EsFieldModel.CRASH_STACK));
      }
    }
    return data;
  }

  public JSONArray statCountByField(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      String fieldName, long topNum, String strSortField, String strSortBy) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);
    JSONArray dataJsonArray = new JSONArray();
    List<String> indexs = es
        .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);

    //最近崩溃时间
    MaxAggregationBuilder maxAggregationBuilder = AggregationBuilders.max("max_times")
        .field(EsFieldModel.TIME);
    //最远崩溃时间
    MinAggregationBuilder minAggregationBuilder = AggregationBuilders.min("min_times")
        .field(EsFieldModel.TIME);
    //判断升/降序
    Boolean isAsc = true;
    if ("desc".equals(strSortBy)) {
      isAsc = false;
    } else if ("asc".equals(strSortBy)) {
      isAsc = true;
    }
    if (indexExist.length > 0) {
      //udid去重
      String udidCardinalityName = "count_distinct_udid";
      CardinalityAggregationBuilder udidCab = AggregationBuilders
          .cardinality(udidCardinalityName).field(EsFieldModel.UDID);

      String termsName = "count_by_field";
      // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
      long size = topNum > 0L ? topNum : 1000L;
      long shardSize = size * 3;
      TermsAggregationBuilder termsAggregationBuilder = null;

      if ("dev_count".equals(strSortField)) {
        termsAggregationBuilder = AggregationBuilders.terms(termsName)
            .field(fieldName)
            .shardSize((int) shardSize)
            .size((int) size)
            .order(BucketOrder.compound(BucketOrder.aggregation(udidCardinalityName, isAsc)
                , BucketOrder.count(isAsc)))
            .subAggregation(udidCab)
            .subAggregation(maxAggregationBuilder)
            .subAggregation(minAggregationBuilder);
      } else {
        termsAggregationBuilder = AggregationBuilders.terms(termsName)
            .field(fieldName)
            .shardSize((int) shardSize)
            .size((int) size)
            .order(BucketOrder.count(isAsc))
            .subAggregation(udidCab)
            .subAggregation(maxAggregationBuilder)
            .subAggregation(minAggregationBuilder);
      }
      SearchResponse searchResponse = es.client.prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(termsAggregationBuilder)
          .execute()
          .actionGet();

      Terms terms = searchResponse.getAggregations().get(termsName);

      for (Terms.Bucket entry : terms.getBuckets()) {
        long count = entry.getDocCount();
        Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
        String field = entry.getKeyAsString();
        long devCount = cardinality.getValue();
        Max max = entry.getAggregations().get("max_times");
        Min min = entry.getAggregations().get("min_times");
        JSONObject dataJsonObject = new JSONObject();
        dataJsonObject.put("last_time", sdf.format(new Date(Math.round(max.getValue()))));
        dataJsonObject.put("first_time", sdf.format(new Date(Math.round(min.getValue()))));
        dataJsonObject.put("count", count);
        dataJsonObject.put("dev_count", devCount);
        dataJsonObject.put("data_type", field);
        dataJsonArray.add(dataJsonObject);
      }
    }
    return dataJsonArray;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.CrashStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:33 17-12-1.
 */
@Service
@Slf4j
public class CrashStatServiceImpl implements CrashStatService {

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private EsRepository es;


  /**
   * 崩溃分析总数统计.
   */
  @Override
  public JSONObject crashCount(String appId, List<String> listAppVersion,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime) {
    JSONObject data = new JSONObject();
    //获取数量和设备数{count:  ,dev_count: }（启动数据）
    JSONObject jsonData = commonAggService
        .totalCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime, null, false);
    //启动次数
    long longStart = jsonData.getLong("count");
    //对应设备数
    long longStartDev = jsonData.getLong("dev_count");
    data.put("start_count", longStart);
    data.put("start_dev_count", longStartDev);
    //获取数量和设备数{count:  ,dev_count: }（崩溃数据）
    jsonData = commonAggService
        .totalCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime, null, false);
    //崩溃次数
    long longCrash = jsonData.getLong("count");
    //崩溃设备数
    long longCrashDev = jsonData.getLong("dev_count");
    data.put("crash_count", longCrash);
    data.put("crash_dev_count", longCrashDev);
    //构造过滤条件
    BoolQueryBuilder bqb = commonBaseService.filterQueryBuilder(appId, listManufacturer,
        listLocation, listOsVersion, listAppVersion,
        startTime, endTime, null);
    data.put("crash_rate", commonBaseService
        .getPercentRateStr(longCrash, longStart));
    //计算崩溃影响设备率
    if (longStartDev > 0) {
      data.put("crash_user_rate", commonBaseService.getPercentRateStr(longCrashDev, longStartDev));
    } else {
      data.put("crash_user_rate", "0.00%");
    }
    //计算崩溃类型数
    data.put("crash_type_count",
        getSoleCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
            startTime, endTime,
            bqb, EsFieldModel.CRASH_REASON));
    return data;
  }

  /**
   * 崩溃趋势.
   */
  @Override
  public JSONObject crashTrend(String appId, List<String> listAppVersion,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime)
      throws ParseException {
    //获得崩溃次数和设备数趋势 {date_list:[2017-12-01,2017-12-02,……],count_list:[1387,3445,……],dev_count_list:[1129,2374,……]}
    JSONObject jsonData = commonAggService
        .trendCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime,
            null);
    //崩溃次数
    List<Long> listCrashCount = (List<Long>) jsonData.get("count_list");
    //崩溃设备数
    List<Long> listCrashDev = (List<Long>) jsonData.get("dev_count_list");
    JSONObject data = new JSONObject();
    //构造过滤条件
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null);
    data.put("coord_list", jsonData.get("date_list"));
    data.put("crash_count_list", jsonData.get("count_list"));
    data.put("crash_dev_count_list", jsonData.get("dev_count_list"));

    //时间轴
    List<String> listCoord = (List<String>) jsonData.get("date_list");
    jsonData = commonAggService
        .trendCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime,
            null);
    List<Long> listActidevDev = (List<Long>) jsonData.get("dev_count_list");
    List<Long> listAllStart = (List<Long>) jsonData.get("count_list");
    List<Double> listCrashRate = new ArrayList<>();
    List<Double> listCrashUserRate = new ArrayList<>();
    for (int i = 0; i < listActidevDev.size(); i++) {
      if (i < listCrashDev.size() && i < listActidevDev.size() && i < listCrashCount.size()
          && i < listAllStart.size()) {
        listCrashRate.add(commonBaseService.getRate(listCrashDev.get(i), listActidevDev.get(i)));
        listCrashUserRate
            .add(commonBaseService.getRate(listCrashCount.get(i), listAllStart.get(i)));
      }
    }
    //获取版本和对应数量
    Map<String, Map<String, Object>> mapVersion = getCountByTime(
        commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
        boolQueryBuilder, null, startTime, endTime);
    JSONArray jsonArray = new JSONArray();
    //将没有统计到的时间补0
    for (Map.Entry<String, Map<String, Object>> entry : mapVersion.entrySet()) {
      JSONObject jsonObject = new JSONObject();
      List<String> listVersion = new ArrayList<>();
      for (String str : listCoord) {
        if (entry.getValue().containsKey(str)) {
          listVersion.add(entry.getValue().get(str).toString());
        } else {
          listVersion.add("0");
        }
      }
      jsonObject.put("version", entry.getKey());
      jsonObject.put("crash_count_list", listVersion);
      jsonArray.add(jsonObject);
    }
    //获取版本和对应设备数量
    Map<String, Map<String, Object>> mapVersionUdid = getCountByTime(
        commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
        boolQueryBuilder, EsFieldModel.UDID, startTime, endTime);
    for (Map.Entry<String, Map<String, Object>> entry : mapVersionUdid.entrySet()) {
      List<String> listVersionUdid = new ArrayList<>();
      for (String str : listCoord) {
        if (entry.getValue().containsKey(str)) {
          listVersionUdid.add(entry.getValue().get(str).toString());
        } else {
          listVersionUdid.add("0");
        }
      }
      if (jsonArray.size() > 0) {
        for (int i = 0; i < jsonArray.size(); i++) {
          JSONObject job = jsonArray.getJSONObject(i);
          if (entry.getKey().equals(job.get("version"))) {
            jsonArray.getJSONObject(i).put("crash_dev_count_list", listVersionUdid);
          }
        }
      }
    }
    //获取版本和对应数量(启动消息)
    Map<String, Map<String, Object>> mapVersionStart = getCountByTime(
        commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
        boolQueryBuilder, null, startTime, endTime);
    //将没有统计到的时间补0
    for (Map.Entry<String, Map<String, Object>> entry : mapVersionStart.entrySet()) {
      List<Double> crashRate = new ArrayList<Double>();
      List<String> listVersionStart = new ArrayList<>();
      for (String str : listCoord) {
        if (entry.getValue().containsKey(str)) {
          listVersionStart.add(entry.getValue().get(str).toString());
        } else {
          listVersionStart.add("0");
        }
      }
      if (jsonArray.size() > 0) {
        //计算崩溃率
        for (int i = 0; i < jsonArray.size(); i++) {
          JSONObject job = jsonArray.getJSONObject(i);
          if (entry.getKey().equals(job.get("version"))) {
            List<String> crashCount = (List<String>) job.get("crash_count_list");
            for (int s = 0; s < crashCount.size(); s++) {
              crashRate.add(commonBaseService.getRate(Long.valueOf(crashCount.get(s)),
                  Long.valueOf(listVersionStart.get(s))));
            }
            jsonArray.getJSONObject(i).put("crash_rate_list", crashRate);
          }
        }
      }
    }
    //获取版本和对应设备数量（启动消息）
    Map<String, Map<String, Object>> mapVersionUdidStart = getCountByTime(
        commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
        boolQueryBuilder, EsFieldModel.UDID, startTime, endTime);
    //将没有统计到的时间补0
    for (Map.Entry<String, Map<String, Object>> entry : mapVersionUdidStart.entrySet()) {
      List<Double> crashUserRate = new ArrayList<>();
      List<String> listVersionStart = new ArrayList<>();
      for (String str : listCoord) {
        if (entry.getValue().containsKey(str)) {
          listVersionStart.add(entry.getValue().get(str).toString());
        } else {
          listVersionStart.add("0");
        }
      }
      if (jsonArray.size() > 0) {
        //计算影响用户率
        for (int i = 0; i < jsonArray.size(); i++) {
          JSONObject job = jsonArray.getJSONObject(i);
          if (entry.getKey().equals(job.get("version"))) {
            List<String> crashDevCount = (List<String>) job.get("crash_dev_count_list");
            for (int s = 0; s < crashDevCount.size(); s++) {
              crashUserRate
                  .add(commonBaseService.getRate(Long.valueOf(crashDevCount.get(s)),
                      Long.valueOf(listVersionStart.get(s))));
            }
            jsonArray.getJSONObject(i).put("crash_user_rate_list", crashUserRate);
          }
        }
      }
    }
    data.put("version_list", jsonArray);
    data.put("crash_user_rate_list", listCrashUserRate);
    data.put("crash_rate_list", listCrashRate);
    return data;
  }

  /**
   * 崩溃分类统计.
   */
  @Override
  public JSONObject crashDist(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime) {
    //获取对应汇聚条件的次数和设备数[{filed:北京,count:1739,dev_count:386},{filed:上海,count:739,dev_count:86},……]
    JSONArray jsonArray = commonAggService.statCountByField(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, null, EsFieldModel.CRASH_REASON, 10L, false, false);
    List<Map<String, Object>> mapList = new ArrayList<>();
    //重新整理返回结果，修改对应字段名称
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        Map<String, Object> map = new HashMap<>();
        // 遍历 jsonarray 数组，把每一个对象转成 json 对象
        JSONObject job = jsonArray.getJSONObject(i);
        if ("count".equals(strCountType)) {
          map.put("crash_type", job.get("field"));
          map.put("count", job.get("count"));
        } else {
          map.put("crash_type", job.get("field"));
          map.put("count", job.get("dev_count"));
        }
        mapList.add(map);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  /**
   * 崩溃次数/设备数排名前十城市
   */
  @Override
  public JSONObject crashRank(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime) {
    //获取对应汇聚条件的次数和设备数[{filed:北京,count:1739,dev_count:386},{filed:上海,count:739,dev_count:86},……]
    JSONArray jsonArray = commonAggService.statCountByField(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, null, EsFieldModel.LOCATION, 100L, false, false);
    List<Map<String, Object>> mapList = new ArrayList<>();
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size() && i < 10; i++) {
        Map<String, Object> map = new HashMap<>();
        // 遍历 jsonarray 数组，把每一个对象转成 json 对象
        JSONObject job = jsonArray.getJSONObject(i);
        if ("count".equals(strCountType)) {
          map.put("location", job.get("field"));
          map.put("value", job.get("count"));
        } else {
          map.put("location", job.get("field"));
          map.put("value", job.get("dev_count"));
        }
        mapList.add(map);
      }
    }
    //针对结果降序排列
    Collections.sort(mapList, new Comparator<Map<String, Object>>() {
      @Override
      public int compare(Map<String, Object> o1, Map<String, Object> o2) {
        long l1 = Long.valueOf(o1.get("value").toString());
        long l2 = Long.valueOf(o2.get("value").toString());
        return (int) (l2 - l1);
      }
    });
    if (mapList.size() > 10) {
      for (int i = 10; i < mapList.size(); i++) {
        mapList.remove(i);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  /**
   * dist:区分统计类型 location device os_version app_version count_type:区分统计次数还是设备数 crash_dev_count
   * crash_count 崩溃分布.
   */
  @Override
  public JSONObject crashStat(String appId, List<String> listAppVersion, String strCountType,
      List<String> listManufacturer, String strDistType,
      List<String> listLocation, List<String> listOsVersion, Long startTime, Long endTime) {
    //系统版本和应用版本增加系统信息
    if (EsFieldModel.OS_VERSION.equals(strDistType)) {
      strDistType = EsFieldModel.OS_INFO;
    } else if (EsFieldModel.APP_VERSION.equals(strDistType)) {
      strDistType = EsFieldModel.APP_INFO;
    } else if (EsFieldModel.MODEL.equals(strDistType)) {
      strDistType = EsFieldModel.MANUFACTURER;
    }
    //获取对应汇聚条件的次数和设备数[{filed:北京,count:1739,dev_count:386},{filed:上海,count:739,dev_count:86},……]
    JSONArray jsonArray = commonAggService.statCountByField(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, null, strDistType, 10L, false, false);
    List<Map<String, Object>> mapList = new ArrayList<>();
    //构造过滤条件
    BoolQueryBuilder bqb = commonBaseService.filterQueryBuilder(appId, listManufacturer,
        listLocation, listOsVersion, listAppVersion,
        startTime, endTime, null);
    //崩溃次数
    long longAllCrash = getSoleCount(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), startTime, endTime, bqb, null);
    long longCrashDev = getSoleCount(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(), startTime, endTime, bqb, EsFieldModel.UDID);
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        Map<String, Object> map = new HashMap<>();
        // 遍历 jsonarray 数组，把每一个对象转成 json 对象
        JSONObject job = jsonArray.getJSONObject(i);
        if ("crash_count".equals(strCountType)) {
          map.put("type", job.get("field"));
          map.put("count", job.get("count"));
          map.put("percent", commonBaseService.getRate(job.getLong("count"), longAllCrash));
        } else {
          map.put("type", job.get("field"));
          map.put("count", job.get("dev_count"));
          map.put("percent", commonBaseService.getRate(job.getLong("dev_count"), longCrashDev));
        }
        mapList.add(map);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  private Long getSoleCount(String indexName, String indexType, long startTime, long endTime,
      BoolQueryBuilder bqb, String canField) {
    long longCount = 0;
    List<String> indexs = es
        .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    //indexExist.leng==0判断
    if (indexExist.length > 0) {
      SearchResponse searchResponse = null;
      //判断是否需要去重统计
      if (canField != null) {
        // cardinality是唯一聚合，聚合的字段是udid，这统计的是udid去重后的数量，也就是数量.
        CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
            .cardinality(canField + "s").field(canField);
        // 查询结果
        searchResponse = es.client.prepareSearch(indexExist)
            .setTypes(indexType)
            .setQuery(bqb).addAggregation(udidCardinalityAggregationBuilder)
            .execute().actionGet();
      } else {
        searchResponse = es.client.prepareSearch(indexName)
            .setTypes(indexType)
            .setQuery(bqb)
            .execute().actionGet();
      }

      if (canField == null) {
        longCount = searchResponse.getHits().getTotalHits();
      } else {
        // 获得返回结果.
        Cardinality cardinality = searchResponse.getAggregations().get(canField + "s");
        longCount = cardinality.getValue();
      }
    }
    return longCount;
  }

  /**
   * description:获取对应时间段各版本的数量和设备数
   */
  private Map<String, Map<String, Object>> getCountByTime(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, String strCountType,
      long startTime, long endTime) throws ParseException {
    List<String> indexs = es
        .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    Map<String, Map<String, Object>> mapMap = new HashMap<>();
    if (indexExist.length > 0) {
      String cabVersionDistinct = "versionUdidDistinct";
      //按时间段汇聚
      DateHistogramAggregationBuilder dhabTime = AggregationBuilders
          .dateHistogram(EsFieldModel.TIME + "s").field(EsFieldModel.TIME);
      //对应用版本对应的设备去重
      CardinalityAggregationBuilder cab = AggregationBuilders
          .cardinality(cabVersionDistinct).field(EsFieldModel.UDID);

      //根据应用版本汇聚
      TermsAggregationBuilder tab = AggregationBuilders
          .terms("app_infos")
          .field(EsFieldModel.APP_INFO)
          .size(10000)
          .order(BucketOrder.count(false))
          .subAggregation(cab);

      //判断是否是统一天，如果是同一天按小时统计，否则按天统计
      boolean sameDay = TimeParse.isSameDay(startTime, endTime);
      if (sameDay) {
        dhabTime.dateHistogramInterval(new DateHistogramInterval("1h"));
      } else {
        dhabTime.dateHistogramInterval(new DateHistogramInterval("1d"));
      }

      //设置时区
      dhabTime.timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")))
          .subAggregation(tab);

      SearchResponse sr = es.client
          .prepareSearch(indexExist)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(dhabTime)
          .execute()
          .actionGet();
      Histogram histogram = sr.getAggregations().get(EsFieldModel.TIME + "s");

      for (Histogram.Bucket entry : histogram.getBuckets()) {
        Terms terms = entry.getAggregations().get("app_infos");

        for (Terms.Bucket term : terms.getBuckets()) {
          if (!mapMap.containsKey(term.getKey())) {
            Map<String, Object> map = new HashMap<>();
            mapMap.put(term.getKey().toString(), map);
          }
          Cardinality cardinalityCount = (Cardinality) term.getAggregations()
              .get(cabVersionDistinct);
          if (strCountType == null) {
            mapMap.get(term.getKey())
                .put(TimeParse.timeSplit(sameDay, entry.getKeyAsString()), term.getDocCount());
          } else {
            mapMap.get(term.getKey()).put(TimeParse.timeSplit(sameDay, entry.getKeyAsString()),
                cardinalityCount.getValue());
          }
        }
      }
    }
    return mapMap;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.DataStrategy;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.DataStrategyRepository;
import com.bangcle.service.DataStrategyService;
import com.bangcle.util.PubString;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
@Service
@Slf4j
public class DataStrategyServiceImpl implements DataStrategyService{
  @Autowired
  private DataStrategyRepository dataStrategyRepository;


  @Override
  public JSONObject save(String appId, String name, List types, List locations) {
    for (int i=0;i<locations.size();i++){
      log.info("type is {}",locations.get(i));
    }
    JSONObject jsonObject = new JSONObject();
    try{
      DataStrategy dataStrategy = new DataStrategy();
      dataStrategy.setName(name);
      dataStrategy.setTypes(new JSONArray(types).toString());

      dataStrategy.setStatus(0);
      dataStrategy.setAppId(appId);
      dataStrategy.setCreateTime(new Date());
      dataStrategy.setUpdateTime(new Date());
      dataStrategy.setLocations(new JSONArray(locations).toString());
      dataStrategyRepository.save(dataStrategy);
    }catch (Exception e){
      e.printStackTrace();
      log.error(""+e);
      jsonObject.put("code",1);
      jsonObject.put("msg",ErrorInfo.CreateFailure);
      return jsonObject;
    }
    jsonObject.put("code",0);
    jsonObject.put("msg","");
    return jsonObject;
  }

  @Override
  public JSONObject update(String name, List types,List locations, Integer id,String appId) {
    JSONObject jsonObject = new JSONObject();
    try {
      DataStrategy dataStrategy =dataStrategyRepository.findOne(id);
      if (dataStrategy!=null&&dataStrategy.getAppId().equals(appId)){
        if (!StringUtils.isEmpty(name)){
          dataStrategy.setName(name);
        }
        if (locations.size()>0){
          dataStrategy.setLocations(new JSONArray(locations).toString());
        }
        if (types.size()>0){
          dataStrategy.setTypes(new JSONArray(types).toString());
        }
        dataStrategy.setUpdateTime(new Date());
        dataStrategyRepository.save(dataStrategy);
      }
    }catch (Exception e){
      log.error(""+e);
      jsonObject.put("code",1);
      jsonObject.put("msg",ErrorInfo.ErrorUpdate);
      return jsonObject;
    }
    jsonObject.put("code",0);
    jsonObject.put("msg","");
    return jsonObject;

  }

  @Override
  public JSONObject delete(Integer id,String appId) {
    JSONObject jsonObject = new JSONObject();
    try{
      DataStrategy dataStrategy =dataStrategyRepository.findOne(id);
      if (dataStrategy!=null&&dataStrategy.getAppId().equals(appId)){
        dataStrategyRepository.delete(id);
      }
    }catch (Exception e){
      log.error(""+e);
      jsonObject.put("code",1);
      jsonObject.put("msg",ErrorInfo.ErrorUpdate);
      return jsonObject;
    }
    jsonObject.put("code",0);
    jsonObject.put("msg","");
    return jsonObject;
  }

  @Override
  public JSONObject findList(String appid) {
    JSONObject jsonResult= new JSONObject();
    JSONObject jsonObject = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    List<DataStrategy> dataStrategies=null;
    List listLocation= new ArrayList(Arrays.asList(PubString.locations));
    try{
      dataStrategies= dataStrategyRepository.findByAppId(appid);

      for (DataStrategy dataStrategy:dataStrategies){
        JSONObject json = (JSONObject)JSONObject.toJSON(dataStrategy);
        DateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); //HH表示24小时制；
        if (json.containsKey("types")){
          json.put("msg_types",JSONArray.parseArray(dataStrategy.getTypes()));
          json.remove("types");
        }
        if (json.containsKey("createTime")){
          json.put("create_time",dFormat.format(dataStrategy.getCreateTime()));
          json.remove("createTime");
        }
        if (json.containsKey("updateTime")){
          json.put("update_time",dFormat.format(dataStrategy.getUpdateTime()));
          json.remove("updateTime");
        }
        JSONArray locations=JSONArray.parseArray(dataStrategy.getLocations());
        if (json.containsKey("locations")){
          if (locations.size()>0){
            json.put("locations",JSONArray.parseArray(dataStrategy.getLocations()));
            for (int i=0;i<locations.size();i++){
              String strLocation=locations.getString(i);
              if (!StringUtils.isEmpty(strLocation)){
                if (listLocation.contains(strLocation)){
                  listLocation.remove(strLocation);
                }
              }
            }
          }

        }
        jsonArray.add(json);

      }
    }catch (Exception e){
      e.printStackTrace();
      log.error(""+e);
      jsonResult.put("code",1);
      jsonResult.put("data",null);
      jsonResult.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return jsonResult;
    }
    jsonObject.put("datalist",jsonArray);
    jsonObject.put("regions",listLocation);
    jsonResult.put("code",0);
    jsonResult.put("data",jsonObject);
    jsonResult.put("msg","");
    return jsonResult;
  }

  @Override
  public JSONObject findById(Integer id) {
    JSONObject jsonObject=new JSONObject();
    try {
      DataStrategy dataStrategy= dataStrategyRepository.findOne(id);
      JSONObject json= new JSONObject();
      JSONArray locations=JSONArray.parseArray(dataStrategy.getLocations());
      if (StringUtils.isEmpty(dataStrategy.getLocations())) {
        if (locations.size()>0){
          json.put("locations",dataStrategy.getLocations());
        }
      }
      json.put("msg_types",dataStrategy.getTypes());
      json.put("name",dataStrategy.getName());
      jsonObject.put("data",json);
      jsonObject.put("code",0);
      jsonObject.put("msg","");

    }catch (Exception e){
      e.printStackTrace();
      log.error(""+e);
      jsonObject.put("code",1);
      jsonObject.put("msg",ErrorInfo.ErrorRequst);
      return jsonObject;
    }
    return jsonObject;
  }

  @Override
  public JSONObject updateStatus(Integer id, Integer status, String appId) {
    JSONObject jsonObject = new JSONObject();
    try {
      DataStrategy dataStrategy=dataStrategyRepository.findOne(id);
      log.info("result is {}",dataStrategy.getAppId().equals(appId));
      if (dataStrategy!=null&&dataStrategy.getAppId().equals(appId)){
        if (!StringUtils.isEmpty(status)){
          dataStrategy.setStatus(status);
          dataStrategyRepository.save(dataStrategy);
          jsonObject.put("code",0);
          jsonObject.put("msg","");
        }
      }

    }catch (Exception e){
      log.error(""+e);
      jsonObject.put("code",1);
      jsonObject.put("msg",ErrorInfo.ErrorUpdate.getInfo());
      return jsonObject;
    }
    return jsonObject;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.DevInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.CommonHbaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:37 17-12-1.
 */
@Slf4j
@Service
public class DevInfoServiceImpl implements DevInfoService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonHbaseService commonHbaseService;

  /**
   * 终端设备信息详情.
   */
  @Override
  public JSONObject devSort(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, long page,
      long size, String strSortBy, String listType) {
    String indexName = commonBaseService.getDevIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    // 所有设备忽略时间
    if ("all_dev".equals(listType)) {
      endTime = 0L;
      startTime = 0L;
    }
    //总数统计
    long longTotal = 0;
    JSONArray datalistJsonArray = new JSONArray();
    if (es.exists(indexName)) {
      JSONObject result = commonAggService
          .searchList(indexName, indexTypeName, appId, manufacturerList,
              locationList, osVersionList, appVersionList, startTime, endTime,
              null, page, size, null, true);
      JSONArray datalistResultArray = result.getJSONArray("data_list");
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      List<String> devStatusRowKey = new ArrayList<>();
      for (Object object : datalistResultArray) {
        JSONObject jsonObject = (JSONObject) object;
        JSONObject job = new JSONObject();
        job.put("app_name", jsonObject.get(EsFieldModel.APP_NAME) == null ? ""
            : jsonObject.get(EsFieldModel.APP_NAME));
        job.put("app_version", jsonObject.get(EsFieldModel.APP_VERSION) == null ? ""
            : jsonObject.get(EsFieldModel.APP_VERSION));
        job.put("location", jsonObject.get(EsFieldModel.LOCATION) == null ? ""
            : jsonObject.get(EsFieldModel.LOCATION));
        job.put("model",
            jsonObject.get(EsFieldModel.MANUFACTURER) == null ? ""
                : jsonObject.get(EsFieldModel.MANUFACTURER));
        job.put("os_version", jsonObject.get(EsFieldModel.OS_VERSION) == null ? ""
            : jsonObject.get(EsFieldModel.OS_VERSION));
        job.put("platform", jsonObject.get(EsFieldModel.PLATFORM) == null ? ""
            : jsonObject.get(EsFieldModel.PLATFORM));
        //listJsonObject.put("time", jsonObject.get(EsFieldModel.TIME) == null ? "" :
        // jsonObject.get(EsFieldModel.TIME));
        job.put("time", sdf.format(new Date(jsonObject.getLong(EsFieldModel.TIME_STAMP))));
        job.put("udid",
            jsonObject.get(EsFieldModel.UDID) == null ? "" : jsonObject.get(EsFieldModel.UDID));
        job.put("ip", jsonObject.get("client_ip") == null ? "" : jsonObject.get("client_ip"));
        /*listJsonObject
            .put("ip_lan", jsonObject.get(EsFieldModel.IP_LAN) == null ? ""
                : jsonObject.get(EsFieldModel.IP_LAN));*/
        if (jsonObject.containsKey(EsFieldModel.IMEI)) {
          job.put("imei", jsonObject.get(EsFieldModel.IMEI) == null ? "NoPermission"
              : PubFunc.jsonArray2String(jsonObject.getString(EsFieldModel.IMEI)));
        }else {
          job.put("imei", "NoPermission");
        }
        datalistJsonArray.add(job);
        StringBuffer rowkey = new StringBuffer();
        rowkey.append(jsonObject.get(EsFieldModel.UDID));
        rowkey.append("|");
        rowkey.append(jsonObject.get(EsFieldModel.APP_ID));
        job.put("rowkey", rowkey.toString());
        devStatusRowKey.add(rowkey.toString());
      }
      HashMap<String, HashMap<String, String>> devStatusAll = commonHbaseService
          .getDevStatus(devStatusRowKey.toArray(new String[devStatusRowKey.size()]));
      for (int i = 0; i < datalistJsonArray.size(); i++) {
        JSONObject jsonObject = datalistJsonArray.getJSONObject(i);
        String key = jsonObject.getString("rowkey");
        if (devStatusAll.containsKey(key)) {
          HashMap<String, String> devStatus = devStatusAll.get(key);
          jsonObject.put("network",
              devStatus.containsKey("start_net_type") ? devStatus.get("start_net_type") : "");
        }
      }
      longTotal = result.getLongValue("count");
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("total", longTotal);
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.DevStatService;
import com.bangcle.service.ESRelatedQueryService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.CommonHbaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:38 17-12-1. 设备总数
 * 考虑的是时间点，也就是只有截至时间有效，2017-10-02的设备总数，是小于这个时间的设备总数， 不考虑起始时间. 新增设备数 考虑的时间范围，新增设备数目，可以用这个时间段的数目减去上一个时间段的数目.
 */
@Service
@Slf4j
public class DevStatServiceImpl implements DevStatService {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private ESRelatedQueryService esRelatedQueryService;

  @Autowired
  private CommonHbaseService commonHbaseService;

  /**
   * 终端设备信息总数统计.
   */
  @Override
  public JSONObject devCount(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime) {
    String indexName = commonBaseService.getDevIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    JSONObject totalObject = commonAggService
        .totalCount(indexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, 0L, endTime, null, true);

    log.info("total {}", JSON.toJSONString(totalObject));
    String startIndexName = commonBaseService.getStartIndexName();
    JSONObject activeObject = commonAggService
        .totalCount(startIndexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, startTime, endTime, null, false);
    log.info("active {}", JSON.toJSONString(activeObject));
    long totalDevCount = totalObject.getLong("dev_count");
    long activeDevCount = activeObject.getLong("dev_count");
    //避免由于设备数据上报过慢导致比例出现超过百分之百的情况
    if (activeDevCount > totalDevCount) {
      totalDevCount = activeDevCount;
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("dev_count", totalDevCount);
    dataJsonObject.put("start_dev_count", activeDevCount);
    dataJsonObject
        .put("start_dev_rate", commonBaseService.getPercentRateStr(activeDevCount, totalDevCount));
    return dataJsonObject;
  }

  /**
   * 设备数趋势.
   */
  @Override
  public JSONObject devTrend(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime) {
    long rangeSeconds = 0L;
    boolean isSameDay = TimeParse.isSameDay(startTime, endTime);
    if (isSameDay) {
      rangeSeconds = TimeParse.getSecondsOfOneHour();
    } else {
      rangeSeconds = TimeParse.getSecondsOfOneDay();
    }

    String indexName = commonBaseService.getDevIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    List<Long> longDateList = new ArrayList<>();
    List<String> dateList = new ArrayList<>();
    List<Long> devCountList = new ArrayList<>();
    List<Long> addedDevCountList = new ArrayList<>();
    // 当天起始时间的时间戳的值和那天的设备总数的对应的map
    Map<Long, Long> timeToCountMap = new HashMap<>();

    // 每天的设备总数，是统计到那天的截至时间，也就是 23:59:59之前的.

    long time = startTime;
    long beforeTime = time - rangeSeconds; // 前一个时间段的起始时间
    JSONObject beforeTotalObject = commonAggService
        .totalCount(indexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, 0L, beforeTime + rangeSeconds - 1, null, true);
    timeToCountMap.put(beforeTime, beforeTotalObject.getLongValue("dev_count"));
    while (time < endTime) {
      // 这截至当天时间不严格限制时间点，就计算到23:59:59的，小时也直接计算到最后1s(-1 其实减去的是1ms)的.
      JSONObject totalObject = commonAggService
          .totalCount(indexName, indexTypeName, appId, manufacturerList, locationList,
              osVersionList, appVersionList, 0L, time + rangeSeconds - 1, null, true);
      timeToCountMap.put(time, totalObject.getLongValue("dev_count"));
      longDateList.add(time);
      time += rangeSeconds;
    }
    // 计算设备总数、新增设备数目.
    if (isSameDay) {
      for (Long t : longDateList) {
        Date date = new Date(t);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        dateList.add(hour + ":00");
        devCountList.add(timeToCountMap.get(t));
        addedDevCountList.add(timeToCountMap.get(t) - timeToCountMap.get(t - rangeSeconds));
      }
      // 按小时划分的时候，把x轴后面的几个小时划出来.
      int size1 = dateList.size();
      int size = size1;
      while (size < 24) {
        dateList.add(size + ":00");
        if (size1 > 0) {
          devCountList.add(devCountList.get(size1 - 1));
        }
        addedDevCountList.add(0L);
        size++;
      }
    } else {
      SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
      for (Long t : longDateList) {
        dateList.add(simpleDateFormat.format(t));
        devCountList.add(timeToCountMap.get(t));
        addedDevCountList.add(timeToCountMap.get(t) - timeToCountMap.get(t - rangeSeconds));
      }
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("coord_list", dateList);
    dataJsonObject.put("dev_count_list", devCountList);
    dataJsonObject.put("dev_new_list", addedDevCountList);
    return dataJsonObject;
  }

  /**
   * 按照位置、版本等分布.
   */
  @Override
  public JSONObject devStat(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type, String distType) {
    String countKey = "dev_count";
    JSONObject totalDevObject = getStatBaseJsonObject(appId, manufacturerList, locationList,
        osVersionList, appVersionList,
        0L, endTime, distType);

    JSONArray totalDevDataList = totalDevObject.getJSONArray("datalist");
    long totalDevCount = totalDevObject.getLong(countKey);

    JSONArray datalistJsonArray = new JSONArray();
    for (Object object : totalDevDataList) {
      JSONObject fieldJsonObject = (JSONObject) object;
      JSONObject listJsonObject = new JSONObject();
      long fieldCount = fieldJsonObject.getLongValue(countKey);
      listJsonObject.put("count", fieldCount);
      listJsonObject.put("type", fieldJsonObject.get("field"));
      listJsonObject.put("percent", commonBaseService.getRate(fieldCount, totalDevCount));
      datalistJsonArray.add(listJsonObject);
    }

    if ("dev_new".equals(type)) {
      JSONObject beforeDevObject = getStatBaseJsonObject(appId, manufacturerList, locationList,
          osVersionList,
          appVersionList,
          0L, startTime, distType);
      long beforeDevCount = beforeDevObject.getLong("dev_count");
      // 新增总数.
      long rangeDevCount = totalDevCount - beforeDevCount;
      Map<String, Long> fieldToCountMap = new HashMap<>();
      JSONArray beforeDevDataList = beforeDevObject.getJSONArray("datalist");
      // 记录前一个时间段的数目
      for (Object object : beforeDevDataList) {
        JSONObject fieldJsonObject = (JSONObject) object;
        fieldToCountMap
            .put(fieldJsonObject.getString("field"), fieldJsonObject.getLongValue(countKey));
      }

      JSONArray addedDatalistJsonArray = new JSONArray();
      for (Object object : totalDevDataList) {
        JSONObject fieldJsonObject = (JSONObject) object;
        String field = fieldJsonObject.getString("field");
        long fieldBeforeCount =
            fieldToCountMap.containsKey(field) ? fieldToCountMap.get(field) : 0L;
        long fieldCount = fieldJsonObject.getLong(countKey) - fieldBeforeCount;
        JSONObject listJsonObject = new JSONObject();
        listJsonObject.put("count", fieldCount);
        listJsonObject.put("type", field);
        listJsonObject.put("percent", commonBaseService.getRate(fieldCount, rangeDevCount));
        addedDatalistJsonArray.add(listJsonObject);
      }
      datalistJsonArray = commonBaseService.sortJsonArray(addedDatalistJsonArray, "count");
    }

    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }

  /**
   * 设备安装的应用列表.
   */
  @Override
  public JSONObject getDevAnalyze(String appId, String udid, Integer page, Integer size) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, appId));
    if (!StringUtils.isEmpty(udid)) {
      TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(EsFieldModel.UDID, udid);
      boolQueryBuilder.must(termsQueryBuilder);
    }
    SearchResponse searchResponse = es.client.prepareSearch(commonBaseService.getAppIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addSort(EsFieldModel.INSTALL_TIME, SortOrder.DESC)
        .setSize(10000)
        .execute()
        .actionGet();
    SearchHits searchHits = searchResponse.getHits();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray appArray = new JSONArray();
    JSONObject appAllObject = new JSONObject();
    JSONObject appUninstallObject = new JSONObject();
    for (SearchHit searchHit : searchHits) {
      JSONObject jsonObject = new JSONObject();
      Map mapApp = searchHit.getSourceAsMap();
      if (mapApp.containsKey("app_name")) {
        jsonObject.put("app_name", mapApp.get("source_app_name"));
      }
      if (mapApp.containsKey("cert_issure")) {
        jsonObject.put("cert_issure", mapApp.get("cert_issure"));
      }
      if (mapApp.containsKey("cert_md5")) {
        jsonObject.put("cert_md5", mapApp.get("cert_md5"));
      }
      if (mapApp.containsKey("install_time")) {
        jsonObject.put("install_time",
            sdf.format(new Date(Long.parseLong(mapApp.get("install_time").toString()))));
        jsonObject.put("install_time_stamp", mapApp.get(EsFieldModel.INSTALL_TIME));
      }
      if (mapApp.containsKey("md5")) {
        jsonObject.put("md5", mapApp.get("md5"));
      }
      if (mapApp.containsKey("pkg_name")) {
        jsonObject.put("pkg_name", mapApp.get("pkg_name"));
      }
      if (mapApp.containsKey("self_md5")) {
        jsonObject.put("self_md5", mapApp.get("self_md5"));
      }
      jsonObject.put(EsFieldModel.TIME_STAMP, mapApp.get(EsFieldModel.TIME_STAMP));
      if (mapApp.containsKey("status_type") && !StringUtils.isEmpty(mapApp.get("status_type"))
          && mapApp.get("status_type").toString().equals("uninstall")) {
        jsonObject.put("uninstall_time", mapApp.get("server_time"));
      }
      appArray.add(jsonObject);
    }
    for (int i = 0; i < appArray.size(); i++) {
      JSONObject appObiect = appArray.getJSONObject(i);
      String strKey = appObiect.getString("pkg_name") + "\\|" + appObiect.getString("cert_issure");
      if (appObiect.containsKey("uninstall_time")) {
        if (!appUninstallObject.containsKey(strKey)) {
          appUninstallObject.put(strKey, appObiect.getString("server_time"));
        }
      }
      if (appAllObject.containsKey(strKey)) {
        JSONObject originalObject = appAllObject.getJSONObject(strKey);
        long originalInstall = originalObject.getLong("install_time_stamp");
        long newInstall = appObiect.getLong("install_time_stamp");
        if (newInstall > originalInstall) {
          appAllObject.getJSONObject(strKey).put("last_install", newInstall);
        } else {
          if (originalObject.containsKey("last_install")) {
            appAllObject.put(strKey, appObiect);
            appAllObject.getJSONObject(strKey)
                .put("last_install", originalObject.getString("last_install"));
          } else {
            appAllObject.put(strKey, appObiect);
          }
        }
      } else {
        appAllObject.put(strKey, appObiect);
      }
    }
    List<Map<Object, Object>> listAll = new ArrayList<>();
    for (Map.Entry entry : appAllObject.entrySet()) {
      JSONObject jsonObject = (JSONObject) entry.getValue();
      String strEntryKey = entry.getKey().toString();
      if (appUninstallObject.containsKey(strEntryKey)) {
        if (appUninstallObject.getLongValue(strEntryKey) > jsonObject
            .getLongValue("last_install")) {
          jsonObject.put("uninstall_time",
              TimeParse.dataFormat(new Date(appUninstallObject.getLongValue(strEntryKey))));
        }
      }
      Map map = appAllObject.getJSONObject(strEntryKey);
      listAll.add(map);
    }
    sortList(listAll, "install_time_stamp");
    List<Map<Object, Object>> mapListSelf = new ArrayList<>();
    for (int i = 0; i < listAll.size(); i++) {
      if (listAll.get(i).get("md5").toString().equals(listAll.get(i).get("self_md5"))) {
        log.info("SELF APP:{}", listAll.get(i).get("app_name").toString());
        mapListSelf.add(listAll.get(i));
        listAll.remove(i);
      }
    }
    for (int m = mapListSelf.size() - 1; m >= 0; m--) {
      listAll.add(0, mapListSelf.get(m));
    }
    JSONArray arrayResult = new JSONArray();
    for (int i = (int) ((page - 1) * size); i < (page * size) && i < listAll.size(); i++) {
      arrayResult.add(listAll.get(i));
    }
    JSONObject data = new JSONObject();
    data.put("datalist", arrayResult);
    data.put("total", listAll.size());
    return data;
  }

  @Override
  public JSONObject getDevSummary(String appId, String udid) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, appId));
    Map<String, String> mapTerm = new HashMap<>();
    mapTerm.put(EsFieldModel.UDID, udid);
    Map<String, Object> map = commonAggService
        .getDetail(commonBaseService.getDevIndexName(), commonBaseService.getIndexTypeName(),
            boolQueryBuilder, mapTerm, 0L, 0L, true);
    JSONObject data = new JSONObject();
    if (!map.isEmpty() && map != null) {
      //纬度
      String strLatitude = "unknown";
      //经度
      String strLongitude = "unknown";
      StringBuffer rowKey = new StringBuffer();
      rowKey.append(udid);
      rowKey.append("|");
      rowKey.append(appId);
      HashMap<String, String> devStatus = new HashMap<>();
      HashMap<String, HashMap<String, String>> devStatusAll = commonHbaseService
          .getDevStatus(new String[]{rowKey.toString()});
      if (devStatusAll.containsKey(rowKey.toString())) {
        devStatus = devStatusAll.get(rowKey.toString());
      }

      if (devStatus.containsKey("gps")) {
        JSONObject latLong = JSON.parseObject(devStatus.get("gps"));
        if (latLong.containsKey("latitude") && latLong.get("latitude") != null) {
          strLatitude = latLong.get("latitude").toString();
        }
        if (latLong.containsKey("longitude") && latLong.get("longitude") != null) {
          strLongitude = latLong.get("longitude").toString();
        }
      }
      data.put("gps_info", strLongitude + "," + strLatitude);
      data.put("wifi_mac", devStatus.containsKey("wifi_mac") ? devStatus.get("wifi_mac") : "");
      data.put("mobile_lac",
          devStatus.containsKey("mobile_lac") ? PubFunc
              .jsonArray2Str(devStatus.get("mobile_lac"))
              : "");//基站位置区域码
      data.put("mobile_cid",
          devStatus.containsKey("mobile_cid") ? PubFunc
              .jsonArray2Str(devStatus.get("mobile_cid"))
              : "");//基站编号
      data.put("mobile_neighbor_cell_num",
          devStatus.containsKey("mobile_neighbor_cell_num") ? PubFunc.jsonArray2Str(
              devStatus.get("mobile_neighbor_cell_num")) : "");//附近基站个数
      data.put("mnc",
          devStatus.containsKey("mobile_mnc") ? JSON.parseArray(devStatus.get("mobile_mnc"))
              : new JSONArray());//网络运营商类型
      if (map.containsKey("platform") && "android".equals(map.get("platform"))) {
        data.put("brand", map.get("brand"));
        data.put("model", map.get("model"));
        data.put("Manufacturer", map.get("manufacturer"));
        data.put("os_name", "android");
        data.put("os_version", map.get("os_version"));
        data.put("android_id", map.get("android_id"));
        if (map.containsKey(EsFieldModel.IMEI)) {
          data.put("imei", map.get("imei") == null ? "NoPermission"
              : PubFunc.jsonArray2String(map.get("imei").toString()));
        } else {
          data.put("imei", "NoPermission");
        }
        data.put("imsi", PubFunc.jsonArray2String(map.get("imsi").toString()));
        data.put("resolution_w", map.get("resolution_w"));
        data.put("resolution_h", map.get("resolution_h"));
        data.put("mac", map.get("mac"));
        data.put("build_id", map.get("build_id"));
        data.put("bht_mac", map.get("bht_mac"));
        data.put("device", map.get("device"));
        data.put("sdk_version", map.get("sdk_version"));
        data.put("bootloader", map.get("bootloader"));
        data.put("display", map.get("display"));
        data.put("serial", map.get("serial"));
        data.put("run_mode", map.get("run_mode"));
        data.put("hardware", map.get("hardware"));
        data.put("cpu_abi", map.get("cpu_abi"));
        data.put("cpu_abi2", map.get("cpu_abi2"));
        data.put("fingerprint", map.get("fingerprint"));
        data.put("board", map.get("board"));
        data.put("host", map.get("host"));
        data.put("dev_date", map.get("dev_date"));
        data.put("dev_date_utc", map.get("dev_date_utc"));
        if (map.containsKey("sim_serial_number") && map.get("sim_serial_number") != null) {
          if (map.get("sim_serial_number").toString().contains("[")) {
            String strSim = map.get("sim_serial_number").toString();
            data.put("sim_serial_number", strSim.substring(1, strSim.length() - 1));
          } else {
            data.put("sim_serial_number", map.get("sim_serial_number"));
          }
        }
        String strGyroscope = esRelatedQueryService
            .getGyroFromGyroMessage(map.get(EsFieldModel.UDID).toString(),
                map.get(EsFieldModel.APP_ID).toString());
        if (strGyroscope.contains("[")) {
          data.put("gyroscope", strGyroscope.substring(1, strGyroscope.length() - 1));
        } else {
          data.put("gyroscope", strGyroscope);
        }
        data.put("time_zone", esRelatedQueryService
            .getTimeZoneFromStartMessage(map.get(EsFieldModel.UDID).toString(),
                map.get(EsFieldModel.APP_ID).toString()));

      } else {
        data.put("host", map.get("host"));
        data.put("model", PubString.cacheAppleEquipment
            .getOrDefault(map.get("model"), map.get("model").toString()));
        data.put("is_root", map.get("is_root"));
        data.put("os_name", "ios");
        data.put("os_version", map.get("os_version"));
        data.put("resolution_w", map.get("resolution_w"));
        data.put("resolution_h", map.get("resolution_h"));
        data.put("carrier", map.get("carrier"));
        data.put("mcc", map.get("mcc"));
        data.put("iso", map.get("iso"));
        data.put("allowsVOIP", map.get("allows_voip"));
        data.put("proximityState", map.get("proximity_state"));
        data.put("multitaskingSupported", map.get("multitasking_supported"));
        data.put("cpu_abi", map.get("cpu_abi"));
        data.put("sim_serial_number", map.get("sim_serial_number"));
        data.put("gyroscope", esRelatedQueryService
            .getGyroFromGyroMessage(map.get(EsFieldModel.UDID).toString(),
                map.get(EsFieldModel.APP_ID).toString()));
        data.put("time_zone", esRelatedQueryService
            .getTimeZoneFromStartMessage(map.get(EsFieldModel.UDID).toString(),
                map.get(EsFieldModel.APP_ID).toString()));
      }


    }
    return data;
  }

  // 计算
  private JSONObject getStatBaseJsonObject(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String distType) {
    String indexName = commonBaseService.getDevIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String field = "";
    switch (distType) {
      case "model":
        field = EsFieldModel.MANUFACTURER;
        break;
      case "location":
        field = EsFieldModel.LOCATION;
        break;
      case "os_version":
        field = EsFieldModel.OS_INFO;
        break;
      case "app_version":
        field = EsFieldModel.APP_INFO;
        break;
      default:
        break;
    }
    String countKey = "dev_count";
    JSONObject totalCountObject = commonAggService.totalCount(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime, null,
        true);
    long count = totalCountObject.getLong(countKey);
    JSONArray resultArray = commonAggService.statCountByField(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime,
        null, field, 1000, false, true);
    JSONObject data = new JSONObject();
    data.put(countKey, count);
    JSONArray newJsonArray = commonBaseService.sortJsonArray(resultArray, countKey);
    data.put("datalist", newJsonArray);
    return data;
  }

  public void sortList(List<Map<Object, Object>> mapList, String strSortField) {
    Collections.sort(mapList, new Comparator<Map<Object, Object>>() {
      @Override
      public int compare(Map<Object, Object> o1, Map<Object, Object> o2) {
        long l1 = Long.valueOf(o1.get(strSortField).toString());
        long l2 = Long.valueOf(o2.get(strSortField).toString());
        if (l2 == l1) {
          return 0;
        } else if (l2 > l1) {
          return 1;
        } else {
          return -1;
        }
      }
    });
  }
}
package com.bangcle.service.impl;

import static com.bangcle.repository.EsRepository.client;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.EnvDescription;
import com.bangcle.repository.EnvDescriptionRepository;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EnvInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.service.model.EvnType;
import com.bangcle.util.PubFunc;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:41 17-12-1.
 */
@Slf4j
@Service
public class EnvInfoServiceImpl implements EnvInfoService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  EnvDescriptionRepository envDescriptionRepository;

  @Autowired
  private EsRepository es;

  /**
   * sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型 location device os_version app_version
   * 地域/设备/系统版本/应用版本排行.
   */
  @Override
  public JSONObject envSort(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strStatType, Long startTime, Long endTime) {
    List<String> listDataType = new ArrayList<>();
    if (strEnvType != null && strEnvType.length() > 0) {
      listDataType.add(strEnvType);
    }
    //前端传入model则改为manufacturer字段汇聚
    String strTermsField = commonBaseService.modelToManufacturer(strStatType);
    JSONArray envArray = commonAggService
        .statCountByField(commonBaseService.getEnvIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime, listDataType, strTermsField, 1000L, true, false);
    JSONArray startArray = commonAggService.statCountByField(commonBaseService.getStartIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, null, strTermsField, 1000L, true,
        false);
    //计算对应条件下的活跃设备数量和影响设备率
    HashMap<Object, JSONObject> datatmp = new HashMap<>();
    List<Map<String, Object>> mapList = new ArrayList<>();
    if (envArray.size() > 0) {
      for (int i = 0; i < envArray.size(); i++) {
        JSONObject job = envArray.getJSONObject(i);
        JSONObject data = new JSONObject();
        data.put(strStatType, job.get("field"));
        data.put("abnormal_count", job.get("count"));
        data.put("abnormal_dev_count", job.get("dev_count"));
        data.put("start_dev_count", 0);
        data.put("risk_dev_rate", commonBaseService.getPercentRateStr(job.getLong("dev_count"), 0));
        datatmp.put(job.get("field"), data);
        mapList.add(data);
      }
      for (int i = 0; i < startArray.size(); i++) {
        JSONObject start = startArray.getJSONObject(i);
        if (datatmp.containsKey(start.get("field"))) {
          JSONObject data = datatmp.get(start.get("field"));
          data.put("start_dev_count", start.get("dev_count"));
          data.put("risk_dev_rate", commonBaseService
              .getPercentRateStr(data.getLong("abnormal_dev_count"), start.getLong("dev_count")));
        }
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    data.put("total", mapList.size());
    return data;
  }

  @Override
  public JSONObject getEnvList(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String
      > listOsVersion,
      String strSortField,
      String strStatBy, Long page, Long size, Long startTime, Long endTime) {
    List<String> listDataType = new ArrayList<>();
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataType.add(strEnvType);
    }
    //获取对应一页的数据（字段未过滤）
    JSONObject jsonObject = commonAggService
        .getDevDetail(commonBaseService.getEnvIndexName(), appId, listManufacturer, listLocation,
            listOsVersion, listAppVersion, startTime, endTime, listDataType, null,
            EsFieldModel.DATA_TYPE,
            true, strStatBy, strSortField, page, size, false);
    JSONArray jsonArray = (JSONArray) jsonObject.get("data_list");
    JSONArray resultArray = new JSONArray();
    //过滤出需要的字段
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        JSONObject job = jsonArray.getJSONObject(i);
        JSONObject resultObject = new JSONObject();
        resultObject.put("last_time", job.get("last_time"));
        resultObject.put("udid", job.get(EsFieldModel.UDID));
        resultObject.put("data_type_count", job.get("data_type_count"));
        resultObject.put("model", job.get(EsFieldModel.MANUFACTURER));
        resultObject.put("os_info", job.get(EsFieldModel.OS_INFO));
        resultObject.put("app_version", job.get(EsFieldModel.APP_VERSION));
        resultObject.put("location", job.get(EsFieldModel.LOCATION));
        resultObject.put("ip", job.get(EsFieldModel.CLIENT_IP));
        //resultObject.put("ip_lan", job.get(EsFieldModel.IP_LAN));
        if (job.containsKey(EsFieldModel.IMEI)) {
          resultObject.put("imei", job.get(EsFieldModel.IMEI) == null ? "NoPermission"
              : PubFunc.jsonArray2String(job.getString(EsFieldModel.IMEI)));
        }else {
          resultObject.put("imei", "NoPermission");
        }
        resultObject.put("network", job.get(EsFieldModel.NETWORK));
        resultObject.put("self_md5", job.get(EsFieldModel.SELF_MD5));
        resultObject.put("run_key", job.get(EsFieldModel.RUN_KEY));
        resultObject.put("env_count", job.get("count"));
        resultArray.add(resultObject);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", resultArray);
    data.put("total", jsonObject.get("count"));
    return data;
  }

  @Override
  public JSONObject getEnvAnalyze(String appId, List<String> listAppVersion, String
      strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String
      > listOsVersion,
      String udid, String runKey, Long startTime, Long endTime) {
    List<String> listDataType = new ArrayList<>();
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataType.add(strEnvType);
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, listDataType);
    BoolQueryBuilder bqb = boolQueryBuilder
        .must(QueryBuilders.termQuery(EsFieldModel.UDID, udid));
    List<String> listData = termByField(commonBaseService.getEnvIndexName(),
        commonBaseService.getIndexTypeName(), bqb, EsFieldModel.DATA_TYPE, 10000L, startTime,
        endTime, false);
    JSONArray jsonArray = new JSONArray();
    for (String str : listData) {
      boolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, listManufacturer, listLocation, listOsVersion,
              listAppVersion,
              startTime, endTime, listDataType);
      Map<String, String> mapTerm = new HashMap<>();
      mapTerm.put(EsFieldModel.UDID, udid);
      mapTerm.put(EsFieldModel.DATA_TYPE, str);
      //mapTerm.put(EsFieldModel.RUN_KEY, runKey);
      Map<String, Object> mapResult = getDetail(commonBaseService.getEnvIndexName(),
          commonBaseService.getIndexTypeName(), boolQueryBuilder, mapTerm, startTime, endTime,
          false);
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("env_type", str);
      jsonObject.put("last_time", mapResult.get("last_time"));
      EnvDescription envDescription = envDescriptionRepository.findByDataType(str);
      if (envDescription == null) {
        jsonObject.put("description", "-");
      } else {
        jsonObject.put("description", envDescription.getExceptionDescription());
      }
      try {
        JSONObject analyzeResult = getAnalyzeResult(str,
            JSON.parseObject(JSON.toJSONString(mapResult)));
        jsonObject.put("analyze_result", analyzeResult);
        jsonArray.add(jsonObject);
      } catch (Exception e) {
        log.error("error", e);
        jsonObject.put("analyze_result", "-");
      }

    }
    JSONObject data = new JSONObject();
    data.put("datalist", jsonArray);
    return data;
  }

  /**
   * description:通过汇聚的方法对某个字段去重.
   */
  public List<String> termByField(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, String termFiled, long topNum, Long startTime,
      Long endTime, boolean oneIndex) {
    String termsName = "count_by_field";
    // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
    long size = topNum > 0L ? topNum : 100000L;
    long shardSize = size * 3;
    //汇聚条件
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(termsName)
        .field(termFiled)
        .shardSize((int) shardSize)
        .size((int) size);

    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return new ArrayList<>();
    }
    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addAggregation(termsAggregationBuilder)
        .execute()
        .actionGet();
    Terms terms = searchResponse.getAggregations().get(termsName);
    List<String> data = new ArrayList<>();
    for (Terms.Bucket entry : terms.getBuckets()) {
      data.add(entry.getKeyAsString());
    }
    return data;
  }


  public Map<String, Object> getDetail(String indexName, String indexType,
      BoolQueryBuilder boolQueryBuilder, Map<String, String> map, Long startTime, Long endTime,
      boolean oneIndex) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    if (map != null && !map.isEmpty()) {
      for (Entry<String, String> entry : map.entrySet()) {
        boolQueryBuilder.must(QueryBuilders.termQuery(entry.getKey(), entry.getValue()));
      }
    }
    //根据传入时间计算对应的index
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //index清洗
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return new HashMap<>();
    }
    SearchResponse searchResponse = client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addSort(EsFieldModel.TIME, SortOrder.DESC)
        .execute()
        .actionGet();
    //获得所需要的字段信息
    SearchHits his = searchResponse.getHits();
    SearchHit[] shAll = his.getHits();
    Map<String, Object> mapSource = new HashMap<>();
    if (shAll.length > 0) {
      JSONArray evnData = new JSONArray();
      for (SearchHit searchHit : shAll) {
        evnData.add(searchHit.getSourceAsMap());
      }
      mapSource.put("data", evnData);
      mapSource.put("last_time", sdf.format(new Date(
          Long.valueOf(shAll[0].getSourceAsMap().get(EsFieldModel.TIME_STAMP).toString()))));
    }
    return mapSource;
  }

  private JSONObject getAnalyzeResult(String evnType, JSONObject data) {
    JSONObject analyzeResult = new JSONObject();
    try {
      if (data.get("data") == null) {
        analyzeResult.put(evnType, null);
        return analyzeResult;
      }
      JSONArray evnData = data.getJSONArray("data");
      if (evnData.isEmpty()) {
        analyzeResult.put(evnType, null);
        return analyzeResult;
      }
      data.getJSONArray("data").get(0);

      if (evnType.equals(EvnType.ROOT.getType())) {
        log.info("evnType = {}, platform = {}", evnType, evnData);
        JSONObject info = new JSONObject();
        Map distincMap = new HashMap();
        for (int i = 0; i < evnData.size(); i++) {
          JSONObject evn = evnData.getJSONObject(i);
          if (distincMap.containsKey(evn.get("platform"))) {
            continue;
          } else {
            info.put("platform", evn.get("platform"));
            distincMap.put(evn.get("platform"), evn.get("platform"));
          }
        }
        analyzeResult.put(evnType, info);

      } else if (evnType.equals(EvnType.SYS_CONF.getType())) {
        log.info("evnType = {}, sys_conf_type = {}", evnType, evnData);
        JSONArray info = new JSONArray();
        Map distincMap = new HashMap();
        for (int i = 0; i < evnData.size(); i++) {
          JSONObject evn = evnData.getJSONObject(i);
          if (distincMap.containsKey(evn.get("sys_conf_type"))) {
            continue;
          } else {
            JSONObject json = new JSONObject();
            json.put("sys_conf_type", evn.get("sys_conf_type"));
            info.add(json);
            distincMap.put(evn.get("sys_conf_type"), evn.get("sys_conf_type"));
          }
        }
        analyzeResult.put(evnType, info);

      } else if (evnType.equals(EvnType.RISK_FRAME.getType())) {
        log.info("evnType = {}, risk_frame_name = {}", evnType, evnData);
        JSONArray info = new JSONArray();
        Map distincMap = new HashMap();
        for (int i = 0; i < evnData.size(); i++) {
          JSONObject evn = evnData.getJSONObject(i);
          if (distincMap.containsKey(evn.get("risk_frame_name"))) {
            continue;
          } else {
            JSONObject json = new JSONObject();
            json.put("risk_frame_name", evn.get("risk_frame_name"));
            info.add(json);
            distincMap.put(evn.get("risk_frame_name"), evn.get("risk_frame_name"));
          }
        }
        analyzeResult.put(evnType, info);

      } else if (evnType.equals(EvnType.RISK_APP.getType())) {
        log.info("evnType = {}, risk_app = {}", evnType, evnData);
        JSONArray info = new JSONArray();
        Map distincMap = new HashMap();
        for (int i = 0; i < evnData.size(); i++) {
          JSONObject evn = evnData.getJSONObject(i);
          if (distincMap.containsKey(evn.get("risk_app_package"))) {
            continue;
          } else {
            JSONObject json = new JSONObject();
            json.put("risk_app_name", evn.get("risk_app_name"));
            json.put("risk_app_package", evn.get("risk_app_package"));
            info.add(json);
            distincMap.put(evn.get("risk_app_package"), evn.get("risk_app_package"));
          }
        }
        analyzeResult.put(evnType, info);

      } else if (evnType.equals(EvnType.RISK_PROCESS.getType())) {
        log.info("evnType = {}, risk_process_app_name = {}, risk_process_pkg_name = {}", evnType,
            data.get("risk_process_app_name"), data.get("risk_process_pkg_name"));
        JSONArray info = new JSONArray();
        Map distincMap = new HashMap();
        for (int i = 0; i < evnData.size(); i++) {
          JSONObject evn = evnData.getJSONObject(i);
          if (distincMap.containsKey(evn.get("risk_process_pkg_name"))) {
            continue;
          } else {
            JSONObject json = new JSONObject();
            json.put("risk_process_app_name", evn.get("risk_process_app_name"));
            json.put("risk_process_pkg_name", evn.get("risk_process_pkg_name"));
            info.add(json);
            distincMap.put(evn.get("risk_process_pkg_name"), evn.get("risk_process_pkg_name"));
          }
        }
        analyzeResult.put(evnType, info);
      } else {
        log.info("evnType = {}", evnType);
        //analyzeResult.put(evnType, null);
      }
    } catch (Exception e) {
      log.error("error", e);
    }
    return analyzeResult;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.EnvStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.DataType;
import com.bangcle.service.model.EsFieldModel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:45 17-12-1.
 */
@Service
@Slf4j
public class EnvStatServiceImpl implements EnvStatService {

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  /**
   * 环境感知总数统计.
   */
  @Override
  public JSONObject envCount(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Long startTime,
      Long endTime) {
    List<String> listDataType = new ArrayList<>();
    //判断是否选择数据类型，默认全部（首次点击页面前端会不返回数据类型，默认全部，以后点击如果如果不选择数据类型则返回空字符串）
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataType.add(strEnvType);
    }
    //获取数量和设备数{count:  ,dev_count: }
    JSONObject jsonObject = commonAggService
        .totalCount(commonBaseService.getEnvIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime,
            listDataType, false);
    //异常设备数
    long abnormalDev = jsonObject.getLong("dev_count");
    jsonObject = commonAggService
        .totalCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime, null, false);
    //启动设备数
    long startDev = jsonObject.getLong("dev_count");
    if (abnormalDev > startDev) {
      abnormalDev = startDev;
    }
    JSONObject data = new JSONObject();
    data.put("abnormal_dev_count", abnormalDev);
    data.put("abnormal_dev_rate", commonBaseService.getPercentRateStr(abnormalDev, startDev));
    data.put("start_dev_count", startDev);
    return data;
  }

  /**
   * 异常环境趋势.
   */
  @Override
  public JSONObject envTrend(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Long startTime,
      Long endTime) {
    List<String> listDataType = new ArrayList<>();
    //判断是否选择数据类型，默认全部（首次点击页面前端会不返回数据类型，默认全部，以后点击如果如果不选择数据类型则返回空字符串）
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataType.add(strEnvType);
    }
    //获得崩溃次数和设备数趋势 {date_list:[2017-12-01,2017-12-02,……],count_list:[1387,3445,……],dev_count_list:[1129,2374,……]}
    JSONObject jsonObject = commonAggService
        .trendCount(commonBaseService.getEnvIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime, listDataType);
    List<String> listAbnormalDev = (List<String>) jsonObject.get("dev_count_list");
    jsonObject = commonAggService
        .trendCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
            endTime,
            null);
    List<String> listStartDev = (List<String>) jsonObject.get("dev_count_list");
    List<String> listCoord = (List<String>) jsonObject.get("date_list");
    List<Double> listAbnormalRate = new ArrayList<>();
    //计算异常设备率
    for (int i = 0; i < listAbnormalDev.size(); i++) {
      listAbnormalRate.add(commonBaseService
          .getRate(Long.valueOf(String.valueOf(listAbnormalDev.get(i))),
              Long.valueOf(String.valueOf(listStartDev.get(i)))));
    }
    JSONObject data = new JSONObject();
    data.put("abnormal_dev_list", listAbnormalDev);
    data.put("abnormal_rate_list", listAbnormalRate);
    data.put("coord_list", listCoord);
    data.put("start_dev_list", listStartDev);
    return data;
  }

  /**
   * 异常环境分类统计.
   */
  @Override
  public JSONObject envDist(String appId, List<String> listAppVersion, String strEnvType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Long startTime,
      Long endTime) {
    List<String> listDataType = new ArrayList<>();
    //判断是否选择数据类型，默认全部（首次点击页面前端会不返回数据类型，默认全部，以后点击如果如果不选择数据类型则返回空字符串）
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataType.add(strEnvType);
    }
    //根据传入字段判断根据哪个字段做汇聚
    String filedName = "";
    if (strEnvType == null || strEnvType.isEmpty()) {
      filedName = "data_type";
    } else if (DataType.RISK_PROCESS.getType().equals(strEnvType)) {
      filedName = "risk_process_app_name";
    } else if (DataType.RISK_APP.getType().equals(strEnvType)) {
      filedName = "risk_app_category";
    } else if (DataType.RISK_FRAME.getType().equals(strEnvType)) {
      filedName = "risk_frame_name";
    } else if (DataType.SYS_CONF.getType().equals(strEnvType)) {
      filedName = "sys_conf_type";
    }
    List<Map<String, Object>> mapList = new ArrayList<>();
    //获取对应汇聚条件的次数和设备数[{filed:北京,count:1739,dev_count:386},{filed:上海,count:739,dev_count:86},……]
    JSONArray jsonArray = commonAggService.statCountByField(commonBaseService.getEnvIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, listDataType, filedName, 0L, false, false);
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        JSONObject job = jsonArray.getJSONObject(i);
        Map<String, Object> map = new HashMap<>();
        map.put("env_type", job.get("field"));
        map.put("env_count", job.get("dev_count"));
        mapList.add(map);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  /**
   * dist_type:区分统计类型 location device os_version app_version 异常环境分布.
   */
  @Override
  public JSONObject envStat(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strDistType, String strEnvType, Long startTime, Long endTime) {
    List<String> listDataTypes = new ArrayList<>();
    //判断是否选择数据类型，默认全部（首次点击页面前端会不返回数据类型，默认全部，以后点击如果如果不选择数据类型则返回空字符串）
    if (strEnvType != null && !strEnvType.isEmpty()) {
      listDataTypes.add(strEnvType);
    }
    String indexName = commonBaseService.getEnvIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String field = "";
    switch (strDistType) {
      case "model":
        field = EsFieldModel.MANUFACTURER;
        break;
      case "location":
        field = EsFieldModel.LOCATION;
        break;
      case "os_version":
        field = EsFieldModel.OS_INFO;
        break;
      case "app_version":
        field = EsFieldModel.APP_INFO;
        break;
      default:
        break;
    }
    String countKey = "dev_count";
    JSONObject totalCountObject = commonAggService.totalCount(indexName, indexTypeName, appId,
        listManufacturer, listLocation, listOsVersion, listAppVersion, startTime, endTime,
        listDataTypes, false);
    long count = totalCountObject.getLong(countKey);
    JSONArray resultArray = commonAggService.statCountByField(indexName, indexTypeName, appId,
        listManufacturer, listLocation, listOsVersion, listAppVersion, startTime, endTime,
        listDataTypes, field, 1000, false, false);
    JSONArray datalistJsonArray = new JSONArray();
    for (Object object : resultArray) {
      JSONObject fieldJsonObject = (JSONObject) object;
      JSONObject listJsonObject = new JSONObject();
      long fieldCount = fieldJsonObject.getLongValue(countKey);
      listJsonObject.put("count", fieldCount);
      listJsonObject.put("type", fieldJsonObject.get("field"));
      listJsonObject.put("percent", commonBaseService.getRate(fieldCount, count));
      datalistJsonArray.add(listJsonObject);
    }

    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.ESRelatedQueryService;
import com.bangcle.service.common.CommonBaseService;
import com.google.common.base.Strings;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.ExistsQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ESRelatedQueryServiceImpl implements ESRelatedQueryService {

  @Autowired
  private EsRepository esRepository;
  @Autowired
  private CommonBaseService commonBaseService;


  @Override
  public String getTimeZoneFromStartMessage(String udid, String agentId) {

    String strResult = "";

    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();

    TermsQueryBuilder udidQueryBuilder = QueryBuilders
        .termsQuery("udid", udid);
    boolQueryBuilder.must(udidQueryBuilder);
    TermsQueryBuilder agentidQueryBuilder = QueryBuilders.termsQuery("agent_id", agentId);
    boolQueryBuilder.must(agentidQueryBuilder);

    ExistsQueryBuilder existsQueryBuilder = QueryBuilders.existsQuery("time_zone");
    boolQueryBuilder.must(existsQueryBuilder);

    SearchRequestBuilder searchRequestBuilder = EsRepository.client
        .prepareSearch(commonBaseService.getStartIndexName())
        .setTypes(commonBaseService.getIndexTypeName()).setQuery(boolQueryBuilder).setSize(1);

    SearchResponse searchResponse = searchRequestBuilder.get();

    SearchHit[] searchHits = searchResponse.getHits().getHits();

    if (searchHits.length > 0) {
      strResult = searchHits[0].getSourceAsMap().get("time_zone").toString();
    } else {
      strResult = "unknow";
    }
    return strResult;
  }

  @Override
  public String getGyroFromGyroMessage(String udid, String agentId) {

    String strResult = "";

    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();

    TermsQueryBuilder udidQueryBuilder = QueryBuilders
        .termsQuery("udid", udid);
    boolQueryBuilder.must(udidQueryBuilder);
    TermsQueryBuilder agentidQueryBuilder = QueryBuilders.termsQuery("agent_id", agentId);
    boolQueryBuilder.must(agentidQueryBuilder);

    ExistsQueryBuilder existsQueryBuilder = QueryBuilders.existsQuery("gyroscope");
    boolQueryBuilder.must(existsQueryBuilder);

    SearchRequestBuilder searchRequestBuilder = EsRepository.client
        .prepareSearch(commonBaseService.getGyroscopeIndexName())
        .setTypes(commonBaseService.getIndexTypeName()).setQuery(boolQueryBuilder).setSize(1);

    SearchResponse searchResponse = searchRequestBuilder.get();

    SearchHit[] searchHits = searchResponse.getHits().getHits();

    if (searchHits.length > 0) {
      String json = searchHits[0].getSourceAsMap().get("gyroscope").toString();
      if (!Strings.isNullOrEmpty(json)) {
        JSONArray jsonArray = JSONArray.parseArray(json);
        if (jsonArray.size() > 0) {
          strResult = jsonArray.toArray()[0].toString();
        } else {
          strResult = "unknow";
        }
      }
    } else {
      strResult = "unknow";
    }
    return strResult;
  }
}

package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.bangcleEventThreat;
import com.bangcle.entity.SafeEvent;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.SafeEventRepository;
import com.bangcle.service.EventInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:48 17-12-1.
 */
@Service
@Slf4j
public class EventInfoServiceImpl implements EventInfoService {

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private EsRepository es;

  @Autowired
  SafeEventRepository safeEventRepository;

  @Autowired
  private ThreatInfoServiceImpl threatInfoServiceImpl;

  /**
   * sort_field:用于区分排序字段：event_count event_dev_count sort_by:用于区分如何排序 desc asc stat_type:用于区分统计类型
   * location source 地域/攻击源排行.
   */
  @Override
  public JSONObject eventSort(String strAppId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Integer page, Integer size, String strSortBy, String strSortField,
      String strStatType, Long lStartTime, Long lEndTime) {
    String[] indexExist = {commonBaseService.getEventIndexName()};
    JSONArray jsonArray = new JSONArray();
    JSONObject jsonObject = new JSONObject();
    JSONObject totalCount = new JSONObject();
    if (lStartTime > 0L) {
      List<String> indexs = es
          .getIndexs(commonBaseService.getEventIndexName(), lStartTime, lEndTime, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length > 0) {
      BoolQueryBuilder boolQueryBuilder = commonBaseService
          .filterQueryBuilder(strAppId, listManufacturer,
              listLocation, listOsVersion, listAppVersion, lStartTime, lEndTime, null);
      String strCardinalityUdid = "cardinality_by_udid";
      CardinalityAggregationBuilder cardinalityUdidBuilder = AggregationBuilders
          .cardinality(strCardinalityUdid)
          .field(EsFieldModel.UDID);
      String strCardinalityIp = "cardinality_by_ip";
      CardinalityAggregationBuilder cardinalitySourceName = AggregationBuilders
          .cardinality(strCardinalityIp)
          .field(EsFieldModel.CLIENT_IP);
      Boolean isAsc = true;
      if ("desc".equals(strSortBy)) {
        isAsc = false;
      } else if ("asc".equals(strSortBy)) {
        isAsc = true;
      }
      log.info("sort  is {}", isAsc);
      if ("location".equals(strStatType)) {
        String strTermsName = "term_by_field";
        TermsAggregationBuilder terms = AggregationBuilders.terms(strTermsName)
            .subAggregation(cardinalityUdidBuilder)
            .subAggregation(cardinalitySourceName)
            .field(EsFieldModel.LOCATION)
            .size(PubString.lsize);
        if ("event_count".equals(strSortField)) {
          //优先以事件数排序，如果事件数相同，则以设备事件数排序
          terms.order(BucketOrder.compound(BucketOrder.count(isAsc),
              BucketOrder.aggregation(strCardinalityUdid, isAsc)));
        } else if ("event_dev_count".equals(strSortField)) {
          terms.order(BucketOrder.compound(BucketOrder.aggregation(strCardinalityUdid, isAsc),
              BucketOrder.count(isAsc)));
        }
        SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(indexExist)
            .addAggregation(cardinalityUdidBuilder)
            .addAggregation(cardinalitySourceName)
            .setQuery(boolQueryBuilder)
            .addAggregation(terms);

        log.debug("searchRequestBuilder = {}", searchRequestBuilder);

        SearchResponse searchResponse = searchRequestBuilder.get();
        //事件总数统计
        SearchHits searchHits = searchResponse.getHits();
        long longCount = searchHits.getTotalHits();
        //事件设备数
        Cardinality cardinalityudid = searchResponse.getAggregations().get(strCardinalityUdid);
        long longDevCount = cardinalityudid.getValue();
        //源ip数
        Cardinality cardinalityIpAll = searchResponse.getAggregations().get(strCardinalityIp);
        long longIpCount = cardinalityIpAll.getValue();

        Terms termsField = searchResponse.getAggregations().get(strTermsName);

        for (Bucket bucket : termsField.getBuckets()) {
          JSONObject jobData = new JSONObject();
          Cardinality cardinalityUdid = bucket.getAggregations().get(strCardinalityUdid);
          Cardinality cardinalityIp = bucket.getAggregations().get(strCardinalityIp);
          jobData.put("location", bucket.getKeyAsString());
          jobData.put("event_count", bucket.getDocCount());
          jobData.put("event_dev_count", cardinalityUdid.getValue());
          jobData.put("ip_count", cardinalityIp.getValue());
          jobData.put("event_rate",
              commonBaseService.getPercentRateStr(bucket.getDocCount(), longCount));
          jobData.put("event_dev_rate",
              commonBaseService.getPercentRateStr(cardinalityUdid.getValue(), longDevCount));
          jsonArray.add(jobData);
        }
        totalCount.put("location", "总计");
        totalCount.put("event_count", longCount);
        totalCount.put("event_dev_count", longDevCount);
        totalCount.put("ip_count", longIpCount);
        totalCount.put("event_rate", commonBaseService.getPercentRateStr(longCount, longCount));
        totalCount
            .put("event_dev_rate", commonBaseService.getPercentRateStr(longDevCount, longDevCount));
        jsonArray.add(0, totalCount);
      } else if ("source".equals(strStatType)) {
        String strTermsIp = "terms_by_ip";
        TermsAggregationBuilder termsIpBuilder = null;
        termsIpBuilder = AggregationBuilders.terms(strTermsIp)
            .field(EsFieldModel.CLIENT_IP)
            .size(PubString.lsize)
            .subAggregation(cardinalityUdidBuilder);
        //获取IP对应区域,理论上一对一关系
        String termsLocationName = "terms_location";
        TermsAggregationBuilder tremsAggregationBuilderLocation = AggregationBuilders
            .terms(termsLocationName).field(EsFieldModel.LOCATION);
        termsIpBuilder.subAggregation(tremsAggregationBuilderLocation);
        if ("event_count".equals(strSortField)) {
          //优先以事件数排序，如果事件数相同，则以设备事件数排序
          termsIpBuilder.order(BucketOrder.compound(BucketOrder.count(isAsc)
              , BucketOrder.aggregation(strCardinalityUdid, isAsc)));
        } else if ("event_dev_count".equals(strSortField)) {
          termsIpBuilder.order(BucketOrder
              .compound(BucketOrder.aggregation(strCardinalityUdid, isAsc),
                  BucketOrder.count(isAsc)));
        }

        SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(indexExist)
            .setQuery(boolQueryBuilder)
            .addAggregation(cardinalityUdidBuilder)
            .addAggregation(termsIpBuilder);
        log.debug("searchRequestBuilder = {}", searchRequestBuilder);
        SearchResponse searchResponse = searchRequestBuilder.get();
        //事件总数统计
        SearchHits searchHits = searchResponse.getHits();
        long longCount = searchHits.getTotalHits();
        //事件设备数
        Cardinality cardinalityudid = searchResponse.getAggregations().get(strCardinalityUdid);
        long longDevCount = cardinalityudid.getValue();

        Terms termsField = searchResponse.getAggregations().get(strTermsIp);
        for (Bucket bucket : termsField.getBuckets()) {
          JSONObject job = new JSONObject();
          Cardinality cardinalityUdid = bucket.getAggregations().get(strCardinalityUdid);
          Terms termsLocation = bucket.getAggregations().get(termsLocationName);
          job.put("ip", bucket.getKeyAsString());
          job.put("event_count", bucket.getDocCount());
          job.put("event_dev_count", cardinalityUdid.getValue());
          if (termsLocation.getBuckets().isEmpty()) {
            job.put("location", "unknown");
          } else {
            job.put("location", termsLocation.getBuckets().get(0).getKeyAsString());
          }
          job.put("event_rate",
              commonBaseService.getPercentRateStr(bucket.getDocCount(), longCount));
          job.put("event_dev_rate",
              commonBaseService.getPercentRateStr(cardinalityUdid.getValue(), longDevCount));
          jsonArray.add(job);
        }
      }
    }
    //后端分页，取出对应的十条放入结果中
    JSONArray jsonArrayResult = new JSONArray();
    if (jsonArray.size() > 0) {
      for (int i = (int) ((page - 1) * size); i < (page * size) && i < jsonArray.size(); i++) {
        jsonArrayResult.add(jsonArray.get(i));
      }
    }
    jsonObject.put("datalist", jsonArrayResult);
    jsonObject.put("total", jsonArray.size());
    return jsonObject;
  }

  /**
   * description：事件列表.
   */
  @Override
  public JSONObject getEventList(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strIp, Long page, Long size, String strStatType, String strSortField,
      String strSortBy, Long startTime, Long endTime) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONObject data = new JSONObject();
    JSONObject jsonObjectCondition = new JSONObject();
    if (strIp != null && !strIp.isEmpty()) {
      jsonObjectCondition.put(EsFieldModel.CLIENT_IP, strIp);
    }
    List<Map<String, Object>> listMapResult = new ArrayList<>();
    List<String> indexs = es
        .getIndexs(commonBaseService.getEventIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length > 0) {
      JSONArray jsonArrayCondition = new JSONArray();
      JSONObject jsonObjectIp = new JSONObject();
      if (strIp != null && !strIp.isEmpty()) {
        jsonObjectIp.put("field", EsFieldModel.CLIENT_IP);
        jsonObjectIp.put("value", strIp);
      }
      jsonArrayCondition.add(jsonObjectIp);
      if ("env".equals(strStatType)) {
        data = commonAggService
            .searchList(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
                appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
                endTime, null, page, size, jsonArrayCondition, false);
      } else {
        data = commonAggService
            .getDevDetail(commonBaseService.getEventIndexName(), appId, listManufacturer,
                listLocation, listOsVersion, listAppVersion, startTime, endTime, null,
                jsonArrayCondition,
                EsFieldModel.DATA_TYPE, true, strSortBy, strSortField, page, size, false);
      }
      JSONArray jsonArray = (JSONArray) data.get("data_list");
      if (jsonArray.size() > 0) {
        for (int i = 0; i < jsonArray.size(); i++) {
          JSONObject job = jsonArray.getJSONObject(i);
          Map<String, Object> map = new HashMap<>();
          if (job.containsKey("last_time")) {
            map.put("last_time", job.get("last_time"));
            map.put("count", job.get("count"));
            map.put("data_type_count", job.get("data_type_count"));
          } else {
            map.put("time", sdf.format(new Date(job.getLong(EsFieldModel.TIME_STAMP))));
          }
          map.put("udid", job.get(EsFieldModel.UDID));
          map.put("rule_name", job.get(EsFieldModel.RULE_NAME));
          map.put("model", job.get(EsFieldModel.MANUFACTURER));
          map.put("os_info", job.get(EsFieldModel.OS_INFO));
          map.put("app_version", job.get(EsFieldModel.APP_VERSION));
          map.put("network", job.get(EsFieldModel.NETWORK));
          map.put("ip", job.get(EsFieldModel.CLIENT_IP));
          if (job.containsKey(EsFieldModel.IMEI)) {
            map.put("imei", job.get(EsFieldModel.IMEI) == null ? "NoPermission"
                : PubFunc.jsonArray2String(job.getString(EsFieldModel.IMEI)));
          }else {
            map.put("imei", "NoPermission");
          }
          //map.put("ip_lan", job.get(EsFieldModel.IP_LAN));
          map.put("location", job.get(EsFieldModel.LOCATION));
          if (PubString.showUserData) {
            map.put("bank_subbranch", "");
            map.put("id_card", "");
            map.put("phone", "");
            if (job.get("ccb_user_data") != null) {
              JSONArray userData = job.getJSONArray("ccb_user_data");
              int num = 0;
              for (int u = 0; u < userData.size(); u++) {
                JSONObject json = userData.getJSONObject(u);
                int id = json.getInteger("id");
                if (id > num) {
                  num = id;
                  map.put("bank_subbranch", json.get("bank_subbranch"));
                  map.put("id_card", json.get("id_card"));
                  map.put("phone", json.get("phone"));
                }
              }
            }
          }
          listMapResult.add(map);
        }
      }
    }
    JSONObject result = new JSONObject();
    result.put("datalist", listMapResult);
    result.put("total", data.get("count"));
    return result;
  }

  @Override
  public JSONObject eventTimeLine(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String udid, Long startTime, Long endTime) {
    String[] indexExist = {commonBaseService.getEventIndexName()};
    if (startTime > 0L) {
      List<String> indexs = es.getIndexs(commonBaseService.getEventIndexName(), startTime, endTime,
          "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    JSONObject result = new JSONObject();
    if (indexExist.length > 0) {
      SimpleDateFormat sdfd = new SimpleDateFormat("yyyy-MM-dd");
      SimpleDateFormat sdfs = new SimpleDateFormat("HH:mm:ss");
      SimpleDateFormat sdf = new SimpleDateFormat(
          "yyyy-MM-dd HH:mm:ss");
      JSONObject jsonObjectTotal = totalCount(indexExist, commonBaseService.getIndexTypeName(),
          appId,
          listManufacturer, listLocation, listOsVersion, listAppVersion, startTime, endTime, null,
          udid,
          EsFieldModel.RULE_NAME);
      //事件发生次数
      long longCount = jsonObjectTotal.getLong("count");
      //事件类型数
      long longType = jsonObjectTotal.getLong("distinct_count");
      //构造过滤条件
      BoolQueryBuilder boolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime, null);
      boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.UDID, udid));
      // 查询结果
      SearchResponse activeSearchResponse = es.client
          .prepareSearch(indexExist)
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(boolQueryBuilder)
          .setSize(500)
          .addSort(EsFieldModel.TIME, SortOrder.ASC)
          .execute().actionGet();
      SearchHits his = activeSearchResponse.getHits();
      SearchHit[] shAll = his.getHits();
      List<Map<String, Object>> listMap = Collections.synchronizedList(new ArrayList<>());
      //为了给第一条数据加入年-月-日，把起始时间设定为选定时间的前一天
      long before = startTime - 24 * 60 * 60 * 1000;
      String lastTime = "-";
      if (shAll.length > 0) {
        //更新最近发生时间
        Map<String, Object> lastMapSource = shAll[shAll.length - 1].getSourceAsMap();
        List<bangcleEventThreat> listLastEventThreat = JSONArray
            .parseArray(lastMapSource.get("threat_list").toString(), bangcleEventThreat.class);
        if (listLastEventThreat.size() > 0) {
          bangcleEventThreat lastEventThreat = listLastEventThreat
              .get(listLastEventThreat.size() - 1);
          lastTime = sdf.format(new Date(Long.parseLong(lastEventThreat.getThreat_time())));
        }
        for (int i = 0; i < shAll.length; i++) {
          Map<String, Object> mapSource = shAll[i].getSourceAsMap();
          List<bangcleEventThreat> listEventThreat = JSONArray
              .parseArray(mapSource.get("threat_list").toString(), bangcleEventThreat.class);
          if (listEventThreat.size() > 0) {
            /*for (int t = 0; t < listEventThreat.size(); t++){
              long current = Long.parseLong(listEventThreat.get(i).getThreat_time());
              //结果集是按时间升序排序的，选定最后一条记录获得的时间即为最近发生时间
              Map<String, Object> map = new HashMap<>();
              //每天的第一条数据加入年-月-日
              if (!TimeParse.isSameDayOfMillis(before, current)) {
                map.put("date", sdfd.format(new Date(current)));
              }
              map.put("index_name", shAll[i].getIndex());
              map.put("index_type", shAll[i].getType());
              map.put("time", sdfs.format(new Date(current)));
              map.put("event_id", shAll[i].getId());
              map.put("rule_name", mapSource.get("rule_name"));
              map.put("risk_type", listEventThreat.get(i).getThreat_type());
              map.put("self_md5", mapSource.get("self_md5"));
              before = current;
              listMap.add(map);
              if (listMap.size() == PubString.leventTimeLine){
                listMap.remove(0);
              }
            }*/
            for (bangcleEventThreat eventThreat : listEventThreat) {
              long current = Long.parseLong(eventThreat.getThreat_time());
              //结果集是按时间升序排序的，选定最后一条记录获得的时间即为最近发生时间
              Map<String, Object> map = new HashMap<>();
              //每天的第一条数据加入年-月-日
              if (!TimeParse.isSameDayOfMillis(before, current)) {
                map.put("date", sdfd.format(new Date(current)));
              }
              map.put("index_name", shAll[i].getIndex());
              map.put("index_type", shAll[i].getType());
              map.put("time", sdfs.format(new Date(current)));
              map.put("event_id", shAll[i].getId());
              map.put("rule_name", mapSource.get("rule_name"));
              map.put("risk_type", eventThreat.getThreat_type());
              map.put("self_md5", mapSource.get("self_md5"));
              if (PubString.showUserData) {
                map.put("bank_subbranch", "");
                map.put("id_card", "");
                map.put("phone", "");
                if (mapSource.get("ccb_user_data") != null) {
                  JSONArray userData = JSON.parseArray(mapSource.get("ccb_user_data").toString());
                  int num = 0;
                  for (int u = 0; u < userData.size(); u++) {
                    JSONObject json = userData.getJSONObject(u);
                    int id = json.getInteger("id");
                    if (id > num) {
                      num = id;
                      map.put("bank_subbranch", json.get("bank_subbranch"));
                      map.put("id_card", json.get("id_card"));
                      map.put("phone", json.get("phone"));
                    }
                  }
                }
              }
              before = current;
              listMap.add(map);
              if (listMap.size() == PubString.leventTimeLine) {
                listMap.remove(0);
              }
              if (!listMap.get(0).containsKey("date")) {
                listMap.get(0).put("date", sdfd.format(new Date(current)));
              }
            }
          }
        }
      }
      result.put("datalist", listMap);
      result.put("udid", udid);
      result.put("last_time", lastTime);
      result.put("count", longCount);
      result.put("data_type_count", longType);
    }
    return result;
  }

  @Override
  public JSONObject getEventAnalyze(String appId, String strIndexName, String strIndexType,
      String strEventId) {
    JSONObject data = new JSONObject();
    //事件名称
    String strRuleName = "-";
    //发生时间
    String strDate = "-";
    //分析结果
    JSONArray analyzeResult = new JSONArray();
    //事件说明
    String strDescription = "-";
    if (es.exists(strIndexName)) {
      //按照事件id过滤
      BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
      boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, appId));
      boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.ID, strEventId));
      SearchResponse searchResponse = es.client.prepareSearch(strIndexName)
          .setTypes(strIndexType)
          .setQuery(boolQueryBuilder).addSort(EsFieldModel.TIME, SortOrder.DESC).execute()
          .actionGet();
      SearchHits searchHits = searchResponse.getHits();
      SearchHit[] hits = searchHits.getHits();
      long longTime = 0;
      String eventDefId = "";
      JSONArray threatList = new JSONArray();
      for (int i = 0; i < hits.length; i++) {
        Map<String, Object> map = hits[i].getSourceAsMap();
        longTime = Long.valueOf(map.get(EsFieldModel.TIME_STAMP).toString());
        strRuleName = map.get("rule_name").toString();
        eventDefId = map.get("event_def_id").toString();
        threatList = JSON.parseArray(map.get("threat_list").toString());
      }
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      strDate = sdf.format(new Date(longTime));
      //获取事件说明
      try {
        SafeEvent safeEvent = safeEventRepository.findById(Integer.parseInt(eventDefId));
        strDescription = safeEvent.getDescription();
      } catch (Exception e) {
        log.error("error", e);
      }
      //组织分析结果
      if (threatList == null || threatList.isEmpty()) {

      } else {
        Long startTime = System.currentTimeMillis();
        Long endTime = 0L;
        BoolQueryBuilder bqbThreat = QueryBuilders.boolQuery();
        for (int i = 0; i < threatList.size(); i++) {
          JSONObject threat = threatList.getJSONObject(i);
          Long threatTime = threat.getLong("threat_time");
          if (threatTime > endTime) {
            endTime = threatTime;
          }
          if (threatTime < startTime) {
            startTime = threatTime;
          }
          String threatId = threat.getString("threat_id");
          bqbThreat.should(QueryBuilders.termQuery("_id", threatId));
        }
        //log.info("threat start = {} , end = {}", startTime, endTime);
        List<String> threatIndexs = es
            .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
        //indexExist.leng==0判断
        String[] indexExist = es.washIndex(threatIndexs);
        if (indexExist.length > 0) {
          SearchRequestBuilder searchRequest = es.client.prepareSearch(indexExist)
              .setTypes(strIndexType)
              .setQuery(bqbThreat)
              .setSize(PubString.lsize)
              .addSort(EsFieldModel.TIME, SortOrder.ASC);
          //调试
          log.info("searchRequest = {}", searchRequest);
          SearchResponse searchResponseThreat = searchRequest.get();
          SearchHit[] threatHits = searchResponseThreat.getHits().getHits();
          log.info("threatHits = {}", searchResponseThreat.getHits().getTotalHits());
          for (SearchHit hit : threatHits) {
            Map map = hit.getSourceAsMap();
            JSONObject threatData = JSONObject.parseObject(JSON.toJSONString(map));
            //log.info("threatData = {}", threatData);
            JSONObject threatAnalyzeResult = threatInfoServiceImpl
                .getAnalyzeResult(threatData.get("data_type").toString(), threatData);
            threatAnalyzeResult.put("data_type", threatData.get("data_type").toString());
            analyzeResult.add(threatAnalyzeResult);
          }
        }
      }
    }
    data.put("rule_name", strRuleName);
    data.put("time", strDate);
    data.put("description", strDescription);
    data.put("analyze_result", analyzeResult);
    return data;
  }

  /**
   * description:统计总数和distinctField字段去重后的总数.
   */
  public JSONObject totalCount(String[] indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String
      > osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> dataTypes,
      String strUdid,
      String distinctField) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, dataTypes);
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.UDID, strUdid));

    JSONObject jsonObject = new JSONObject();

    //对distinctField字段去重
    String cardinalityAll = "distinct_count";
    CardinalityAggregationBuilder udidCabAll = AggregationBuilders
        .cardinality(cardinalityAll).field(distinctField);

    SearchResponse searchResponse = es.client.prepareSearch(indexName)
        .setTypes(indexType)
        .setSize(PubString.lsize)
        .setQuery(boolQueryBuilder)
        .addAggregation(udidCabAll)
        .execute()
        .actionGet();

    SearchHits searchHits = searchResponse.getHits();
    //次数总计
    long longTotal = searchHits.getTotalHits();
    Cardinality cardinality = searchResponse.getAggregations().get(cardinalityAll);
    //去重后的数量总计
    long longTotalDev = cardinality.getValue();
    jsonObject.put("count", longTotal);
    jsonObject.put("distinct_count", longTotalDev);
    return jsonObject;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EventStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.impl.CommonAggServiceImpl;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:49 17-12-1.
 */
@Service
@Slf4j
public class EventStatServiceImpl implements EventStatService {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  /**
   * 安全事件总数统计.
   */
  @Override
  public JSONObject eventCount(String appId, List<String> listAppVersion,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long lStartTime, Long lEndTime) {

    JSONObject jsonObject = new JSONObject();
    JSONObject jsonObjectEvent = commonAggService
        .totalCount(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion,
            listAppVersion, lStartTime, lEndTime, null, false);
    String cardinalityLocationName = "count_distinct_location";
    String cardinalitySourceName = "count_distinct_source";
    //获取区域数
    long locationCount = commonAggService
        .cardinalityAggregation(appId, listAppVersion, listManufacturer, lEndTime,
            listLocation, listOsVersion, null, lStartTime,
            commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            EsFieldModel.LOCATION, cardinalityLocationName, false);

    //获取攻击源个数
    long sourceCount = commonAggService
        .cardinalityAggregation(appId, listAppVersion, listManufacturer, lEndTime,
            listLocation, listOsVersion, null, lStartTime,
            commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            EsFieldModel.CLIENT_IP, cardinalitySourceName, false);

    jsonObject.put("event_dev_count", jsonObjectEvent.getLong("dev_count"));
    jsonObject.put("event_count", jsonObjectEvent.getLong("count"));
    jsonObject.put("event_source_count", sourceCount);
    jsonObject.put("location_count", locationCount);
    return jsonObject;
  }

  /**
   * 安全事件趋势.
   */
  @Override
  public JSONObject eventTrend(String appId, List<String> listAppVersion,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      Long lStartTime, Long lEndTime) {
    JSONObject jsonObject = commonAggService
        .trendCount(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            appId, listManufacturer, listLocation, listOsVersion, listAppVersion, lStartTime,
            lEndTime, null);
    JSONObject result = new JSONObject();
    result.put("coord_list", jsonObject.get("date_list"));
    result.put("event_list", jsonObject.get("count_list"));
    result.put("event_dev_list", jsonObject.get("dev_count_list"));
    return result;
  }

  /**
   * 安全事件地域分布.
   */
  @Override
  public JSONObject eventLocalDist(String appId, List<String> listAppVersion,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long lStartTime, Long lEndTime) {
    JSONObject jsonDataList = new JSONObject();
    List<Map<String, Object>> mapList = new ArrayList<>();
    List<String> indexs = es
        .getIndexs(commonBaseService.getEventIndexName(), lStartTime, lEndTime, "yyyyMMdd");
    JSONArray jsonArray = eventInfo(appId, listAppVersion, listManufacturer, lEndTime, listLocation,
        listOsVersion, lStartTime, commonBaseService.getEventIndexName(),
        commonBaseService.getIndexTypeName(), EsFieldModel.LOCATION);
    long section = 0L;
    long topFive = 0L;
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        Map<String, Object> map = new HashMap<>();
        JSONObject job = jsonArray.getJSONObject(i);
        if (i < 5) {
          topFive = topFive + job.getLong("value");
          map.put("location", job.get("location"));
          map.put("value", job.getLong("value"));
          mapList.add(map);
        }
        section = section + job.getLong("value");
      }
    }
    if ((section - topFive) > 0) {
      Map<String, Object> mapOther = new HashMap<>();
      mapOther.put("location", "其他");
      mapOther.put("value", section - topFive);
      mapList.add(mapOther);
    }
    jsonDataList.put("datalist", mapList);
    return jsonDataList;
  }

  /**
   * 安全事件攻击源分布.
   */
  @Override
  public JSONObject eventSourceDist(String appId, List<String> listAppVersion,
      List<String> listManufacturer,
      List<String> listLocation, List<String> listOsVersion, Long lStartTime, Long lEndTime) {
    JSONObject jsonObject = new JSONObject();
    List<Map<String, Object>> mapList = new ArrayList<>();
    List<String> indexs = es
        .getIndexs(commonBaseService.getEventIndexName(), lStartTime, lEndTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length == 0) {
      jsonObject.put("datalist", mapList);
      return jsonObject;
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listManufacturer,
            listLocation, listOsVersion, listAppVersion, lStartTime, lEndTime, null);
    String strCardinalityName = "cardinality_distinct_source";
    CardinalityAggregationBuilder cardinalityAggregationBuilder = AggregationBuilders
        .cardinality(strCardinalityName).field(EsFieldModel.CLIENT_IP);
    String strTermsName = "term_by_location";
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(strTermsName)
        .field(EsFieldModel.LOCATION)
        .order(BucketOrder.count(true))
        .subAggregation(cardinalityAggregationBuilder);
    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setQuery(boolQueryBuilder)
        .addAggregation(termsAggregationBuilder)
        .execute()
        .actionGet();
    Terms terms = searchResponse.getAggregations().get(strTermsName);
    long section = 0L;
    long topFive = 0L;
    for (int i = 0; i < terms.getBuckets().size(); i++) {
      Map<String, Object> map = new HashMap<>();
      Bucket bucket = terms.getBuckets().get(i);
      log.info("攻击源位置{}", bucket.getKey());
      Cardinality cardinality = bucket.getAggregations().get(strCardinalityName);
      long longCount = cardinality.getValue();
      log.info("攻击源去重{}", longCount);
      if (i < 5) {
        topFive = topFive + longCount;
        if (bucket.getKeyAsString().isEmpty()) {
          map.put("location", "unknown");
        } else {
          map.put("location", bucket.getKeyAsString());
        }
        map.put("value", cardinality.getValue());
        mapList.add(map);
      }
      section = section + longCount;
    }
    if ((section - topFive) > 0) {
      Map<String, Object> mapOther = new HashMap<>();
      mapOther.put("location", "其他");
      mapOther.put("value", section - topFive);
      mapList.add(mapOther);
    }

    jsonObject.put("datalist", mapList);
    return jsonObject;
  }

  public JSONArray eventInfo(String appId, List<String> listAppVersion,
      List<String> listDevTypeSelect, Long lEndTime, List<String> listLocationSelect,
      List<String> listOsVersionSelect, Long lStartTime, String indexName, String indexType,
      String fieldName) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listDevTypeSelect,
            listLocationSelect, listOsVersionSelect, listAppVersion, lStartTime, lEndTime, null);
    String strTermsName = "term_by_field";
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(strTermsName)
        .field(fieldName)
        .order(BucketOrder.count(false));
    List<String> indexs = es
        .getIndexs(indexName, lStartTime, lEndTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    JSONArray jsonArray = new JSONArray();
    if (indexExist.length > 0){
      SearchResponse searchResponse = es.client.prepareSearch(indexName)
          .setTypes(indexType)
          .setQuery(boolQueryBuilder)
          .addAggregation(termsAggregationBuilder)
          .execute()
          .actionGet();
      Terms terms = searchResponse.getAggregations().get(strTermsName);
      for (Bucket bucket : terms.getBuckets()) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(fieldName, bucket.getKeyAsString());
        jsonObject.put("value", bucket.getDocCount());
        jsonArray.add(jsonObject);
      }
    }
    return jsonArray;
  }

  /*
  * 处理aggs条件，通过日期统计总数和设备数目.
  * **/
  private List<String> handleDateCondition(Long startTime, Long endTime, boolean sameDay,
      String strCardinalityName, String strCardinalityUdid,
      DateHistogramAggregationBuilder dateHistogramAggregationBuilder, String strFieldName) {
    List<String> dateList = new ArrayList<>();
    dateHistogramAggregationBuilder
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    if (sameDay) {
      // 查看一天的数据按照小时分组.
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.HOUR);
      dateList = TimeParse.getHourList();
    } else {
      // 按照每天查看数据.
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.DAY);
      dateList = TimeParse.getDateList(startTime, endTime);
    }
    CardinalityAggregationBuilder cardinalityAggregationBuilder = AggregationBuilders
        .cardinality(strCardinalityName).field(strFieldName);
    CardinalityAggregationBuilder cardinalityAggregationBuilderDev = AggregationBuilders
        .cardinality(strCardinalityUdid).field(EsFieldModel.UDID);
    dateHistogramAggregationBuilder.subAggregation(cardinalityAggregationBuilder);
    dateHistogramAggregationBuilder.subAggregation(cardinalityAggregationBuilderDev);
    return dateList;
  }

  public Long getAllCount(String indexName, BoolQueryBuilder boolQueryBuilder, String canField) {

    CardinalityAggregationBuilder cabUdid = AggregationBuilders
        .cardinality(canField + "s").field(canField);

    //按bqb条件过滤
    SearchResponse sr = es.client.prepareSearch(indexName)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(cabUdid)
        .execute()
        .actionGet();
    Cardinality cna = sr.getAggregations().get(canField + "s");
    long longValue = cna.getValue();
    //返回去重以后的统计数量
    return longValue;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.AppSoConfig;
import com.bangcle.entity.DylibConfig;
import com.bangcle.entity.SoLibrary;
import com.bangcle.entity.SystemSoConfig;
import com.bangcle.entity.XposedConfig;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppSoConfigRepository;
import com.bangcle.repository.DylibConfigRepository;
import com.bangcle.repository.SoLibraryRepository;
import com.bangcle.repository.SystemSoConfigRepository;
import com.bangcle.repository.XposedConfigRepository;
import com.bangcle.service.InjectionAttacksConfigService;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class InjectionAttacksConfigServiceImpl implements InjectionAttacksConfigService {

  @Autowired
  private SystemSoConfigRepository systemSoConfigRepository;
  @Autowired
  private AppSoConfigRepository appSoConfigRepository;
  @Autowired
  private SoLibraryRepository soLibraryRepository;
  @Autowired
  private XposedConfigRepository xposedConfigRepository;
  @Autowired
  private DylibConfigRepository dylibConfigRepository;

  //--------------------系统so库函数防hook定义-------------------------

  /***
   * 策略配置-威胁自定义-注入攻击-系统so库函数防hook定义
   *
   * @param name 名称
   * @param systemSoName 系统SO库名称
   * @param functionName 函数名称
   * @param agentId appid
   */
  @Override
  public JSONObject systemSoConfigSave(String name, String systemSoName, String functionName,
      Integer agentId) {
    JSONObject data = new JSONObject();
    //传入参数不允许为空
    if (name.isEmpty() || systemSoName.isEmpty() || functionName.isEmpty()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return data;
    }
    //函数名称和系统SO库名称不允许同时重复
    List<SystemSoConfig> listSystemSoConfig = systemSoConfigRepository
        .findByFunctionNameAndSystemOs(agentId, functionName, systemSoName);
    if (!listSystemSoConfig.isEmpty()) {
      for (SystemSoConfig ssc : listSystemSoConfig) {
        if (ssc.getStatus() != PubString.DELETE_STATUS) {
          data.put("code", 1);
          data.put("msg", ErrorInfo.AlreadyConfig.getInfo());
          return data;
        }
      }
    }
    SystemSoConfig systemSoConfig = new SystemSoConfig(name, functionName, systemSoName,
        PubString.STOP_STATUS, new Date(), agentId);
    //如果抛出异常提示插入失败
    try {
      systemSoConfigRepository.save(systemSoConfig);
    } catch (Exception e) {
      e.printStackTrace();
      data.put("code", 1);
      data.put("msg", ErrorInfo.CreateFailure.getInfo());
      return data;
    }
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }


  /**
   * 策略配置-威胁自定义-注入攻击-系统SO库函数防Hook定义 更新状态(停用/启用)
   *
   * @param status 状态
   */
  @Override
  public JSONObject systemSoConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId) {
    //根据返回值判断操作是否成功
    int numData = 0;
    if (ids != null) {
      numData = systemSoConfigRepository.updateById(status, ids, agentId);
    }
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.UpdateFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  /**
   * 策略配置-威胁自定义-注入攻击-系统SO库函数防Hook定义 查询所有内容
   */
  @Override
  public JSONObject systemSoConfigSelect(Integer agent_id) {
    List<SystemSoConfig> listResult = systemSoConfigRepository
        .findByAgentId(agent_id, PubString.DELETE_STATUS);

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray jsonArray = new JSONArray();
    if (listResult.size() > 0) {
      for (SystemSoConfig data : listResult) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("create_time", sdf.format(data.getCreate_time()));
        jsonObject.put("function_name", data.getFunctionName());
        jsonObject.put("id", data.getId());
        jsonObject.put("name", data.getName());
        jsonObject.put("status", data.getStatus());
        jsonObject.put("system_so", data.getSystemSOName());
        jsonArray.add(jsonObject);
      }
    }
    JSONObject job = new JSONObject();
    job.put("datalist", jsonArray);
    return job;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-系统SO库函数防Hook定义 删除操作，此删除只是将status改为2
   */
  @Override
  public JSONObject systemSoConfigDelete(Integer[] ids, Integer agentId) {
    //根据返回值大小判断操作是否成功
    int numData = 0;
    if (null != ids) {
      numData = systemSoConfigRepository.updateById(PubString.DELETE_STATUS, ids, agentId);
    }
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.DeleteFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  //--------------------应用SO库防Hook定义-------------------------

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义 添加
   *
   * @param name 名称
   * @param sourceName 调用源
   * @param functionName 被调用函数名称
   * @param appSoName 函数名称所在so库
   */
  @Override
  public JSONObject appSoConfigSave(String name, String sourceName, String functionName,
      String appSoName, Integer agentId) {
    JSONObject data = new JSONObject();
    //传入参数不允许为空字符串
    if (name.isEmpty() || sourceName.isEmpty() || functionName.isEmpty() || appSoName.isEmpty()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return data;
    }
    //判断是否重复
    List<AppSoConfig> listAppSoConfigs = appSoConfigRepository.findByFunctionNameAndAppOsName(agentId, functionName, appSoName);
    if (listAppSoConfigs != null && !listAppSoConfigs.isEmpty()){
      for (AppSoConfig appSoConfig:listAppSoConfigs){
        if (appSoConfig.getStatus().intValue() != PubString.DELETE_STATUS){
          data.put("code", 1);
          data.put("msg", ErrorInfo.AlreadyConfig.getInfo());
          return data;
        }
      }
    }
    //如果抛出异常提示插入失败
    try {
      appSoConfigRepository.save(
          new AppSoConfig(name, sourceName, functionName, appSoName, PubString.STOP_STATUS,
              new Date(), agentId));
    } catch (Exception e) {
      e.printStackTrace();
      data.put("code", 1);
      data.put("msg", ErrorInfo.CreateFailure.getInfo());
      return data;
    }
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义 更新状态(启动、停用)
   *
   * @param status 状态
   */
  @Override
  public JSONObject appSoConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId) {
    int numData = 0;
    if (ids != null) {
      numData = appSoConfigRepository.updateById(status, ids, agentId);
    }
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.UpdateFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义 显示列表
   */
  @Override
  public JSONObject appSoConfigSelect(Integer agent_id) {
    List<AppSoConfig> list = appSoConfigRepository.findByAgentId(agent_id, PubString.DELETE_STATUS);

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray jsonArray = new JSONArray();
    if (null != list && !list.isEmpty()) {
      for (AppSoConfig data : list) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("app_os_name", data.getAppSoName());
        jsonObject.put("create_at", sdf.format(data.getCreate_time()));
        jsonObject.put("function_name", data.getFunctionName());
        jsonObject.put("id", data.getId());
        jsonObject.put("name", data.getName());
        jsonObject.put("source_name", data.getSourceName());
        jsonObject.put("status", data.getStatus());
        jsonArray.add(jsonObject);
      }
    }
    JSONObject job = new JSONObject();
    job.put("datalist", jsonArray);
    return job;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义 删除
   */
  @Override
  public JSONObject appSoConfigDelete(Integer[] ids, Integer agentId) {
    int numData = appSoConfigRepository.updateById(PubString.DELETE_STATUS, ids, agentId);
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.DeleteFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义-新增SO库 添加
   *
   * @param name 名称
   * @param agentId appid
   */
  @Override
  public JSONObject soLibrarySave(String name, Integer agentId) {
    JSONObject data = new JSONObject();
    //判断传入参数不允许为空
    if (name.isEmpty()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ParamMustExist);
      return data;
    }
    //如果抛出异常提示插入失败
    try {
      soLibraryRepository.save(new SoLibrary(name, new Date(), agentId));
    } catch (Exception e) {
      e.printStackTrace();
      data.put("code", 1);
      data.put("msg", ErrorInfo.CreateFailure);
      return data;
    }
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-应用SO库防Hook定义-新增SO库 查询列表
   */
  @Override
  public JSONObject soLibrarySelect(Integer agent_id) {
    List<SoLibrary> list = soLibraryRepository.findByAgentId(agent_id);
    List<String> listData = new ArrayList<>();
    if (null != list && !list.isEmpty()) {
      for (SoLibrary data : list) {
        listData.add(data.getName());
      }
    }
    JSONObject jsonObject = new JSONObject();
    jsonObject.put("datalist", listData);
    JSONObject data = new JSONObject();
    data.put("code", 0);
    data.put("data", jsonObject);
    data.put("msg", "");
    return data;
  }

  //--------------------Xposed Hook定义-------------------------

  /**
   * 策略配置-威胁自定义-注入攻击-Xposed Hook定义 添加
   *
   * @param name 名称
   * @param xposedFeature xposed特征
   * @param functionName 函数名
   * @param className 类名
   * @param agentId appid
   */
  @Override
  public JSONObject xPosedConfigSave(String name, String xposedFeature, String functionName,
      String className, Integer agentId) {
    JSONObject data = new JSONObject();
    //传入参数不允许为空
    if (name.isEmpty() || xposedFeature.isEmpty() || functionName.isEmpty() || className
        .isEmpty()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return data;
    }
    //如果抛出异常提示插入失败
    try {
      xposedConfigRepository.save(
          new XposedConfig(name, xposedFeature, functionName, className, PubString.STOP_STATUS,
              new Date(), agentId));
    } catch (Exception e) {
      e.printStackTrace();
      data.put("code", 1);
      data.put("msg", ErrorInfo.CreateFailure.getInfo());
      return data;
    }
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-Xposed Hook定义 更新状态(启用、停用)
   *
   * @param status 状态
   */
  @Override
  public JSONObject xPosedConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId) {
    int numData = 0;
    if (ids != null) {
      numData = xposedConfigRepository.updateById(status, ids, agentId);
    }
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.UpdateFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  /**
   * 策略配置-威胁自定义-注入攻击-Xposed Hook定义 显示列表
   */
  @Override
  public JSONObject xPosedConfigSelect(Integer agent_id) {
    List<XposedConfig> list = xposedConfigRepository
        .findByAgentId(agent_id, PubString.DELETE_STATUS);
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray jsonArray = new JSONArray();
    if (null != list && !list.isEmpty()) {
      for (XposedConfig data : list) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("class_name", data.getClassName());
        jsonObject.put("create_at", sdf.format(data.getCreate_time()));
        jsonObject.put("function_name", data.getFunctionName());
        jsonObject.put("id", data.getId());
        jsonObject.put("name", data.getName());
        jsonObject.put("status", data.getStatus());
        jsonObject.put("xposed_feature", data.getXposedFeature());
        jsonArray.add(jsonObject);
      }
    }
    JSONObject job = new JSONObject();
    job.put("datalist", jsonArray);
    return job;
  }

  /**
   * 策略配置-威胁自定义-注入攻击-Xposed Hook定义 删除
   */
  @Override
  public JSONObject xPosedConfigDelete(Integer[] ids, Integer agentId) {
    int numData = 0;
    if (null != ids) {
      numData = xposedConfigRepository.updateById(PubString.DELETE_STATUS, ids, agentId);
    }
    JSONObject data = new JSONObject();
    if (numData == 0) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.DeleteFailure.getInfo());
      return data;
    } else {
      data.put("code", 0);
      data.put("msg", "");
      return data;
    }
  }

  /**
   * iOS-Dylib库函数防Hook定义列表.
   */
  @Override
  public JSONObject dylibConfigSelect(Integer agentId) {
    JSONObject data = new JSONObject();
    JSONArray jsonList = new JSONArray();
    List<DylibConfig> infoList = dylibConfigRepository.findByAgentId(agentId);
    for (DylibConfig dylibConfig : infoList) {
      JSONObject info = new JSONObject();
      info.put("create_time",
          TimeParse.Long2StrTime(dylibConfig.getCreateTime(), "yyyy-MM-dd HH:mm:ss"));
      info.put("dylib_name", dylibConfig.getDylibName());
      info.put("function_name", dylibConfig.getFunctionName());
      info.put("name", dylibConfig.getName());
      info.put("status", dylibConfig.getStatus());
      info.put("id", dylibConfig.getId());

      jsonList.add(info);
    }
    data.put("datalist", jsonList);

    return data;
  }

  /**
   * iOS-Dylib库函数防Hook定义新增.
   */
  public JSONObject dylibConfigSave(String name, String dylibName, String functionName,
      Integer agentId) {
    DylibConfig dylibConfig = dylibConfigRepository.checkOnly(agentId, dylibName, functionName);
    JSONObject result = new JSONObject();
    if (dylibConfig != null) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.AlreadyConfig.getInfo());
      return result;
    } else {
      dylibConfig = new DylibConfig();
      dylibConfig.setCreateTime(System.currentTimeMillis());
      dylibConfig.setAgentId(agentId);
      dylibConfig.setName(name);
      dylibConfig.setDylibName(dylibName);
      dylibConfig.setFunctionName(functionName);

      try {
        dylibConfigRepository.save(dylibConfig);
      } catch (Exception e) {
        log.error("error", e);
      }
    }
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * iOS-Dylib库函数防Hook定义状态修改.
   */
  public JSONObject dylibConfigStatusUpdate(Integer[] ids, Integer status, Integer agentId) {
    int sw = dylibConfigRepository.updateOnOff(agentId, status, ids);
    JSONObject result = new JSONObject();
    if (sw > 0) {
      result.put("code", 0);
      result.put("msg", "");
    } else {
      result.put("code", 1);
      result.put("msg", ErrorInfo.UpdateFailure.getInfo());
    }
    return result;
  }

  /**
   * iOS-Dylib库函数防Hook定义删除.
   */
  public JSONObject dylibConfigDelete(Integer[] ids, Integer agentId) {
    int del = dylibConfigRepository.updateDel(agentId, ids);
    JSONObject result = new JSONObject();
    if (del > 0) {
      result.put("code", 0);
      result.put("msg", "");
    } else {
      result.put("code", 1);
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
    }
    return result;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.LicenseRepository;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.LicenseService;
import com.bangcle.service.ThreatLocationFraudService;
import com.bangcle.service.UserService;
import com.bangcle.service.common.CryptService;
import com.bangcle.util.BCrypt;
import com.bangcle.util.PubString;
import com.bangcle.util.SelfCache;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.criteria.CriteriaBuilder.In;
import javax.servlet.http.HttpServletRequest;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@Service
public class LicenseServiceImpl implements LicenseService {

  @Autowired
  private CryptService cryptService;

  @Autowired
  private UserRepository userRepository;

  @Autowired
  private AppRepository appRepository;

  @Autowired
  private ThreatLocationFraudService threatLocationFraudService;

  @Autowired
  public HttpServletRequest request;

  @Autowired
  private UserRepository userRepo;

  @Autowired
  private LicenseRepository licenseRepository;

  @Autowired
  private UserService userService;

  public App findById(Integer id) {
    return licenseRepository.findById(id);
  }

  /**
   * remind：0 不提醒，1 首页弹窗提醒，2 所有页面弹窗提醒.
   *
   * @return.
   */
  @Override
  public JSONObject getRemainTime(Integer numAgentId) {
    JSONObject data = new JSONObject();
    JSONObject result = new JSONObject();
    App app = null;
    try {
      app = licenseRepository.findById(numAgentId);
    } catch (Exception e) {
      log.error("Error:{}", e);
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }

    Date dateNow = new Date();
    //判断license到期时间字段是否为空
    if (app.getDateEndTime() != null) {
      Date dateEnd = app.getDateEndTime();
      // 获得两个时间的毫秒时间差异
      long longDiff = dateEnd.getTime() - dateNow.getTime();
      // 计算差多少天
      long longDays = longDiff / (1000 * 24 * 60 * 60);
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
      data.put("cer_end_time", sdf.format(dateEnd));
      //距离license到期30天开始首页弹窗提醒，逾期30天说有页面弹窗提醒，否则不提醒
      if (-30 < longDays && longDays <= 30) {
        data.put("remind", 1);
      } else if (longDays <= -30) {
        data.put("remind", 2);
      } else {
        data.put("remind", 0);
      }
    } else {
      data.put("remind", 0);
    }
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;

  }

  @Override
  public JSONObject getLicenseDetail(String userId) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray arrayResult = new JSONArray();
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int sessionUserId = Integer
        .parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userRepo.findById(sessionUserId);
    List<App> listAllApps = new ArrayList<>();
    if (userService.isSuperAdmin(user)) {
      listAllApps = appRepository.findAll();
    } else if (userService.isAdmin(user)) {
      listAllApps = appRepository.findByUserId(sessionUserId);
    }
    if (userId != null) {
      listAllApps = appRepository.findByUserId(Integer.valueOf(userId));

    }

    for (App app : listAllApps) {
      if (app.getId().intValue() != 1) {
        JSONObject job = new JSONObject();
        String strParameters = app.getParameters() == null ? "" : app.getParameters();
        job.put("app_name", app.getName());
        job.put("app_id", app.getId());
        JSONArray jsonArray = new JSONArray();
        if (!strParameters.isEmpty()) {
          JSONObject paramJsonObject = JSONObject.parseObject(strParameters);
          //功能有效期控制
          JSONObject jobLogicSwitch = paramJsonObject.getJSONObject("logic_switch");
          String[] config = {"emulator", "debug", "inject", "position", "crash", "game_cheating",
              "accelerate",
              "device_reuse", "host"};
          for (String str : config) {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("app_id", app.getId());
            jsonObject.put("fun_name", str);
            jsonObject.put("status", paramJsonObject.get(str));
            //获得各功能的有效期
            JSONObject jobFun = jobLogicSwitch.getJSONObject(str);
            if (jobFun == null) {
              continue;
            }
            if (jobFun.getLong("start") != 0 || jobFun.getLong("end") != 0) {
              jsonObject.put("start_time", sdf.format(new Date(jobFun.getLong("start"))));
              jsonObject.put("end_time", sdf.format(new Date(jobFun.getLong("end"))));
            } else {
              jsonObject.put("start_time", "-");
              jsonObject.put("end_time", "-");
            }
            jsonArray.add(jsonObject);

          }
          job.put("cer_list", jsonArray);
        }
        arrayResult.add(job);
      }
    }
    JSONObject data = new JSONObject();
    JSONObject result = new JSONObject();
    data.put("datalist", arrayResult);
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;
  }

  /**
   * 应用列表.
   */
  public JSONObject findAllApplication() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userRepo.findById(userId);
    List<App> listAllApps = new ArrayList<>();
    if (userService.isSuperAdmin(user)) {
      listAllApps = appRepository.findAll();
    } else if (userService.isAdmin(user)) {
      listAllApps = appRepository.findByUserId(userId);
    }
    JSONArray jsonArray = new JSONArray();
    for (App app : listAllApps) {
      String parameters = app.getParameters();
      parameters = parameters == null ? "" : parameters.replace("[", "");
      parameters = parameters == null ? "" : parameters.replace("]", "");
      //获取Parameters里的json
      JSONObject parametersJsonObject =
          parameters.isEmpty() ? null : JSONObject.parseObject(parameters);
      // 设备类型
      String osPlatform = "";
      if (parametersJsonObject != null) {
        osPlatform = parametersJsonObject.containsKey("os_platform") ? parametersJsonObject
            .getString("os_platform") : "";
      }
      if (app.getId().intValue() != 1) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("app_id", app.getId());
        jsonObject.put("app_name", app.getName());
        jsonObject.put("platform", osPlatform);
        jsonObject.put("status", "成功");
        jsonObject.put("user_email", app.getOwnerEmail());
        jsonObject.put("user_name", app.getOwner());
        jsonObject.put("user_phone", app.getOwnerPhone());
        jsonArray.add(jsonObject);
      }
    }
    JSONObject data = new JSONObject();
    JSONObject result = new JSONObject();
    data.put("datalist", jsonArray);
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;
  }


  //回显
  @Override
  public JSONObject echo(Integer id) {
    JSONObject result = new JSONObject();
    App appObject = null;
    try {
      appObject = appRepository.findById(id);
    } catch (Exception e) {
      log.error("Error:{}", e);
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    JSONObject dataObject = new JSONObject();
    dataObject.put("app_name", appObject.getName() == null ? "" : appObject.getName());
    dataObject.put("user_email",
        appObject.getOwnerEmail() == null ? "" : appObject.getOwnerEmail());
    dataObject.put("user_name", appObject.getOwner() == null ? "" : appObject.getOwner());
    dataObject.put("user_phone",
        appObject.getOwnerPhone() == null ? "" : appObject.getOwnerPhone());
    result.put("code", 0);
    result.put("data", dataObject);
    result.put("msg", "");
    return result;
  }

  //修改
  @Override
  public JSONObject update(Integer appId, String appName, String userEmail, String userName,
      String userPhone) {
    App appListJson = appRepository.findById(appId);
    JSONObject jsonObject = new JSONObject();
    if (appListJson != null) {
      appListJson.setName(appName);
      if (appName.isEmpty() || userEmail.isEmpty() || userName.isEmpty() || userPhone.isEmpty()) {
        jsonObject.put("code", 1);
        jsonObject.put("msg", ErrorInfo.ParamMustExist.getInfo());
        return jsonObject;
      }
      String expr = "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\."
          + "[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})$";
      //判断邮箱格式
      if (!userEmail.matches(expr)) {
        jsonObject.put("code", 1);
        jsonObject.put("msg", ErrorInfo.ErrorEmailFormat.getInfo());
        return jsonObject;
      }
      //判断手机格式
      Pattern pattern = Pattern
          .compile("^((13[0-9])|(14[5,7])|(15[^4,\\D])|(17[6-8])|(18[0-9]))\\d{8}$");
      Matcher matcher = pattern.matcher(userPhone);
      if (!matcher.matches()) {
        jsonObject.put("code", 1);
        jsonObject.put("msg", ErrorInfo.ErrorPhoneFormat.getInfo());
        return jsonObject;
      }

      appListJson.setOwnerEmail(userEmail);
      appListJson.setOwner(userName);
      appListJson.setOwnerPhone(userPhone);

      appRepository.save(appListJson);
      jsonObject.put("code", 0);
      jsonObject.put("msg", "");
    }

    return jsonObject;
  }


  @Override
  public HashMap decryptLicenseFile(MultipartFile licenseFile) {
    BufferedReader reader = null;
    InputStream is = null;
    HashMap licenseInfo = new HashMap();
    List<JSONObject> appList = new ArrayList<>();

    try {
      is = licenseFile.getInputStream();
      reader = new BufferedReader(new InputStreamReader(is));
      String line = null;
      while ((line = reader.readLine()) != null) {
        JSONObject lineJson = JSON.parseObject(cryptService.decryptLicenseString(line));

        if (lineJson.get("user_name") != null) {
          licenseInfo.put("user_info", lineJson);
        } else if (lineJson.get("app_id") != null) {
          appList.add(lineJson);
        }

      }

    } catch (Exception e) {
      log.error("{}", e);
    } finally {
      if (reader != null) {
        try {
          reader.close();
        } catch (IOException e) {
          log.error("{}", e);
        }
      }
      if (is != null) {
        try {
          is.close();
        } catch (IOException e) {
          log.error("{}", e);
        }
      }
    }

    licenseInfo.put("app_list", appList);
    System.out.println("licenseInfo:" + licenseInfo);
    return licenseInfo;
  }

  @Override
  public JSONObject createOrUpdateLicense(HashMap licenseInfo) {
    JSONObject result = new JSONObject();
    result.put("code", 1);
    JSONObject userInfo = (JSONObject) licenseInfo.get("user_info");
    log.info("userinfo = {}", userInfo);
    User user = updateUser(userInfo);
    if (user.getGroupId() > 0) {
      List<Integer> appIds = new ArrayList();
      List<JSONObject> appList = (List<JSONObject>) licenseInfo.get("app_list");
      log.info("appList = {}", appList.toArray());
      for (JSONObject appInfo : appList) {
        log.info("appInfo:{}", appInfo.toJSONString());
        App app = updateApp(appInfo, user.getGroupId(), appList);
        //插入默认位置欺诈信息.
        JSONObject jsonObject = threatLocationFraudService.cheatAddrConfigSelect(app.getId());
        JSONObject data = (JSONObject) jsonObject.get("data");
        if (data.isEmpty()) {
          threatLocationFraudService.cheatAddrConfigInsert(2.0, 15, app.getId(), new Date());
        }
        appIds.add(app.getId());
      }

      if (appIds.size() > 0) {
        //删除证书中已经没有的app信息
        List<App> delApp = appRepository
            .findDelApp(user.getGroupId(), appIds.toArray(new Integer[appIds.size()]));
        if (delApp != null) {
          for (App delapp : delApp) {
            appRepository.delete(delapp);
          }
        }
        //删除用户中app信息
        List<User> findUser = userRepository.findByCorpName(user.getCorpName());
        for (User userTmp : findUser) {
          List<Integer> userAppIds = JSON.parseArray(userTmp.getOperableApps(), Integer.class);
          if (userAppIds != null && userAppIds.size() > 0) {
            userAppIds.retainAll(appIds);
            userTmp.setOperableApps(JSON.parseArray(userAppIds.toString()).toString());
            userRepository.save(userTmp);
          }
        }
      }

    }
    result.put("code", 0);
    return result;
  }

  // 创建用户、更新用户和license.
  private User updateUser(JSONObject userJsonObject) {
    String corpName = userJsonObject.getString("corp_name");
    List<User> users = userRepository.findByCorpName(corpName);
    User user = null;
    if (!users.isEmpty()) {
      user = users.get(0);
      user.setCorpName(corpName);
      user.setEmail(userJsonObject.getString("e_mail"));

      /*String salt = BCrypt.gensalt();
      String password = BCrypt.hashpw(userJsonObject.getString("passwd"), salt);
      user.setEncryptedPassword(password);*/
      user.setName(userJsonObject.getString("user_name"));
      user.setRoleId(PubString.ADMIN_USER);
      /*user.setStartTime(userJsonObject.getString("start"));
      user.setEndTime(userJsonObject.getString("end"));*/
      Date now = new Date();
      user.setUpdatedAt(now);
      userRepository.save(user);
      // 更新license信息.
    } else {
      user = new User();
      user.setCorpName(corpName);
      user.setEmail(userJsonObject.getString("e_mail"));
      //密码加密
      String salt = BCrypt.gensalt();
      String password = BCrypt.hashpw(userJsonObject.getString("passwd"), salt);
      user.setEncryptedPassword(password);
      user.setName(userJsonObject.getString("user_name"));
      user.setRoleId(PubString.ADMIN_USER);
      Date now = new Date();
      user.setCreatedAt(now);
      user.setUpdatedAt(now);
      userRepository.save(user);
      log.info("insert user = {}", user);
      user.setGroupId(user.getId());
      userRepository.save(user);
    }
    return user;
  }

  // 创建app，更新app和license.
  private App updateApp(JSONObject appJsonObject, int groupId, List<JSONObject> appList) {
    // 这考虑在license增加corp_name.
    Integer appId = appJsonObject.getInteger("app_id");
    App app = appRepository.findById(appId);
    if (app == null) {
      app = new App();
      app.setId(appId);
      app.setName(appJsonObject.getString("name"));
      app.setPkgName(appJsonObject.getString("pkg_expr"));
//      app.setDliveInfo(appJsonObject.getInteger("dlive_info"));
      app.setDateStartTime(appJsonObject.getDate("start"));
      app.setDateEndTime(appJsonObject.getDate("end"));
      Date now = new Date();
      app.setCreatedAt(now);
      app.setUpdatedAt(now);
      app.setUserId(groupId);
    } else {
      app.setId(appId);
      app.setName(appJsonObject.getString("name"));
      app.setPkgName(appJsonObject.getString("pkg_expr"));
//      app.setDliveInfo(appJsonObject.getInteger("dlive_info"));
      app.setDateStartTime(appJsonObject.getDate("start"));
      app.setDateEndTime(appJsonObject.getDate("end"));
      Date now = new Date();
      app.setUpdatedAt(now);
      app.setUserId(groupId);
    }
    if (appList.size() > 0) {
      for (JSONObject object : appList) {
        if (object.getIntValue("app_id") == appId) {
          app.setParameters(object.toJSONString());
        }
      }
    }
    appRepository.save(app);
    return app;
  }


}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.MSSPErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.LicenseService;
import com.bangcle.service.MsspApiService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.CryptService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.AESUtils;
import com.bangcle.util.BCrypt;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.bucket.filter.Filters;
import org.elasticsearch.search.aggregations.bucket.filter.FiltersAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/4/13.
 */
@Slf4j
@Service
public class MsspApiServiceImpl implements MsspApiService {

  @Autowired
  private CryptService cryptService;
  @Autowired
  private LicenseService licenseService;
  @Autowired
  private UserRepository userRepository;
  @Autowired
  private AppRepository appRepository;
  @Autowired
  private EsRepository es;
  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private CommonAggService commonAggService;
  private final String MSSP_AES_KEY = "09cf2dd511ae7c1b";

  @Override
  public JSONObject heartbeat(JSONObject dataJsonObject) {
    JSONObject resultData = new JSONObject();
    resultData.put("state", 1);
    resultData.put("version", "v4.0");

    JSONObject result = new JSONObject();
    result.put("ret_code", 0);
    result.put("data", resultData);
    result.put("msg", "");
    return result;
  }

  @Override
  public JSONObject register(JSONObject dataJsonObject) {
    HashMap licenseInfo = new HashMap();
    String userLicense = dataJsonObject.getString("userLicense");
    JSONObject userLineJson = change2Json(cryptService.decryptLicenseString(userLicense));
    if (userLineJson == null) {
      JSONObject result = new JSONObject();
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_LicenseParseError.getInfo());
      return result;
    }
    licenseInfo.put("user_info", userLineJson);
    JSONArray appLicense = dataJsonObject.getJSONArray("appLicense");
    List<JSONObject> appList = new ArrayList<>();
    for (int i = 0; i < appLicense.size(); i++) {
      String appInfo = appLicense.getString(i);
      JSONObject appJson = JSON.parseObject(cryptService.decryptLicenseString(appInfo));
      appList.add(appJson);
    }
    licenseInfo.put("app_list", appList);
    log.debug("licenseInfo = {}", licenseInfo);
    JSONObject creatResult = licenseService.createOrUpdateLicense(licenseInfo);
    if (creatResult.getInteger("code").equals(0)) {
      JSONObject result = new JSONObject();
      result.put("ret_code", 0);
      result.put("ret_msg", "");
      return result;
    } else {
      JSONObject result = new JSONObject();
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_LicenseSaveFail.getInfo());
      return result;
    }
  }

  @Override
  public JSONObject registerOperator(JSONObject dataJsonObject) {
    JSONObject result = new JSONObject();
    String msspUserName = dataJsonObject.getString("username");
    String userLicense = dataJsonObject.getString("userLicense");
    Integer appId = dataJsonObject.getInteger("app_id");
    if (msspUserName == null || userLicense == null || appId == null) {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
      return result;
    } else {
      String decodeLicense = cryptService.decryptLicenseString(userLicense);
      JSONObject userLineJson = change2Json(decodeLicense);
      if (userLineJson == null) {
        result.put("ret_code", 1);
        result.put("ret_msg", MSSPErrorInfo.MSSP_LicenseParseError.getInfo());
        return result;
      } else {
        String corpName = userLineJson.getString("corp_name");
        List<User> superUserList = userRepository.findByCorpName(corpName);
        if (superUserList.isEmpty()) {
          result.put("ret_code", 1);
          result.put("ret_msg", MSSPErrorInfo.MSSP_NoPermission.getInfo());
          return result;
        } else {
          User superUser = superUserList.get(0);
          App app = appRepository.findById(appId);
          if (app == null) {
            result.put("ret_code", 1);
            result.put("ret_msg", MSSPErrorInfo.MSSP_APPMatchLicenseFail.getInfo());
            return result;
          }
          if (app.getUserId().equals(superUser.getId())) {
            msspUserName = msspUserName.trim();
            String userEmail = msspUserName + "@mssp.com";
            String password = msspUserName.toUpperCase() + "aa11";
            if (password.length() > 16) {
              password = password.substring(password.length() - 15, password.length());
            } else if (password.length() < 8) {
              password = password + "11aa";
            }
            User user = userRepository.findByMsspName(msspUserName);
            if (user == null) {
              JSONArray arrApps = new JSONArray();
              arrApps.add(appId);
              user = new User();
              user.setGroupId(superUser.getId());
              user.setMsspName(msspUserName);
              user.setName(msspUserName);
              user.setEmail(userEmail);
              //密码加密
              String salt = BCrypt.gensalt();
              password = BCrypt.hashpw(password.trim(), salt);
              user.setEncryptedPassword(password);
              user.setOperableApps(arrApps.toJSONString());
              user.setRoleId(PubString.OPERATE_USER);
              user.setCreatedAt(new Date());
              userRepository.save(user);
            } else {
              JSONArray apps = JSON.parseArray(user.getOperableApps());
              if (!apps.contains(appId)) {
                apps.add(appId);
              }
              user.setOperableApps(apps.toJSONString());
              userRepository.save(user);
            }
          } else {
            result.put("ret_code", 1);
            result.put("ret_msg", MSSPErrorInfo.MSSP_APPMatchLicenseFail.getInfo());
            return result;
          }
        }
      }
    }
    result.put("ret_code", 0);
    result.put("ret_msg", "");
    return result;
  }

  @Override
  public JSONObject getLoginKey(JSONObject dataJsonObject) {
    String msspUserName = dataJsonObject.getString("username");
    User user = userRepository.findByMsspName(msspUserName.trim());
    if (user == null) {
      JSONObject result = new JSONObject();
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_UserNotExist.getInfo());
      return result;
    } else {
      JSONObject result = new JSONObject();
      result.put("ret_code", 0);
      String randomKey = PubFunc.getRandomKey();
      user.setMsspLoginKey(randomKey);
      userRepository.save(user);
      Map<String, Object> dataMap = new HashMap<>();
      dataMap.put("key", user.getMsspLoginKey());
      result.put("data", dataMap);
      return result;
    }
  }

  @Override
  public JSONObject login(JSONObject dataJsonObject) {
    log.info("dataJsonObject = {}", dataJsonObject);
    String msspUserName = dataJsonObject.getString("username");
    String msspLoginKey = dataJsonObject.getString("key");
    User user = userRepository.findByMsspName(msspUserName.trim());
    if (user == null) {
      JSONObject result = new JSONObject();
      result.put("code", 1);
      result.put("msg", MSSPErrorInfo.MSSP_UserNotExist.getInfo());
      return result;
    } else {
      String localKey = user.getMsspLoginKey();
      if (msspLoginKey.equals(localKey)) {
        /*user.setMsspLoginKey("");
        userRepository.save(user);*/
        JSONObject result = new JSONObject();
        result.put("user", user);
        result.put("code", 0);
        result.put("msg", "");
        return result;
      } else {
        JSONObject result = new JSONObject();
        result.put("code", 1);
        result.put("msg", MSSPErrorInfo.MSSP_NoPermission.getInfo());
        return result;
      }
    }
  }


  @Override
  public JSONObject getRiskInfo(JSONObject dataJsonObject) {
    JSONObject result = new JSONObject();
    result.put("ret_code", 0);
    String startDate = dataJsonObject.getString("start_date");
    String endDate = dataJsonObject.getString("end_date");
    long[] longsTime = null;
    try {
      longsTime = TimeParse.getLongRangeTime(startDate, endDate);
    } catch (ParseException e) {
      log.error("error", e);
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_ParamFormatError.getInfo());
      return result;
    }
    JSONArray agentIds = dataJsonObject.getJSONArray("app_ids");
    JSONArray dataArray = new JSONArray();
    if (agentIds.isEmpty()) {
      result.put("data", dataArray);
      return result;
    }
    for (int i = 0; i < agentIds.size(); i++) {
      Integer agentId = agentIds.getInteger(i);
      JSONObject eachAppRiskInfo = new JSONObject();
      eachAppRiskInfo.put("app_id", agentId);
      //威胁统计数据
      JSONObject riskStatisticsResult = aggsRiskInfo(agentId, longsTime[0], longsTime[1]);
      eachAppRiskInfo.putAll(riskStatisticsResult);
      //设备终端总数
      long totalDev = countDev(agentId, longsTime[0], longsTime[1]);
      eachAppRiskInfo.put("device_count", totalDev);
      //启动信息
      JSONObject startStatisticsResult = aggsStartInfo(agentId, longsTime[0], longsTime[1]);
      eachAppRiskInfo.putAll(startStatisticsResult);
      //设备root统计
      JSONObject devRootStatisticsResult = aggsRootInfo(agentId, longsTime[0], longsTime[1]);
      eachAppRiskInfo.putAll(devRootStatisticsResult);
      dataArray.add(eachAppRiskInfo);
    }
    result.put("data", dataArray);
    return result;
  }

  @Override
  public JSONObject getListInfos(JSONObject dataJsonObject) {
    JSONObject result = new JSONObject();
    result.put("ret_code", 0);
    long startTime = dataJsonObject.getLong("start_date");
    long endTime = dataJsonObject.getLong("end_date");
    int limit = dataJsonObject.getInteger("limit");
    JSONArray agentIds = dataJsonObject.getJSONArray("app_ids");
    long currTime = System.currentTimeMillis();
    if (endTime > currTime) {
      endTime = currTime;
    }
    if (startTime > endTime) {
      startTime = endTime;
    }

    JSONArray dataArray = new JSONArray();
    if (agentIds.isEmpty()) {
      result.put("data", dataArray);
      return result;
    }
    for (int i = 0; i < agentIds.size(); i++) {
      Integer agentId = agentIds.getInteger(i);
      App app = appRepository.findById(agentId);
      if (app == null) {
        continue;
      }
      JSONObject eachAppDataList = new JSONObject();
      eachAppDataList.put("app_id", agentId);
      //威胁数据列表
      JSONObject riskListResult = riskDataList(agentId, startTime, endTime, limit);
      eachAppDataList.putAll(riskListResult);
      //启动数据列表,IOS启动数据列表
      JSONObject startListResult = startDataList(agentId, startTime, endTime, limit);
      eachAppDataList.putAll(startListResult);
      //崩溃数据列表，IOS崩溃数据列表
      JSONObject crashListResult = crashDataList(agentId, startTime, endTime, limit);
      eachAppDataList.putAll(crashListResult);

      dataArray.add(eachAppDataList);
    }
    result.put("data", dataArray);
    return result;
  }

  @Override
  public JSONObject editAppInfo(JSONObject dataJsonObject) {
    JSONObject result = new JSONObject();
    String msspUserName = dataJsonObject.getString("username");
    String appName = dataJsonObject.getString("app_name");
    int agentId = dataJsonObject.getInteger("app_id");
    User user = userRepository.findByMsspName(msspUserName);
    if (user == null) {
      result.put("ret_code", 1);
      result.put("ret_msg", MSSPErrorInfo.MSSP_UserNotExist.getInfo());
      return result;
    } else {
      JSONArray agentIds = JSON.parseArray(user.getOperableApps());
      if (agentIds.contains(agentId)) {
        App app = appRepository.findById(agentId);
        app.setName(appName);
        appRepository.save(app);
      } else {
        result.put("ret_code", 1);
        result.put("ret_msg", MSSPErrorInfo.MSSP_NoPermission.getInfo());
        return result;
      }
    }
    result.put("ret_code", 0);
    result.put("ret_msg", "");
    return result;
  }

  @Override
  public JSONObject getMonitorInfo(JSONObject dataJsonObject) {
    JSONObject result = new JSONObject();
    result.put("ret_code", 0);
    JSONArray agentIds = dataJsonObject.getJSONArray("app_ids");
    log.info("dataJsonObject = {}", dataJsonObject);
    JSONArray dataArray = new JSONArray();
    result.put("data", dataArray);
    if (agentIds.isEmpty()) {
      return result;
    }
    HashMap<String, JSONArray> rangTime = countTimeRange(dataJsonObject);
    for (int i = 0; i < agentIds.size(); i++) {
      Integer agentIdNum = agentIds.getInteger(i);
      App app = appRepository.findById(agentIdNum);
      if (app == null) {
        continue;
      }
      String agentId = agentIds.getString(i);
      JSONObject agentIddata = new JSONObject();
      agentIddata.put("app_id", agentId);
      dataArray.add(agentIddata);
      for (Map.Entry<String, JSONArray> entry : rangTime.entrySet()) {
        String countKey = entry.getKey();
        JSONArray times = entry.getValue();
        Long startTime = times.getLong(0);
        Long endTime = times.getLong(1);
        log.info("config = key : {} ,startTime : {} ,endTime : {}", countKey, startTime, endTime);
        JSONObject countJson = new JSONObject();
        //启动数据统计
        JSONObject jsonObjectStart = commonAggService
            .totalCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
                agentId, null, null, null, null, startTime, endTime, null, false);
        JSONArray startCount = new JSONArray();
        startCount.add(0, jsonObjectStart.get("count"));
        startCount.add(1, jsonObjectStart.get("dev_count"));
        countJson.put("app_startup", startCount);
        //崩溃数据统计
        JSONObject jsonObjectCrash = commonAggService
            .totalCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
                agentId, null, null, null, null, startTime, endTime, null, false);
        JSONArray crashCount = new JSONArray();
        crashCount.add(0, jsonObjectCrash.get("count"));
        crashCount.add(1, jsonObjectCrash.get("dev_count"));
        countJson.put("app_collapse", crashCount);
        //安全事件统计
        JSONObject jsonObjectEvent = commonAggService
            .totalCount(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
                agentId, null, null, null, null, startTime, endTime, null, false);
        JSONArray eventCount = new JSONArray();
        eventCount.add(0, jsonObjectEvent.get("count"));
        eventCount.add(1, jsonObjectEvent.get("dev_count"));
        countJson.put("security_event", eventCount);
        //威胁数据统计
        JSONObject jsonObjectThreat = commonAggService
            .totalCount(commonBaseService.getThreatIndexName(),
                commonBaseService.getIndexTypeName(),
                agentId, null, null, null, null, startTime, endTime, null, false);
        JSONArray threatCount = new JSONArray();
        threatCount.add(0, jsonObjectThreat.get("count"));
        threatCount.add(1, jsonObjectThreat.get("dev_count"));
        countJson.put("threat_occur", threatCount);
        agentIddata.put(countKey, countJson);
      }
      Long startTime = 0L;
      Long endTime = 0L;
      if (rangTime.containsKey("today")) {
        JSONArray times = rangTime.get("today");
        startTime = times.getLong(0);
        endTime = times.getLong(1);
      } else {
        Calendar calendar = Calendar.getInstance();
        startTime = calendar.getTimeInMillis();
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        endTime = calendar.getTimeInMillis();
      }
      JSONArray devCount = getDeviceCount(startTime, endTime, agentId);
      agentIddata.put("active_mobile", devCount);
      JSONArray threatCount = getThreatCount(agentId);
      agentIddata.put("remove_threat", threatCount);
    }
    log.info("result = {}", result);
    return result;
  }

  private JSONObject aggsRiskInfo(int appId, long startTime, long endTime) {
    JSONObject countResult = new JSONObject();
    List<String> indexs = es
        .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length <= 0) {
      return countResult;
    }
    String termsAggAppInfoName = "count_by_app_version";
    TermsAggregationBuilder termsAggregationBuilderAppInfo = creatTermsAggregationBuilder(
        termsAggAppInfoName, EsFieldModel.APP_VERSION);

    String termsAggDataTypeName = "count_by_data_type";
    TermsAggregationBuilder termsAggregationBuilderDataType = creatTermsAggregationBuilder(
        termsAggDataTypeName, EsFieldModel.DATA_TYPE);
    String termsAggManufaturerSubDataTypeName = "count_by_manufaturer_data_type";
    TermsAggregationBuilder termsAggregationBuilderManufaturerSubDataType = creatTermsAggregationBuilder(
        termsAggManufaturerSubDataTypeName, EsFieldModel.MANUFACTURER);
    String cardinalityAggUdid = "cardinality_by_udid";
    CardinalityAggregationBuilder cardinalityAggregationBuilderUdid = AggregationBuilders
        .cardinality(cardinalityAggUdid).field(EsFieldModel.UDID);
    termsAggregationBuilderManufaturerSubDataType.subAggregation(cardinalityAggregationBuilderUdid);
    termsAggregationBuilderDataType.subAggregation(termsAggregationBuilderManufaturerSubDataType);
    termsAggregationBuilderAppInfo.subAggregation(termsAggregationBuilderDataType);

    String termsAggLocationName = "count_by_location";
    TermsAggregationBuilder termsAggregationBuilderLocation = creatTermsAggregationBuilder(
        termsAggLocationName, EsFieldModel.LOCATION);
    termsAggregationBuilderAppInfo.subAggregation(termsAggregationBuilderLocation);

    String termsAggManufacturerName = "count_by_manufacturer";
    TermsAggregationBuilder termsAggregationBuilderManufacturer = creatTermsAggregationBuilder(
        termsAggManufacturerName, EsFieldModel.MANUFACTURER);
    termsAggregationBuilderAppInfo.subAggregation(termsAggregationBuilderManufacturer);

    String termsAggOsVersionName = "count_by_os_version";
    TermsAggregationBuilder termsAggregationBuilderOsVersion = creatTermsAggregationBuilder(
        termsAggOsVersionName, EsFieldModel.OS_INFO);
    termsAggregationBuilderAppInfo.subAggregation(termsAggregationBuilderOsVersion);

    //统计每天app各个版本的威胁数据，按照威胁类型、设备类型、位置、系统版本分组统计
    String dateHistogramName = "count_every_day";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME)
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")))
        .dateHistogramInterval(DateHistogramInterval.DAY);
    dateHistogramAggregationBuilder.subAggregation(termsAggregationBuilderAppInfo);
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(appId), null, null, null, null, startTime, endTime, null);
    SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(dateHistogramAggregationBuilder)
        .setSize(0);
    JSONArray dataTypeCount = new JSONArray();
    JSONArray locationCount = new JSONArray();
    JSONArray manufacturerCount = new JSONArray();
    JSONArray osVersionCount = new JSONArray();
    SearchResponse searchResponse = searchRequestBuilder.get();
    Histogram histogram = searchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entryHistogram : histogram.getBuckets()) {
      String historgramKey = TimeParse.timeSplit(false, entryHistogram.getKeyAsString());
      Terms appInfoTerms = entryHistogram.getAggregations().get(termsAggAppInfoName);
      for (Terms.Bucket appInfoTerm : appInfoTerms.getBuckets()) {
        String appInfo = appInfoTerm.getKeyAsString();
        Terms dataTypeTerms = appInfoTerm.getAggregations().get(termsAggDataTypeName);
        for (Terms.Bucket dataTypeTerm : dataTypeTerms.getBuckets()) {
          String dataType = dataTypeTerm.getKeyAsString();
          Terms manufaturerTypeTerms = dataTypeTerm.getAggregations()
              .get(termsAggManufaturerSubDataTypeName);
          for (Terms.Bucket manufaturerTypeTerm : manufaturerTypeTerms.getBuckets()) {
            String manufaturerType = manufaturerTypeTerm.getKeyAsString();
            long riskCount = manufaturerTypeTerm.getDocCount();
            Cardinality udidsCardinality = manufaturerTypeTerm.getAggregations()
                .get(cardinalityAggUdid);
            long devCount = udidsCardinality.getValue();
            JSONArray dataCell = new JSONArray();
            dataCell.set(0, appInfo);
            dataCell.set(1, manufaturerType);
            dataCell.set(2, dataType);
            dataCell.set(3, riskCount);
            dataCell.set(4, devCount);
            dataCell.set(5, historgramKey);
            dataTypeCount.add(dataCell);
          }
        }
        Terms locationTerms = appInfoTerm.getAggregations().get(termsAggLocationName);
        for (Terms.Bucket locationTerm : locationTerms.getBuckets()) {
          String key = locationTerm.getKeyAsString();
          long docCount = locationTerm.getDocCount();
          JSONArray dataCell = new JSONArray();
          dataCell.set(0, appInfo);
          dataCell.set(1, key);
          dataCell.set(2, docCount);
          dataCell.set(3, historgramKey);
          locationCount.add(dataCell);
        }
        Terms manufacturerTerms = appInfoTerm.getAggregations().get(termsAggManufacturerName);
        for (Terms.Bucket manufacturerTerm : manufacturerTerms.getBuckets()) {
          String key = manufacturerTerm.getKeyAsString();
          long docCount = manufacturerTerm.getDocCount();
          JSONArray dataCell = new JSONArray();
          dataCell.set(0, appInfo);
          dataCell.set(1, key);
          dataCell.set(2, docCount);
          dataCell.set(3, historgramKey);
          manufacturerCount.add(dataCell);
        }
        Terms osVersionTerms = appInfoTerm.getAggregations().get(termsAggOsVersionName);
        for (Terms.Bucket osVersionTerm : osVersionTerms.getBuckets()) {
          String key = osVersionTerm.getKeyAsString();
          long docCount = osVersionTerm.getDocCount();
          JSONArray dataCell = new JSONArray();
          dataCell.set(0, appInfo);
          dataCell.set(1, key);
          dataCell.set(2, docCount);
          dataCell.set(3, historgramKey);
          osVersionCount.add(dataCell);
        }
      }
    }
    countResult.put("risk_device", dataTypeCount);
    // "device": [ [ 版本, 设备, 数量, 日期], ..]
    countResult.put("device", manufacturerCount);
    // "location": [ [ 版本, 位置, 数量, 日期], ..]
    countResult.put("location", locationCount);
    // "os_version": [ [ 版本, 系统版本, 数量, 日期], ..]
    countResult.put("os_version", osVersionCount);
    return countResult;
  }

  private JSONObject aggsStartInfo(int appId, long startTime, long endTime) {

    JSONObject countResult = new JSONObject();
    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length <= 0) {
      return countResult;
    }
    String termsAggAppInfoName = "count_by_app_version";
    TermsAggregationBuilder termsAggregationBuilderAppInfo = creatTermsAggregationBuilder(
        termsAggAppInfoName, EsFieldModel.APP_VERSION);

    String termsAggLocationName = "count_by_location";
    TermsAggregationBuilder termsAggregationBuilderLocation = creatTermsAggregationBuilder(
        termsAggLocationName, EsFieldModel.LOCATION);
    termsAggregationBuilderAppInfo.subAggregation(termsAggregationBuilderLocation);

    //统计每天app各个版本的威胁数据，按照威胁类型、设备类型、位置、系统版本分组统计
    String dateHistogramName = "count_every_day";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME)
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")))
        .dateHistogramInterval(DateHistogramInterval.DAY);
    dateHistogramAggregationBuilder.subAggregation(termsAggregationBuilderAppInfo);
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(appId), null, null, null, null, startTime, endTime, null);
    SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(dateHistogramAggregationBuilder)
        .setSize(0);

    JSONArray startLocationCount = new JSONArray();

    SearchResponse searchResponse = searchRequestBuilder.get();
    Histogram histogram = searchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entryHistogram : histogram.getBuckets()) {
      String historgramKey = TimeParse.timeSplit(false, entryHistogram.getKeyAsString());
      Terms appVersionTerms = entryHistogram.getAggregations().get(termsAggAppInfoName);
      for (Terms.Bucket appVersionTerm : appVersionTerms.getBuckets()) {
        String appInfo = appVersionTerm.getKeyAsString();
        Terms locationTerms = appVersionTerm.getAggregations().get(termsAggLocationName);
        for (Terms.Bucket locationTerm : locationTerms.getBuckets()) {
          String key = locationTerm.getKeyAsString();
          long docCount = locationTerm.getDocCount();
          JSONArray dataCell = new JSONArray();
          dataCell.add(0, appInfo);
          dataCell.add(1, key);
          dataCell.add(2, docCount);
          dataCell.add(3, historgramKey);
          startLocationCount.add(dataCell);
        }
      }
    }
    countResult.put("start_location", startLocationCount);
    return countResult;
  }

  private JSONObject aggsRootInfo(int agentId, long startTime, long endTime) {

    JSONObject countResult = new JSONObject();
    String filtersRootName = "count_by_is_root";
    FiltersAggregationBuilder filtersAggregationBuilder = AggregationBuilders
        .filters(filtersRootName, QueryBuilders.queryStringQuery("is_root:true"));
    //统计每天app各个版本的威胁数据，按照威胁类型、设备类型、位置、系统版本分组统计
    String dateHistogramName = "count_every_day";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME)
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")))
        .dateHistogramInterval(DateHistogramInterval.DAY);
    dateHistogramAggregationBuilder.subAggregation(filtersAggregationBuilder);
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(agentId), null, null, null, null, startTime, endTime,
            null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(commonBaseService.getDevIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(dateHistogramAggregationBuilder)
        .setSize(0);

    JSONArray rootCountArray = new JSONArray();
    SearchResponse searchResponse = searchRequestBuilder.get();
    Histogram histogram = searchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entryHistogram : histogram.getBuckets()) {
      String historgramKey = TimeParse.timeSplit(false, entryHistogram.getKeyAsString());
      long devCount = entryHistogram.getDocCount();
      long rootCount = 0;
      Filters rootFilters = entryHistogram.getAggregations().get(filtersRootName);
      for (Filters.Bucket rootFilter : rootFilters.getBuckets()) {
        long platCount = rootFilter.getDocCount();
        rootCount = +platCount;
      }
      JSONArray rootJSONArray = new JSONArray();
      rootJSONArray.add(0, true);
      rootJSONArray.add(1, rootCount);
      rootJSONArray.add(2, historgramKey);
      rootCountArray.add(rootJSONArray);
      JSONArray noRootJSONArray = new JSONArray();
      noRootJSONArray.add(0, false);
      noRootJSONArray.add(1, (devCount - rootCount));
      noRootJSONArray.add(2, historgramKey);
      rootCountArray.add(noRootJSONArray);
    }
    countResult.put("root", rootCountArray);
    return countResult;
  }

  private long countDev(int agentId, long startTime, long endTime) {
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(agentId), null, null, null, null, startTime, endTime,
            null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(commonBaseService.getDevIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(0);
    SearchResponse searchResponse = searchRequestBuilder.get();
    long totaldev = searchResponse.getHits().getTotalHits();
    return totaldev;
  }

  private TermsAggregationBuilder creatTermsAggregationBuilder(String termsAggregationName,
      String field) {
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders
        .terms(termsAggregationName)
        .field(field)
        .shardSize(PubString.shardSize)
        .size(PubString.lsize);
    return termsAggregationBuilder;
  }

  private JSONObject riskDataList(int agentId, long startTime, long endTime, int size) {
    JSONObject riskData = new JSONObject();
    List<String> indexs = es
        .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length <= 0) {
      return riskData;
    }
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(agentId), null, null, null, null, startTime, endTime,
            null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(size);
    JSONArray riskArray = new JSONArray();
    SearchResponse searchResponse = searchRequestBuilder.get();
    long totalDoc = searchResponse.getHits().getTotalHits();
    SearchHit[] searchHits = searchResponse.getHits().getHits();
    for (SearchHit hits : searchHits) {
      Map mapSource = hits.getSourceAsMap();
      JSONArray dataCell = new JSONArray();
      dataCell.add(0, mapSource.get(EsFieldModel.TIME_STAMP));
      dataCell.add(1, mapSource.get(EsFieldModel.APP_NAME));
      dataCell.add(2, mapSource.get(EsFieldModel.APP_VERSION));
      dataCell.add(3, mapSource.get(EsFieldModel.NETWORK));
      dataCell.add(4, mapSource.get(EsFieldModel.MANUFACTURER));
      dataCell.add(5, mapSource.get(EsFieldModel.OS_INFO));
      dataCell.add(6, mapSource.get(EsFieldModel.LOCATION));
      dataCell.add(7, mapSource.get(EsFieldModel.DATA_TYPE));
      riskArray.add(dataCell);
    }
    riskData.put("risk", riskArray);
    return riskData;
  }

  private JSONObject startDataList(int agentId, long startTime, long endTime, int size) {
    JSONObject startData = new JSONObject();
    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length <= 0) {
      return startData;
    }
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(agentId), null, null, null, null, startTime, endTime,
            null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(size);
    JSONArray startArray = new JSONArray();
    SearchResponse searchResponse = searchRequestBuilder.get();
    SearchHit[] searchHits = searchResponse.getHits().getHits();
    for (SearchHit hits : searchHits) {
      Map mapSource = hits.getSourceAsMap();
      JSONArray dataCell = new JSONArray();
      dataCell.add(0, mapSource.get(EsFieldModel.TIME_STAMP));
      dataCell.add(1, mapSource.get(EsFieldModel.APP_NAME));
      dataCell.add(2, mapSource.get(EsFieldModel.APP_VERSION));
      dataCell.add(3, mapSource.get(EsFieldModel.UNAME));
      dataCell.add(4, mapSource.get(EsFieldModel.NETWORK));
      dataCell.add(5, mapSource.get(EsFieldModel.MANUFACTURER));
      dataCell.add(6, mapSource.get(EsFieldModel.OS_INFO));
      dataCell.add(7, mapSource.get(EsFieldModel.LOCATION));
      dataCell.add(8, mapSource.get(EsFieldModel.UDID_FROM));
      startArray.add(dataCell);
    }
    startData.put("start", startArray);
    return startData;
  }

  private JSONObject crashDataList(int agentId, long startTime, long endTime, int size) {
    JSONObject crashData = new JSONObject();
    List<String> indexs = es
        .getIndexs(commonBaseService.getCrashIndexName(), startTime, endTime, "yyyyMMdd");
    String[] indexExist = es.washIndex(indexs);
    if (indexExist.length <= 0) {
      return crashData;
    }
    // 条件过滤，应用id.
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(Long.toString(agentId), null, null, null, null, startTime, endTime,
            null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(size);
    JSONArray crashArray = new JSONArray();
    SearchResponse searchResponse = searchRequestBuilder.get();
    SearchHit[] searchHits = searchResponse.getHits().getHits();
    for (SearchHit hits : searchHits) {
      Map mapSource = hits.getSourceAsMap();
      JSONArray dataCell = new JSONArray();
      dataCell.add(0, mapSource.get(EsFieldModel.TIME_STAMP));
      dataCell.add(1, mapSource.get(EsFieldModel.APP_NAME));
      dataCell.add(2, mapSource.get(EsFieldModel.APP_VERSION));
      dataCell.add(3, mapSource.get(EsFieldModel.CRASH_REASON));
      dataCell.add(4, mapSource.get(EsFieldModel.NETWORK));
      dataCell.add(5, mapSource.get(EsFieldModel.MANUFACTURER));
      dataCell.add(6, mapSource.get(EsFieldModel.OS_INFO));
      dataCell.add(7, mapSource.get(EsFieldModel.LOCATION));
      crashArray.add(dataCell);
    }
    crashData.put("crash", crashArray);
    return crashData;
  }

  // 返回加密的数据
  @Override
  public String genEncryptData(JSONObject result) {
    String retData = JSON.toJSONString(result);
    retData = AESUtils.msspEncrypt(retData, MSSP_AES_KEY);
    return retData;
  }

  private JSONObject change2Json(String data) {
    try {
      JSONObject jsonObject = JSON.parseObject(data);
      return jsonObject;
    } catch (JSONException e) {
      log.error("error", e);
    }
    return null;
  }

  @Override
  public JSONObject checkParamFormat(String data) {
    JSONObject checkResult = new JSONObject();
    checkResult.put("check", false);
    checkResult.put("jsonData", null);
    String postData = AESUtils.msspDecrypt(data, MSSP_AES_KEY);
    if (postData == null || "".equals(postData)) {
      return checkResult;
    }

    JSONObject dataJsonObject = change2Json(postData);
    if (dataJsonObject == null) {
      return checkResult;
    }
    checkResult.put("check", true);
    checkResult.put("jsonData", dataJsonObject);
    return checkResult;
  }

  private HashMap<String, JSONArray> countTimeRange(JSONObject requestData) {
    HashMap<String, JSONArray> timeRange = new HashMap<>();
    Object startTime = requestData.get("start_time");
    Object endTime = requestData.get("end_time");
    if (startTime != null && endTime != null) {
      JSONArray time = new JSONArray();
      time.add(0, startTime);
      time.add(1, endTime);
      timeRange.put("info", time);
    } else {
      Calendar calendar = Calendar.getInstance();
      Long endDefaultTime = calendar.getTimeInMillis();
      calendar.set(Calendar.HOUR_OF_DAY, 0);
      calendar.set(Calendar.MINUTE, 0);
      calendar.set(Calendar.SECOND, 0);
      Long todayStartTime = calendar.getTimeInMillis();
      Long yesterdayStartTime = todayStartTime - 1000 * 60 * 60 * 24L;
      Long weekStartTime = endDefaultTime - 1000 * 60 * 60 * 24 * 7L;
      Long monthStartTime = endDefaultTime - 1000 * 60 * 60 * 24 * 30L;
      JSONArray todayRange = new JSONArray();
      todayRange.add(0, todayStartTime);
      todayRange.add(1, endDefaultTime);
      timeRange.put("today", todayRange);
      JSONArray yesterdayRange = new JSONArray();
      yesterdayRange.add(0, yesterdayStartTime);
      yesterdayRange.add(1, todayStartTime);
      timeRange.put("yesterday", yesterdayRange);
      JSONArray weekRange = new JSONArray();
      weekRange.add(0, weekStartTime);
      weekRange.add(1, endDefaultTime);
      timeRange.put("week", weekRange);
      JSONArray monthRange = new JSONArray();
      monthRange.add(0, monthStartTime);
      monthRange.add(1, endDefaultTime);
      timeRange.put("month", monthRange);
    }
    return timeRange;
  }

  private JSONArray getDeviceCount(Long startTime, Long endTime, String agentId) {
    JSONArray countArray = new JSONArray();
    //启动数据统计
    JSONObject jsonStart = commonAggService
        .totalCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            agentId, null, null, null, null, startTime, endTime, null, false);
    countArray.add(0, jsonStart.get("dev_count"));

    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(agentId, null, null, null, null, 0L, 0L, null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(commonBaseService.getDevIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(0);
    SearchResponse searchResponse = searchRequestBuilder.get();
    countArray.add(1, searchResponse.getHits().getTotalHits());
    return countArray;
  }

  private JSONArray getThreatCount(String agentId) {
    JSONArray countArray = new JSONArray();
    List<String> listPlotTypes = new ArrayList<>();
    listPlotTypes.add("msg");
    listPlotTypes.add("msgquit");
    listPlotTypes.add("quit");
    listPlotTypes.add("white");
    BoolQueryBuilder threatBoolQueryBuilder = QueryBuilders.boolQuery();
    threatBoolQueryBuilder.must(QueryBuilders.termsQuery(EsFieldModel.PLOT_TYPE, listPlotTypes));
    threatBoolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, agentId));
    SearchRequestBuilder threatSearchRequestBuilder = es.client
        .prepareSearch(commonBaseService.getThreatIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(threatBoolQueryBuilder)
        .setSize(0);
    SearchResponse threatSearchResponse = threatSearchRequestBuilder.get();
    countArray.add(0, threatSearchResponse.getHits().getTotalHits());

    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(agentId, null, null, null, null, 0L, 0L, null);
    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(commonBaseService.getThreatIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .setSize(0);
    SearchResponse searchResponse = searchRequestBuilder.get();
    countArray.add(1, searchResponse.getHits().getTotalHits());
    return countArray;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ProtectStrategy;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.ProtectStrategyRepository;
import com.bangcle.service.ProtectStrategyService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service
@Slf4j
public class ProtectStrategyServiceImpl implements ProtectStrategyService {

  @Autowired
  private ProtectStrategyRepository protectStrategyRepository;
  @Autowired
  private EsRepository es;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;

  @Override
  public JSONObject findAll(String appId) {
    JSONObject jsonObject = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    try {
      List<ProtectStrategy> list = protectStrategyRepository.findByAppId(appId);
      if (list.size() > 7) {
        for (ProtectStrategy protectStrategy : list) {
          JSONObject json = new JSONObject();
          json.put("status", protectStrategy.getStatus());
          json.put("plot_type", protectStrategy.getStrategy());
          json.put("threat_type", protectStrategy.getThreatType());
          json.put("num_id", protectStrategy.getId());
          json.put("message", protectStrategy.getMessage());
          jsonArray.add(json);
        }
      } else {
        ProtectStrategy protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategyRepository.delete(protectStrategy);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("emulator");
        protectStrategy.setMessage("请勿使用模拟器！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("location");
        protectStrategy.setMessage("请勿使用位置欺诈！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("host_fraud");
        protectStrategy.setMessage("请勿使用域名检测！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("devices_reuse");
        protectStrategy.setMessage("请勿重用设备！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("inject");
        protectStrategy.setMessage("请勿使用注入攻击！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("debug");
        protectStrategy.setMessage("请勿使用调试行为！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("game_plugin");
        protectStrategy.setMessage("请勿使用程序外挂！");
        protectStrategyRepository.save(protectStrategy);
        protectStrategy = new ProtectStrategy();
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setAppId(appId);
        protectStrategy.setStatus(0);
        protectStrategy.setStrategy(0);
        protectStrategy.setThreatType("speed");
        protectStrategy.setMessage("请勿使用系统加速！");
        protectStrategyRepository.save(protectStrategy);
        list = protectStrategyRepository.findByAppId(appId);
        for (ProtectStrategy ps : list) {
          JSONObject json = new JSONObject();
          json.put("status", ps.getStatus());
          json.put("plot_type", ps.getStrategy());
          json.put("threat_type", ps.getThreatType());
          json.put("num_id", ps.getId());
          jsonArray.add(json);
        }
      }
    } catch (Exception e) {
      log.error("" + e);
      jsonObject.put("code", 1);
      jsonObject.put("msg", ErrorInfo.ErrorRequst.getInfo());
    }
    jsonObject.put("code", 0);
    jsonObject.put("datalist", jsonArray);
    jsonObject.put("msg", "");
    return jsonObject;
  }


  @Override
  public JSONObject updateStrategy(Integer strategy, Integer status, Integer id, String appId,
      String message) {
    JSONObject jsonObject = new JSONObject();
    try {
      ProtectStrategy protectStrategy = protectStrategyRepository.findOne(id);
      if (protectStrategy != null && protectStrategy.getAppId().equals(appId)) {
        if (strategy != null && strategy > -1) {
          protectStrategy.setStrategy(strategy);
        }
        if (status != null && status > -1) {
          protectStrategy.setStatus(status);
        }
        if (!StringUtils.isEmpty(message)) {
          protectStrategy.setMessage(message);
        }
        protectStrategyRepository.save(protectStrategy);
      }
    } catch (Exception e) {
      log.error("" + e);
      jsonObject.put("code", 1);
      jsonObject.put("msg", ErrorInfo.ErrorUpdate.getInfo());
    }
    jsonObject.put("code", 0);
    jsonObject.put("msg", "");
    return jsonObject;
  }

  @Override
  public JSONObject findThreatByStrategy(String appId, List<String> manufacturerList,
      List<String> threatTypeList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, long page, long size) {
    JSONObject jsonResult = new JSONObject();
    try {
      //conditionJson.put("isStrategy",true);//只查询被策略命中的威胁
      JSONObject jsonObject = commonAggService
          .searchList(commonBaseService.getThreatIndexName(), commonBaseService.getIndexTypeName(),
              appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
              endTime, threatTypeList, page, size, null, false);
      JSONArray jsonArray = jsonObject.getJSONArray("data_list");
      JSONArray dataList = new JSONArray();
      DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); //HH表示24小时制；
      for (int i = 0; i < jsonArray.size(); i++) {
        JSONObject json = (JSONObject) jsonArray.get(i);
        JSONObject jsonThreat = new JSONObject();
        jsonThreat.put("app_info", json.getString("app_info"));
        jsonThreat.put("ip", json.getString("client_ip"));
        jsonThreat.put("location", json.getString("location"));
        jsonThreat.put("model", json.getString("model"));
        jsonThreat.put("network", json.getString("net_type"));
        jsonThreat.put("os_info", json.getString("os_info"));
        jsonThreat.put("threat_type", json.getString("protol_type"));
        if (json.containsKey(EsFieldModel.IMEI)) {
          jsonThreat.put("imei", json.get(EsFieldModel.IMEI) == null ? "NoPermission"
              : PubFunc.jsonArray2String(json.getString(EsFieldModel.IMEI)));
        }else {
          jsonThreat.put("imei", "NoPermission");
        }
        if (json.containsKey("plot_type") && !StringUtils.isEmpty(json.getString("plot_type"))) {
          jsonThreat.put("plot_type", json.getString("plot_type"));
          if (json.containsKey("plot_status")) {
            jsonThreat.put("status", json.getInteger("plot_status"));
          }
        } else {
          jsonThreat.put("plot_type", "");
          jsonThreat.put("status", 0);
        }
        if (!StringUtils.isEmpty(json.getString("server_time"))) {
          jsonThreat.put("time", dateFormat.format(new Date(json.getLong("server_time"))));
        } else {
          jsonThreat.put("time", "");
        }
        jsonThreat.put("udid", json.getString("udid"));
        dataList.add(jsonThreat);
      }
      JSONObject data = new JSONObject();
      data.put("total", jsonObject.getLong("count"));
      data.put("datalist", dataList);
      jsonResult.put("data", data);
      jsonResult.put("code", 0);
      jsonResult.put("msg", "");
    } catch (Exception e) {
      log.error("" + e);
      jsonResult.put("code", 1);
      jsonResult.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return jsonResult;
    }
    return jsonResult;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.AppStatService;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.CrashStatService;
import com.bangcle.service.DevStatService;
import com.bangcle.service.EnvInfoService;
import com.bangcle.service.EnvStatService;
import com.bangcle.service.EventInfoService;
import com.bangcle.service.ReportFormsService;
import com.bangcle.service.ReportTaskManageService;
import com.bangcle.service.RunningStatService;
import com.bangcle.service.ThreatInfoService;
import com.bangcle.service.ThreatStatService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import com.google.common.io.Files;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/3/7.
 */
@Service
@Slf4j
public class ReportFormsServiceImpl implements ReportFormsService {

  @Value("${report_dir}")
  private String strReportDir;

  @Autowired
  private ThreatStatService threatStatService;
  @Autowired
  private EnvStatService envStatService;
  @Autowired
  private CrashStatService crashStatService;
  @Autowired
  private CrashInfoService crashInfoService;
  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private EventStatServiceImpl eventStatService;
  @Autowired
  private EventInfoService eventInfoService;
  @Autowired
  private ThreatInfoService threatInfoService;
  @Autowired
  private EnvInfoService envInfoService;
  @Autowired
  private RunningStatService runningStatService;
  @Autowired
  private DevStatService devStatService;
  @Autowired
  private AppStatService appStatService;
  @Autowired
  private ReportTaskManageService reportTaskManageService;


  /**
   * 获取报表任务数据.
   */
  @Override
  public void getReportFormsData(JSONObject reportTaskInfo, JSONObject jsonObject,
      String taskReportDir) {
    JSONArray arrayReportType = reportTaskInfo.getJSONArray("strReportType");
    String timeFormat = "yyyy-MM-dd HH:mm:ss";
    long startTime = TimeParse.str2LongTime(reportTaskInfo.getString("dateBeginTime"), timeFormat);
    long endTime = TimeParse.str2LongTime(reportTaskInfo.getString("dateEndTime"), timeFormat);
    String agentId = reportTaskInfo.getString("numAgentId");
    List<String> listAppVersion = (reportTaskInfo.getJSONArray("strAppInfos") == null ? null :
        reportTaskInfo.getJSONArray("strAppInfos").toJavaList(String.class));
    List<String> listLocation = (reportTaskInfo.getJSONArray("strLocations") == null ? null :
        reportTaskInfo.getJSONArray("strLocations").toJavaList(String.class));
    List<String> listOsVersion = (reportTaskInfo.getJSONArray("strOsInfos") == null ? null :
        reportTaskInfo.getJSONArray("strOsInfos").toJavaList(String.class));

    log.info("start_time = {}, end_time = {}, agent_id = {}, report_type = {}", startTime, endTime,
        agentId, arrayReportType);
    //综合态势
    if (arrayReportType.contains("home")) {

      JSONObject home = getHomeData(startTime, endTime, agentId, listAppVersion, null,
          listLocation, listOsVersion);
      jsonObject.put("home", home);
      saveAsFile(home, taskReportDir, "home.json");
    }
    //威胁态势
    if (arrayReportType.contains("threat")) {

      JSONObject threat = getThreatData(agentId, startTime, endTime, listAppVersion,
          null, listLocation, listOsVersion);
      jsonObject.put("threat", threat);
      saveAsFile(threat, taskReportDir, "threat.json");
    }
    //崩溃分析
    if (arrayReportType.contains("crash")) {
      JSONObject crash = getCrashInfo(agentId, null, listLocation, listOsVersion,
          listAppVersion, startTime, endTime);
      jsonObject.put("crash", crash);
      saveAsFile(crash, taskReportDir, "crash.json");
    }
    //运行分析
    if (arrayReportType.contains("run")) {
      JSONObject start = getRunningInfo(agentId, null, listLocation, listOsVersion,
          listAppVersion, startTime, endTime);
      jsonObject.put("run", start);
      saveAsFile(start, taskReportDir, "run.json");
    }
  }

  /**
   * 获取报表任务参数.
   */
  @Override
  public JSONObject getReportFormsInfo(int agentId, int reporTasktId) {
    return reportTaskManageService.reportTaskInfo(agentId, reporTasktId);
  }

  //综合态势
  private JSONObject getHomeData(long startTime, long endTime, String agentId,
      List<String> listAppVersion, List<String> listManufacturer, List<String> listLocation,
      List<String> listOsVersion) {
    JSONObject home = new JSONObject();
    try {
      //态势分布
      JSONObject distribution = new JSONObject();
      //地图
      JSONArray map = threatStatService
          .threatStat(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime, null, "risk_count",
              "location").getJSONArray("datalist");
      //威胁总体趋势
      distribution.put("map", map);
      //整体安全态势分布表格
      JSONArray table = distributionTable(startTime, endTime, agentId, listAppVersion,
          listManufacturer, listLocation, listOsVersion);
      distribution.put("table", table);
      distribution.put("size", map.size());

      //威胁统计
      JSONObject threat = new JSONObject();
      //图数据
      JSONArray threatData = threatStatService
          .threatStatCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime, null).getJSONArray("datalist");
      JSONObject threatTotal = threatStatService
          .threatCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime, null);
      threat.put("datalist", threatData);
      threat.put("type_total", threatData.size());
      //威胁总数
      threat.put("threat_count", threatTotal.get("risk_count"));
      threat.put("threat_dev_count", threatTotal.get("risk_dev_count"));

      //安全事件趋势
      //图数据
      JSONObject event = eventStatService
          .eventTrend(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion,
              startTime, endTime);
      JSONObject eventTotal = eventStatService
          .eventCount(agentId, listAppVersion, listManufacturer, listLocation, listOsVersion,
              startTime, endTime);
      //安全事件总数
      event.put("event_count", eventTotal.get("event_count"));
      event.put("event_dev_count", eventTotal.get("event_dev_count"));

      //启动趋势
      //图数据
      JSONObject start = runningStatService
          .runningTrend(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime);
      JSONObject startTotal = runningStatService
          .runningCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
              startTime, endTime);
      //启动趋势总数
      start.put("start_count", startTotal.get("start_total_count"));
      start.put("start_dev_count", startTotal.get("start_dev_count"));
      start.put("start_average_count", startTotal.get("start_average_count"));
      //崩溃趋势
      //图数据
      JSONObject crash = crashStatService
          .crashTrend(agentId, listAppVersion, listManufacturer, listLocation, listOsVersion,
              startTime, endTime);
      JSONObject crashTotal = crashStatService
          .crashCount(agentId, listAppVersion, listManufacturer, listLocation, listOsVersion,
              startTime, endTime);
      //崩溃趋势总数
      crash.put("app_crash_count", crashTotal.get("crash_count"));
      crash.put("crash_dev_count", crashTotal.get("crash_dev_count"));
      crash.put("crash_dev_rate", crashTotal.get("crash_user_rate"));

      home.put("distribution", distribution);
      home.put("threat", threat);
      home.put("event", event);
      home.put("start", start);
      home.put("crash", crash);

    } catch (ParseException e) {
      log.error("error", e);
    }
    return home;
  }

  //整体安全态势分布表格
  private JSONArray distributionTable(long startTime, long endTime, String agentId,
      List<String> listAppVersion, List<String> listManufacturer, List<String> listLocation,
      List<String> listOsVersion) {
    Map<String, JSONObject> dataAll = new HashMap<>();
    //活跃设备数
    JSONArray runCount = runningStatService
        .runningStat(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, "start_dev_count", "location").getJSONArray("datalist");
    for (int i = 0; i < runCount.size(); i++) {
      JSONObject run = runCount.getJSONObject(i);
      JSONObject data = new JSONObject();
      data.put("run_count", run.get("count"));
      //先将其他数据初始化为0
      data.put("threat_count", 0);
      data.put("threat_dev_count", 0);
      data.put("env_count", 0);
      data.put("crash_count", 0);
      data.put("crash_dev_count", 0);
      data.put("event_count", 0);
      dataAll.put(run.getString("type"), data);
    }
    //威胁次数
    JSONArray threatCount = threatStatService
        .threatStat(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null, "risk_count", "location").getJSONArray("datalist");
    for (int i = 0; i < threatCount.size(); i++) {
      JSONObject threat = threatCount.getJSONObject(i);
      JSONObject data = null;

      if (dataAll.containsKey(threat.getString("type"))) {
        data = dataAll.get(threat.getString("type"));
        data.put("threat_count", threat.get("count"));
      } else {
        data = new JSONObject();
        data.put("threat_count", threat.get("count"));
        //没有该地区数据，置为0。理论上不应出现该情况,启动数据应包含所有地区
        data.put("run_count", 0);
        data.put("threat_dev_count", 0);
        data.put("env_count", 0);
        data.put("crash_count", 0);
        data.put("crash_dev_count", 0);
        data.put("event_count", 0);
      }
      dataAll.put(threat.getString("type"), data);
    }
    //威胁影响设备数
    JSONArray threatDevCount = threatStatService
        .threatStat(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null, "risk_dev_count", "location").getJSONArray("datalist");
    for (int i = 0; i < threatDevCount.size(); i++) {
      JSONObject threatdev = threatDevCount.getJSONObject(i);
      JSONObject data = null;
      if (dataAll.containsKey(threatdev.getString("type"))) {
        data = dataAll.get(threatdev.getString("type"));
        data.put("threat_dev_count", threatdev.get("count"));
      } else {
        data = new JSONObject();
        data.put("threat_dev_count", threatdev.get("count"));
        //理论上不该走这个分支
        data.put("run_count", 0);
        data.put("threat_count", 0);
        data.put("env_count", 0);
        data.put("crash_count", 0);
        data.put("crash_dev_count", 0);
        data.put("event_count", 0);
      }
      dataAll.put(threatdev.getString("type"), data);
    }
    //环境风险次数
    JSONArray envCount = envStatService
        .envStat(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion, "location",
            null, startTime, endTime).getJSONArray("datalist");
    for (int i = 0; i < envCount.size(); i++) {
      JSONObject env = envCount.getJSONObject(i);
      JSONObject data = null;
      if (dataAll.containsKey(env.getString("type"))) {
        data = dataAll.get(env.getString("type"));
        data.put("env_count", env.get("count"));
      } else {
        data = new JSONObject();
        data.put("env_count", env.get("count"));
        data.put("run_count", 0);
        data.put("threat_count", 0);
        data.put("threat_dev_count", 0);
        data.put("crash_count", 0);
        data.put("crash_dev_count", 0);
        data.put("event_count", 0);
      }
      dataAll.put(env.getString("type"), data);
    }
    //崩溃次数
    JSONArray crashCount = crashStatService
        .crashStat(agentId, listAppVersion, "crash_count", listManufacturer, "location",
            listLocation, listOsVersion, startTime, endTime).getJSONArray("datalist");
    for (int i = 0; i < crashCount.size(); i++) {
      JSONObject crash = crashCount.getJSONObject(i);
      JSONObject data = null;
      if (dataAll.containsKey(crash.getString("type"))) {
        data = dataAll.get(crash.getString("type"));
        data.put("crash_count", crash.get("count"));
      } else {
        data = new JSONObject();
        data.put("crash_count", crash.get("count"));
        data.put("run_count", 0);
        data.put("threat_count", 0);
        data.put("threat_dev_count", 0);
        data.put("env_count", 0);
        data.put("crash_dev_count", 0);
        data.put("event_count", 0);
      }
      dataAll.put(crash.getString("type"), data);
    }
    //崩溃影响设备数
    JSONArray crashDevCount = crashStatService
        .crashStat(agentId, listAppVersion, "crash_dev_count", listManufacturer, "location",
            listLocation, listOsVersion, startTime, endTime).getJSONArray("datalist");
    for (int i = 0; i < crashDevCount.size(); i++) {
      JSONObject crashdev = crashDevCount.getJSONObject(i);
      JSONObject data = null;
      if (dataAll.containsKey(crashdev.getString("type"))) {
        data = dataAll.get(crashdev.getString("type"));
        data.put("crash_dev_count", crashdev.get("count"));
      } else {
        data = new JSONObject();
        data.put("crash_dev_count", crashdev.get("count"));
        data.put("run_count", 0);
        data.put("threat_count", 0);
        data.put("threat_dev_count", 0);
        data.put("env_count", 0);
        data.put("crash_count", 0);
        data.put("event_count", 0);
      }
      dataAll.put(crashdev.getString("type"), data);
    }
    //安全事件次数
    JSONArray eventCount = eventStatService
        .eventInfo(agentId, listAppVersion, listManufacturer, endTime, listLocation, listOsVersion,
            startTime, commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            EsFieldModel.LOCATION);
    for (int i = 0; i < eventCount.size(); i++) {
      JSONObject event = eventCount.getJSONObject(i);
      JSONObject data = null;
      if (dataAll.containsKey(event.getString("fieldName"))) {
        data = dataAll.get(event.getString("fieldName"));
        data.put("event_count", event.get("value"));
      } else {
        data = new JSONObject();
        data.put("event_count", event.get("value"));
        data.put("run_count", 0);
        data.put("threat_count", 0);
        data.put("threat_dev_count", 0);
        data.put("env_count", 0);
        data.put("crash_count", 0);
        data.put("crash_dev_count", 0);
      }
      dataAll.put(event.getString("fieldName"), data);
    }

    JSONArray tableData = new JSONArray();
    Iterator entries = dataAll.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry = (Map.Entry) entries.next();
      String key = (String) entry.getKey();
      JSONObject value = (JSONObject) entry.getValue();
      value.put("location", key);
      tableData.add(value);
    }
    return tableData;
  }

  private JSONObject getThreatData(String agentId, long startTime, long endTime,
      List<String> listAppVersion, List<String> listManufacturer, List<String> listLocation,
      List<String> listOsVersion) {
    //安全事件统计
    //总体情况
    JSONObject event = eventStatService
        .eventCount(agentId, listAppVersion, listManufacturer, listLocation, listOsVersion,
            startTime, endTime);
    //安全事件总体趋势图
    JSONObject eventList = eventStatService
        .eventTrend(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion,
            startTime, endTime);
    event.putAll(eventList);
    //安全事件地域分布
    JSONArray eventLocationList = eventInfoService
        .eventSort(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion, 1, 100,
            "desc", "event_count", "location", startTime, endTime).getJSONArray("datalist");
    event.put("location_table", eventLocationList);
    //安全事件攻击源Top10
    JSONArray eventSourceList = eventInfoService
        .eventSort(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion, 1, 10,
            "desc", "event_count", "source", startTime, endTime).getJSONArray("datalist");
    event.put("source_table", eventSourceList);
    //安全事件设备Top10
    JSONArray eventDevList = eventInfoService
        .getEventList(agentId, listAppVersion, listLocation, listManufacturer, listOsVersion, "",
            1L,
            10L, "devinfo", "last_time", "desc", startTime, endTime).getJSONArray("datalist");
    event.put("dev_table", eventDevList);

    //威胁分布
    //总体情况
    JSONObject threat = threatStatService
        .threatCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null);
    //威胁总体趋势
    JSONObject threatList = threatStatService
        .threatTrend(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null);
    //威胁数趋势图
    threat.put("risk_count_list", threatList.get("risk_count_list"));
    //威胁设备数趋势图
    threat.put("risk_dev_count_list", threatList.get("risk_dev_count_list"));
    //时间轴
    threat.put("coord_list", threatList.get("coord_list"));
    //威胁分类统计图
    JSONArray threatClassify = threatStatService
        .threatStatCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null).getJSONArray("datalist");
    threat.put("classify", threatClassify);
    //威胁地域分布
    JSONArray threatLocationList = threatInfoService
        .threatSort(agentId, listAppVersion, null, listLocation, listManufacturer,
            listOsVersion, startTime, endTime, "location").getJSONArray("datalist");
    threat.put("location_table", threatLocationList);
    //威胁系统分布
    JSONArray threatOsVersionList = threatInfoService
        .threatSort(agentId, listAppVersion, null, listLocation, listManufacturer,
            listOsVersion, startTime, endTime, "os_version").getJSONArray("datalist");
    threat.put("os_version_table", threatOsVersionList);

    //威胁应用版本分布
    JSONArray threatAppVersionList = threatInfoService
        .threatSort(agentId, listAppVersion, null, listLocation, listManufacturer,
            listOsVersion, startTime, endTime, "app_version").getJSONArray("datalist");
    threat.put("app_version_table", threatAppVersionList);
    //威胁影响设备Top10
    JSONArray threatDevList = threatInfoService
        .getThreatList(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            "devinfo", "desc", "last_time", 1L, 10L, startTime, endTime).getJSONArray("datalist");
    threat.put("dev_table", threatDevList);
    //威胁策略实施情况统计
    JSONObject threatTactics = threatStatService
        .threatPlotCount(agentId, listManufacturer, listLocation, listOsVersion, listAppVersion,
            startTime, endTime, null);
    threat.put("tactics_table", threatTactics.getJSONArray("datalist"));
    //环境风险统计
    //总体情况
    JSONObject env = envStatService
        .envCount(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            startTime, endTime);
    //环境风险总体趋势
    JSONObject envList = envStatService
        .envTrend(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            startTime, endTime);
    env.put("coord_list", envList.get("coord_list"));
    env.put("abnormal_dev_list", envList.get("abnormal_dev_list"));
    //环境风险影响设备数分布图
    JSONArray evnClassify = envStatService
        .envDist(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            startTime, endTime).getJSONArray("datalist");
    env.put("classify", evnClassify);
    //环境风险分布
    //环境风险地域分布
    JSONArray envLocationList = envInfoService
        .envSort(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            "location", startTime, endTime).getJSONArray("datalist");
    env.put("location_table", envLocationList);
    //环境风险系统版本分布
    JSONArray envOsVersionList = envInfoService
        .envSort(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            "os_version", startTime, endTime).getJSONArray("datalist");
    env.put("os_version_table", envOsVersionList);
    //环境风险应用版本分布
    JSONArray envAppVersionList = envInfoService
        .envSort(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            "app_version", startTime, endTime).getJSONArray("datalist");
    env.put("app_version_table", envAppVersionList);
    //环境风险影响设备Top10
    JSONArray envDevList = envInfoService
        .getEnvList(agentId, listAppVersion, null, listLocation, listManufacturer, listOsVersion,
            "last_time", "desc", 1L, 10L, startTime, endTime).getJSONArray("datalist");
    env.put("dev_table", envDevList);
    JSONObject threatSituation = new JSONObject();
    threatSituation.put("event", event);
    threatSituation.put("threat", threat);
    threatSituation.put("evn", env);

    return threatSituation;
  }

  private JSONObject getRunningInfo(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime) {

    JSONObject runningCount = runningStatService
        .runningCount(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime);

    JSONObject runningThreat = runningStatService
        .runningTrend(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime);

    //启动次数地域分布
    JSONObject runningStatByLocation = runningStatService
        .runningStat(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime, "start_count ", "location");
    //启动次数应用版本分布
    JSONObject runningStatByAppVersion = runningStatService
        .runningStat(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime, "start_count ", "app_version");

    //启动次数设备top10

    //终端设备统计
    //头部总体情况
    JSONObject devCount = devStatService
        .devCount(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime);

    //设备数趋势
    JSONObject devThrend = devStatService
        .devTrend(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime);

    //系统版本分布
    JSONObject devStatByOsVersion = devStatService
        .devStat(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime, "dev_count", "os_version");

    //应用版本分布
    JSONObject devStatByAppVersion = devStatService
        .devStat(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime, "dev_count", "app_version");

    //设备型号分布
    JSONObject devStatByDevice = devStatService
        .devStat(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime, "dev_count", "model");

    //终端安装应用量top10
    JSONObject appCount = appStatService
        .appCount(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime);

    JSONObject runningInfo = new JSONObject();
    runningInfo.put("runningCount", runningCount);
    runningInfo.put("runningThreat", runningThreat);
    runningInfo.put("runningStatByLocation", runningStatByLocation);
    runningInfo.put("runningStatByAppVersion", runningStatByAppVersion);

    runningInfo.put("devCount", devCount);//总体情况
    runningInfo.put("devThrend", devThrend);//设备总体趋势
    runningInfo.put("devStatByOsVersion", devStatByOsVersion);//系统版本分布
    runningInfo.put("devStatByAppVersion", devStatByAppVersion);//应用版本分布
    runningInfo.put("devSatatByDevice", devStatByDevice);//设备型号分布
    runningInfo.put("appCount", appCount);//top10

    return runningInfo;

  }

  private JSONObject getCrashInfo(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime) {
    JSONObject crashInfo = new JSONObject();
    //总体情况
    JSONObject crashCountInfo = crashStatService
        .crashCount(appId, appVersionList, manufacturerList, locationList, osVersionList, startTime,
            endTime);
    crashInfo.put("crash_type_count", crashCountInfo.getOrDefault("crash_type_count", 0));
    crashInfo.put("crash_count", crashCountInfo.getOrDefault("crash_count", 0));
    crashInfo.put("crash_dev_count", crashCountInfo.getOrDefault("crash_dev_count", 0));
    crashInfo.put("crash_rate", crashCountInfo.getOrDefault("crash_rate", "0.00%"));
    crashInfo.put("crash_user_rate", crashCountInfo.getOrDefault("crash_user_rate", "0.00%"));
    //崩溃总体趋势
    JSONArray crashThrend = new JSONArray();
    try {
      JSONObject crashThrendTmp = crashStatService
          .crashTrend(appId, appVersionList, manufacturerList, locationList, osVersionList,
              startTime, endTime);
      JSONArray dataArray = crashThrendTmp.getJSONArray("coord_list");
      JSONArray countArray = crashThrendTmp.getJSONArray("crash_count_list");
      JSONArray devCountArray = crashThrendTmp.getJSONArray("crash_dev_count_list");
      for (int i = 0; i < dataArray.size(); i++) {
        JSONObject crashTrendCell = new JSONObject();
        crashTrendCell.put("date", dataArray.get(i));
        crashTrendCell.put("count", countArray.get(i));
        crashTrendCell.put("dev_count", devCountArray.get(i));
        crashThrend.add(crashTrendCell);
      }
    } catch (ParseException e) {
      log.error("error", e);
    }
    crashInfo.put("crash_trend", crashThrend);
    //崩溃类型分布
    JSONObject crashCountDist = crashStatService
        .crashDist(appId, appVersionList, "count", manufacturerList, locationList, osVersionList,
            startTime, endTime);
    crashInfo.put("classify", crashCountDist.get("datalist"));
    //崩溃统计
    //应用版本统计
    JSONObject crashStatAppVersion = crashStatService
        .crashStat(appId, appVersionList, "crash_count", manufacturerList, EsFieldModel.APP_VERSION,
            locationList, osVersionList, startTime, endTime);
    crashInfo.put("app_version_table", crashStatAppVersion.get("datalist"));
    //设备类型统计
    JSONObject crashStatDevice = crashStatService
        .crashStat(appId, appVersionList, "crash_count", manufacturerList, EsFieldModel.MODEL,
            locationList, osVersionList, startTime, endTime);
    crashInfo.put("device_table", crashStatDevice.get("datalist"));
    //系统版本分布
    JSONObject crashStatOsVersion = crashStatService
        .crashStat(appId, appVersionList, "crash_count", manufacturerList, EsFieldModel.OS_VERSION,
            locationList, osVersionList, startTime, endTime);
    crashInfo.put("os_version_table", crashStatOsVersion.get("datalist"));
    //崩溃类型top10 按照崩溃发生次数倒序排行
    JSONObject crashTypeSort = crashInfoService
        .crashTypeSort(appId, appVersionList, locationList, manufacturerList, osVersionList,
            "desc", "count", startTime, endTime, 1, 10);
    crashInfo.put("crash_type_top10", crashTypeSort.get("datalist"));
    try {
      JSONObject crashDevSort = crashInfoService
          .crashDevSort(appId, appVersionList, locationList, manufacturerList, osVersionList,
              "desc", "count", 1L, 10L, startTime, endTime);
      crashInfo.put("crash_dev_top10", crashDevSort.get("datalist"));
    } catch (InterruptedException e) {
      log.error("error", e);
    }

    return crashInfo;
  }

  /**
   * 保存为.json文件.
   * param jsonObject
   * param strFilePath
   * param strFileName
   */
  public void saveAsFile(JSONObject jsonObject, String strFilePath, String strFileName) {
    try {
      log.info("filepath is {}", strFilePath + strFileName);
      File file = new File(strFilePath);
      if (!file.exists()) {
        file.mkdirs();
      }
      Files.write(jsonObject.toJSONString() + "\n", new File(strFilePath + strFileName),
          Charset.defaultCharset());
    } catch (IOException e) {
      log.error("error", e);
    }

  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.entity.ReportTaskManage;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.repository.ReportTaskManageRepository;
import com.bangcle.service.ReportFormsService;
import com.bangcle.service.ReportGenerateService;
import com.bangcle.service.model.report.CrashAppVersionListModel;
import com.bangcle.service.model.report.CrashCountTypeModel;
import com.bangcle.service.model.report.CrashDevTop10Model;
import com.bangcle.service.model.report.CrashDevTypeListModel;
import com.bangcle.service.model.report.CrashOsVersionListModel;
import com.bangcle.service.model.report.CrashTrendModel;
import com.bangcle.service.model.report.CrashTypeTop10Model;
import com.bangcle.service.model.report.IndexCrashModel;
import com.bangcle.service.model.report.IndexEventModel;
import com.bangcle.service.model.report.IndexLocationModel;
import com.bangcle.service.model.report.IndexRunModel;
import com.bangcle.service.model.report.IndexThreatModel;
import com.bangcle.service.model.report.RunActiveMapModel;
import com.bangcle.service.model.report.RunAddEquipmentMapModel;
import com.bangcle.service.model.report.RunAppLicationVersionModel;
import com.bangcle.service.model.report.RunAppVersionModel;
import com.bangcle.service.model.report.RunDevCountMapModel;
import com.bangcle.service.model.report.RunEquipmentVersionModel;
import com.bangcle.service.model.report.RunLocationModel;
import com.bangcle.service.model.report.RunSystemModel;
import com.bangcle.service.model.report.RunTerminalModel;
import com.bangcle.service.model.report.RunTrendMapModel;
import com.bangcle.service.model.report.ThreatEnvAppInfoDistributedModel;
import com.bangcle.service.model.report.ThreatEnvDevModel;
import com.bangcle.service.model.report.ThreatEnvDevTrendModel;
import com.bangcle.service.model.report.ThreatEnvLocationDistributedModel;
import com.bangcle.service.model.report.ThreatEnvOsInfoDistributedModel;
import com.bangcle.service.model.report.ThreatEnvTypeModel;
import com.bangcle.service.model.report.ThreatEventAttackSourceModel;
import com.bangcle.service.model.report.ThreatEventDevModel;
import com.bangcle.service.model.report.ThreatEventLocationModel;
import com.bangcle.service.model.report.ThreatTacticsModel;
import com.bangcle.service.model.report.ThreatThreatAppInfoModel;
import com.bangcle.service.model.report.ThreatThreatClassifyModel;
import com.bangcle.service.model.report.ThreatThreatLocationModel;
import com.bangcle.service.model.report.ThreatThreatModel;
import com.bangcle.service.model.report.ThreatThreatOsInfoModel;
import com.bangcle.service.model.report.threatThreatDevModel;
import com.bangcle.util.TimeParse;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jxls.common.Context;
import org.jxls.util.JxlsHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class ReportGenerateServiceImpl implements ReportGenerateService {

  @Value("${report_dir}")
  private String reportDir;

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Autowired
  private ReportTaskManageRepository reportTaskManageRepository;

  @Autowired
  private ReportFormsService reportFormsService;

  @Autowired
  private AppRepository appRepository;

  private final String strHome = "home";
  private final String strThreat = "threat";
  private final String strCrash = "crash";
  private final String strRun = "run";

  @Override
  public Boolean genTargetFromSource(Context context, String templatePath, String destPath) {
    InputStream is = null;
    OutputStream os = null;
    try {
      is = new FileInputStream(templatePath);
      os = new FileOutputStream(destPath);
      JxlsHelper.getInstance().processTemplate(is, os, context);
    } catch (FileNotFoundException e) {
      log.error("", e);
      return false;
    } catch (IOException e) {
      log.error("", e);
      return false;
    } finally {
      if (is != null) {
        try {
          is.close();
        } catch (IOException e) {
          log.error("", e);
        }
      }
      if (os != null) {
        try {
          os.close();
        } catch (IOException e) {
          log.error("", e);
        }
      }
    }

    return true;
  }

  @Override
  public Boolean genReportFromId(Integer id) {
    Map<String, Map<Integer, Integer>> mapDeleteRows = new HashMap<>();
    ReportSubTaskManage reportSubTaskManage = reportSubtaskManageRepository.findById(id);
    if (reportSubTaskManage == null) {
      return false;
    }
    reportSubTaskManage.setDateCreatedAt(new Date());
    ReportTaskManage reportTaskManage = reportTaskManageRepository
        .findById(reportSubTaskManage.getNumTaskId());
    String taskReportDir = subTaskAbsoluteDir(reportSubTaskManage);
    // 路径这暂时写死，之后调整.
    Context context = new Context();

    int numAgentId = reportSubTaskManage.getNumAgentId();
    // 应用信息
    App app = appRepository.findById(numAgentId);
    String strAppName = app.getName();
    context.putVar("overviewAppName", strAppName);
    // 报表生成时间
    context
        .putVar("overviewReportTime", TimeParse.dataFormat(reportSubTaskManage.getDateCreatedAt()));
    // 报告涵盖区域
    String strLocations = reportTaskManage.getStrLocations();
    if (strLocations == null) {
      context.putVar("overviewReportLocation", "全部");
    } else {
      JSONArray locationArray = JSONArray.parseArray(strLocations);
      StringBuffer strResultLocation = new StringBuffer();
      if (locationArray.size() > 0) {
        for (int i = 0; i < locationArray.size(); i++) {
          strResultLocation.append(locationArray.getString(i) + "、");
        }
      }
      strLocations = strResultLocation.toString();
      if (strLocations.endsWith("、")) {
        context
            .putVar("overviewReportLocation", strLocations.substring(0, strLocations.length() - 1));
      } else {
        context.putVar("overviewReportLocation", strLocations);
      }
    }
    // 终端系统版本
    String strOsInfos = reportTaskManage.getStrOsInfos();
    if (strOsInfos == null) {
      context.putVar("overviewReportOsVersion", "全部");
    } else {
      JSONArray osInfoArray = JSONArray.parseArray(strOsInfos);
      StringBuffer strResultOsInfo = new StringBuffer();
      if (osInfoArray.size() > 0) {
        for (int i = 0; i < osInfoArray.size(); i++) {
          strResultOsInfo.append(osInfoArray.getString(i) + "、");
        }
      }
      strOsInfos = strResultOsInfo.toString();
      if (strOsInfos.endsWith("、")) {
        context.putVar("overviewReportOsVersion", strOsInfos.substring(0, strOsInfos.length() - 1));
      } else {
        context.putVar("overviewReportOsVersion", strOsInfos);
      }
    }
    // 覆盖应用版本
    String strAppInfos = reportTaskManage.getStrAppInfos();
    if (strAppInfos == null) {
      context.putVar("overviewReportAppVersion", "全部");
    } else {
      JSONArray appInfoArray = JSONArray.parseArray(strAppInfos);
      StringBuffer strResultAppInfo = new StringBuffer();
      if (appInfoArray.size() > 0) {
        for (int i = 0; i < appInfoArray.size(); i++) {
          strResultAppInfo.append(appInfoArray.getString(i) + "、");
        }
      }
      strAppInfos = strResultAppInfo.toString();
      if (strAppInfos.endsWith("、")) {
        context
            .putVar("overviewReportAppVersion", strAppInfos.substring(0, strAppInfos.length() - 1));
      } else {
        context.putVar("overviewReportAppVersion", strAppInfos);
      }
    }
    // 报告涵盖内容
    String strReportTypes = reportTaskManage.getStrReportType();
    JSONArray reportTypeArray = JSONArray.parseArray(strReportTypes);
    if (reportTypeArray.size() > 0) {
      StringBuffer strResultReportType = new StringBuffer();
      for (int i = 0; i < reportTypeArray.size(); i++) {
        if (strHome.equals(reportTypeArray.getString(i))) {
          strResultReportType.append("综合态势、");
        } else if (strThreat.equals(reportTypeArray.getString(i))) {
          strResultReportType.append("威胁态势、");
        } else if (strRun.equals(reportTypeArray.getString(i))) {
          strResultReportType.append("运行分析、");
        } else if (strCrash.equals(reportTypeArray.getString(i))) {
          strResultReportType.append("崩溃分析、");
        }
      }
      strReportTypes = strResultReportType.toString();
      if (strReportTypes.endsWith("、")) {
        context.putVar("overviewReportContentArea",
            strReportTypes.substring(0, strReportTypes.length() - 1));
      } else {
        context.putVar("overviewReportContentArea", strResultReportType);
      }
    }
    // 报告统计周期
    context.putVar("overviewReportStatTime",
        reportSubTaskManage.getStrBeginTime() + "-" + reportSubTaskManage.getStrEndTime());

    String reportTypeStr = reportTaskManage.getStrReportType();
    JSONArray reportTypeJsonArray = JSONArray.parseArray(reportTypeStr);
    List<String> reportTypeList = reportTypeJsonArray.toJavaList(String.class);
    if (reportTypeList.contains(strHome)) {
      String dataPath = taskReportDir + strHome + ".json";
      context.putVar("indexMarkIndex1", "一");
      context.putVar("indexMarkIndex2", "1");
      context.putVar("indexReportTime",
          reportSubTaskManage.getStrBeginTime() + " ~ " + reportSubTaskManage.getStrEndTime());
      JSONObject dataJsonObject = readDataFromFile(dataPath);
      genHomeContext(dataJsonObject, context, mapDeleteRows);
    }

    if (reportTypeList.contains(strThreat)) {
      if (reportTypeList.contains(strHome)) {
        context.putVar("threatMarkIndex1", "二");
        context.putVar("threatMarkIndex2", "2");
      } else {
        context.putVar("threatMarkIndex1", "一");
        context.putVar("threatMarkIndex2", "1");
      }
      String dataPath = taskReportDir + strThreat + ".json";
      JSONObject dataJsonObject = readDataFromFile(dataPath);
      genThreatContext(dataJsonObject, context, mapDeleteRows);
    }

    if (reportTypeList.contains(strRun)) {
      if (reportTypeList.contains(strHome)) {
        context.putVar("runMarkIndex1", "三");
        context.putVar("runMarkIndex2", "3");
      } else if (reportTypeList.contains(strThreat)) {
        context.putVar("runMarkIndex1", "二");
        context.putVar("runMarkIndex2", "2");
      } else {
        context.putVar("runMarkIndex1", "一");
        context.putVar("runMarkIndex2", "1");
      }
      String dataPath = taskReportDir + strRun + ".json";
      JSONObject dataJsonObject = readDataFromFile(dataPath);
      genRunContext(dataJsonObject, context, mapDeleteRows);
    }

    if (reportTypeList.contains(strCrash)) {
      context.putVar("crashMarkIndex1", firstIndex(reportTypeList.size()));
      context.putVar("crashMarkIndex2", reportTypeList.size());
      String dataPath = taskReportDir + strCrash + ".json";
      JSONObject dataJsonObject = readDataFromFile(dataPath);
      genCrashContext(dataJsonObject, context, mapDeleteRows);
    }
    String strReportName = reportSubTaskManage.getStrReportName();
    String destPath = taskReportDir + strReportName + ".xlsx";
    String templatePath = System.getProperty("user.dir") + "/config/standard_template.xlsx";
    genTargetFromSource(context, templatePath, destPath);
    XSSFWorkbook xssfWorkbook = readWorkBook(destPath);
    for (Map.Entry<String, Map<Integer, Integer>> entry : mapDeleteRows.entrySet()) {
      Map<Integer, Integer> map = entry.getValue();
      for (Map.Entry<Integer, Integer> entry1 : map.entrySet()) {
        try {
          rowsHidden(xssfWorkbook, entry.getKey(), entry1.getKey(), entry1.getValue());
        } catch (IOException e) {
          log.error("error", e);
        }
      }
    }
    removeSheet(xssfWorkbook, reportTypeList);
    writeWorkBook(xssfWorkbook, destPath);
    //reportSubTaskManage.setNumStatus(1);
    reportSubtaskManageRepository.save(reportSubTaskManage);
    return true;
  }

  /**
   * 根据报表id，生成报表数据.
   */
  @Override
  public void genDataFromId(Integer id) {
    JSONObject reportTaskJsonObject = new JSONObject();
    ReportSubTaskManage reportSubTaskManage = reportSubtaskManageRepository.findById(id);
    log.info("id: {}", reportSubTaskManage.getNumTaskId());
    ReportTaskManage reportTaskManage = reportTaskManageRepository
        .findById(reportSubTaskManage.getNumTaskId());
    reportTaskJsonObject.put("dateBeginTime", reportSubTaskManage.getStrBeginTime());
    reportTaskJsonObject.put("dateEndTime", reportSubTaskManage.getStrEndTime());
    reportTaskJsonObject.put("strReportType", JSON.parseArray(reportTaskManage.getStrReportType()));
    reportTaskJsonObject.put("numAgentId", reportSubTaskManage.getNumAgentId());
    reportTaskJsonObject.put("strAppInfos", JSON.parseArray(reportTaskManage.getStrAppInfos()));
    reportTaskJsonObject.put("strLocations", JSON.parseArray(reportTaskManage.getStrLocations()));
    reportTaskJsonObject.put("strOsInfos", JSON.parseArray(reportTaskManage.getStrOsInfos()));
    reportTaskJsonObject.put("id", reportTaskManage.getId());
    reportTaskJsonObject.put("reportId", reportSubTaskManage.getId());
    String taskReportDir = subTaskAbsoluteDir(reportSubTaskManage);
    JSONObject dataJsonObject = new JSONObject();
    reportFormsService.getReportFormsData(reportTaskJsonObject, dataJsonObject, taskReportDir);
  }

  private void genCrashContext(JSONObject dataJsonObject, Context context,
      Map<String, Map<Integer, Integer>> mapDeleteRows) {
    Map<Integer, Integer> map = new HashMap<>();
    context.putVar("crashTypeNum", dataJsonObject.get("crash_type_count"));
    context.putVar("crashNum", dataJsonObject.get("crash_count"));
    context.putVar("crashDevNum", dataJsonObject.get("crash_dev_count"));
    context.putVar("crashRate", dataJsonObject.get("crash_rate"));
    context.putVar("crashUserRate", dataJsonObject.get("crash_user_rate"));

    JSONArray crashTrend = dataJsonObject.getJSONArray("crash_trend");
    List<CrashTrendModel> crashTimeArray = new ArrayList<>();
    for (int i = 0; i < crashTrend.size(); i++) {
      JSONObject trend = crashTrend.getJSONObject(i);
      CrashTrendModel crashTrendModel = new CrashTrendModel(trend.getString("date"),
          trend.getLong("count"), trend.getLong("dev_count"));
      crashTimeArray.add(crashTrendModel);
    }
    context.putVar("crashTimeList", crashTimeArray);
    JSONArray classify = dataJsonObject.getJSONArray("classify");
    List<CrashCountTypeModel> crashTypeCountArray = new ArrayList<>();
    if (classify.size() > 0) {
      for (int i = 0; i < classify.size(); i++) {
        JSONObject json = classify.getJSONObject(i);
        CrashCountTypeModel crashCountTypeModel = new CrashCountTypeModel(
            json.getString("crash_type"), json.getLong("count"));
        crashTypeCountArray.add(crashCountTypeModel);
      }
    } else {
      CrashCountTypeModel crashCountTypeModel = new CrashCountTypeModel(
          "-", 0L);
      crashTypeCountArray.add(crashCountTypeModel);
    }
    context.putVar("crashTypeList", crashTypeCountArray);
    JSONArray appVersionList = dataJsonObject.getJSONArray("app_version_table");
    List<CrashAppVersionListModel> crashAppVersionArray = new ArrayList<>();
    if (appVersionList.size() > 0) {
      for (int i = 0; i < appVersionList.size(); i++) {
        JSONObject json = appVersionList.getJSONObject(i);
        CrashAppVersionListModel crashAppVersionListModel = new CrashAppVersionListModel(
            json.getString("type"), json.getLong("count"),
            decimalToPercent(json.getDoubleValue("percent")));
        crashAppVersionArray.add(crashAppVersionListModel);
      }
      map.put(58 + crashAppVersionArray.size(), 88);
    } else {
      CrashAppVersionListModel crashAppVersionListModel = new CrashAppVersionListModel(
          "-", 0L, "0.00%");
      crashAppVersionArray.add(crashAppVersionListModel);
      map.put(58, 88);
    }
    context.putVar("crashAppVersionList", crashAppVersionArray);

    JSONArray devTypeList = dataJsonObject.getJSONArray("device_table");
    List<CrashDevTypeListModel> crashDevTypeList = new ArrayList<>();
    if (devTypeList.size() > 0) {
      for (int i = 0; i < devTypeList.size(); i++) {
        JSONObject json = devTypeList.getJSONObject(i);
        CrashDevTypeListModel crashDevTypeListModel = new CrashDevTypeListModel(
            json.getString("type"), json.getLong("count"),
            decimalToPercent(json.getDoubleValue("percent")));
        crashDevTypeList.add(crashDevTypeListModel);
      }
      map.put(91 + crashDevTypeList.size(), 121);
    } else {
      CrashDevTypeListModel crashDevTypeListModel = new CrashDevTypeListModel(
          "-", 0L, "0.00%");
      crashDevTypeList.add(crashDevTypeListModel);
      map.put(91, 121);
    }
    context.putVar("crashDevTypeList", crashDevTypeList);

    JSONArray osVersionList = dataJsonObject.getJSONArray("os_version_table");
    List<CrashOsVersionListModel> crashOsVersionList = new ArrayList<>();
    if (osVersionList.size() > 0) {
      for (int i = 0; i < osVersionList.size(); i++) {
        JSONObject json = osVersionList.getJSONObject(i);
        CrashOsVersionListModel crashOsVersionListModel = new CrashOsVersionListModel(
            json.getString("type"), json.getLong("count"),
            decimalToPercent(json.getDoubleValue("percent")));
        crashOsVersionList.add(crashOsVersionListModel);
      }
      map.put(124 + crashOsVersionList.size(), 154);
    } else {
      CrashOsVersionListModel crashOsVersionListModel = new CrashOsVersionListModel(
          "-", 0L, "0.00%");
      crashOsVersionList.add(crashOsVersionListModel);
      map.put(124, 154);
    }
    context.putVar("crashOsVersionList", crashOsVersionList);

    JSONArray crashTypeTop10 = dataJsonObject.getJSONArray("crash_type_top10");
    List<CrashTypeTop10Model> crashNumList = new ArrayList<>();
    if (crashTypeTop10.size() > 0) {
      for (int i = 0; i < crashTypeTop10.size(); i++) {
        JSONObject json = crashTypeTop10.getJSONObject(i);
        CrashTypeTop10Model crashTypeTop10Model = new CrashTypeTop10Model(
            json.getString("data_type"), json.getLong("count"), json.getLong("dev_count"),
            json.getString("first_time"), json.getString("last_time"));
        crashNumList.add(crashTypeTop10Model);
      }
      map.put(157 + crashNumList.size(), 167);
    } else {
      CrashTypeTop10Model crashTypeTop10Model = new CrashTypeTop10Model(
          "-", 0L, 0L, "-", "-");
      crashNumList.add(crashTypeTop10Model);
      map.put(157, 167);
    }
    context.putVar("crashNumList", crashNumList);

    JSONArray crashDevTop10 = dataJsonObject.getJSONArray("crash_dev_top10");
    List<CrashDevTop10Model> crashEquipmentList = new ArrayList<>();
    if (crashDevTop10.size() > 0) {
      for (int i = 0; i < crashDevTop10.size(); i++) {
        JSONObject json = crashDevTop10.getJSONObject(i);
        CrashDevTop10Model crashDevTop10Model = new CrashDevTop10Model(json.getString("last_time"),
            json.getString("udid"), json.getLong("count"), json.getLong("data_type_count"),
            json.getString("model"), json.getString("app_version"),
            json.getString("platform") + " " + json.getString("os_version"));
        crashEquipmentList.add(crashDevTop10Model);
      }
      map.put(170 + crashEquipmentList.size(), 180);
    } else {
      CrashDevTop10Model crashDevTop10Model = new CrashDevTop10Model("-",
          "-", 0L, 0L,
          "-", "-", "-");
      crashEquipmentList.add(crashDevTop10Model);
      map.put(170, 180);
    }
    mapDeleteRows.put("崩溃分析", map);
    context.putVar("crashEquipmentList", crashEquipmentList);
  }

  /**
   * 赋值威胁态势部分数据.
   */
  private void genThreatContext(JSONObject dataJsonObject, Context context,
      Map<String, Map<Integer, Integer>> mapDeleteRows) {
    Map<Integer, Integer> map = new HashMap<>();
    // 安全事件
    JSONObject eventJsonObject = dataJsonObject.getJSONObject("event");
    // 安全事件数
    context.putVar("threatEventNum", eventJsonObject.getLongValue("event_count"));
    // 事件设备数
    context.putVar("threatEventDevNum", eventJsonObject.getLongValue("event_dev_count"));
    // 地域数
    context.putVar("threatEventLocationNum", eventJsonObject.getLongValue("location_count"));
    // 攻击源个数
    context.putVar("threatAttackSourceNum", eventJsonObject.getLongValue("event_source_count"));
    // 安全事件总体趋势
    JSONArray eventCoordArray = eventJsonObject.getJSONArray("coord_list");
    JSONArray eventCountArray = eventJsonObject.getJSONArray("event_list");
    JSONArray eventDevCountArray = eventJsonObject.getJSONArray("event_dev_list");
    List<IndexEventModel> indexEventModelList = new ArrayList<>();
    for (int i = 0; i < eventCoordArray.size(); i++) {
      IndexEventModel indexEventModel = new IndexEventModel(eventCoordArray.getString(i),
          eventCountArray.getLong(i), eventDevCountArray.getLong(i));
      indexEventModelList.add(indexEventModel);
    }
    context.putVar("threatEventList", indexEventModelList);
    // 安全事件地域分布
    JSONArray threatEventLocationArray = eventJsonObject.getJSONArray("location_table");
    List<ThreatEventLocationModel> threatEventLocationList = new ArrayList<>();
    if (threatEventLocationArray.size() > 0) {
      for (int i = 0; i < threatEventLocationArray.size(); i++) {
        ThreatEventLocationModel threatEventLocationModel = new ThreatEventLocationModel(
            threatEventLocationArray.getJSONObject(i).getString("location"),
            threatEventLocationArray.getJSONObject(i).getLongValue("event_count"),
            threatEventLocationArray.getJSONObject(i).getString("event_rate"),
            threatEventLocationArray.getJSONObject(i).getLongValue("event_dev_count"),
            threatEventLocationArray.getJSONObject(i).getString("event_dev_rate"),
            threatEventLocationArray.getJSONObject(i).getLongValue("ip_count"));
        threatEventLocationList.add(threatEventLocationModel);
      }
      map.put(48 + threatEventLocationList.size(), 78);
    } else {
      ThreatEventLocationModel threatEventLocationModel = new ThreatEventLocationModel(
          "-", 0L, "0.00%", 0L, "0.00%", 0L);
      threatEventLocationList.add(threatEventLocationModel);
      map.put(48, 78);
    }
    context.putVar("threatEventLocationList", threatEventLocationList);
    // 安全事件攻击源Top10
    JSONArray threatEventAttackSourceArray = eventJsonObject.getJSONArray("source_table");
    List<ThreatEventAttackSourceModel> threatEventAttackSourceModelList = new ArrayList<>();
    if (threatEventAttackSourceArray.size() > 0) {
      for (int i = 0; i < threatEventAttackSourceArray.size(); i++) {
        ThreatEventAttackSourceModel threatEventAttackSourceModel =
            new ThreatEventAttackSourceModel(
                threatEventAttackSourceArray.getJSONObject(i).getString("ip"),
                threatEventAttackSourceArray.getJSONObject(i).getString("location"),
                threatEventAttackSourceArray.getJSONObject(i).getLongValue("event_count"),
                threatEventAttackSourceArray.getJSONObject(i).getString("event_rate"),
                threatEventAttackSourceArray.getJSONObject(i).getLongValue(" event_dev_count"),
                threatEventAttackSourceArray.getJSONObject(i).getString("event_dev_rate"));
        threatEventAttackSourceModelList.add(threatEventAttackSourceModel);
      }
      map.put(81 + threatEventAttackSourceModelList.size(), 91);
    } else {
      ThreatEventAttackSourceModel threatEventAttackSourceModel = new ThreatEventAttackSourceModel(
          "-", "-", 0L, "0.00%", 0L, "0.00%");
      threatEventAttackSourceModelList.add(threatEventAttackSourceModel);
      map.put(81, 91);
    }
    context.putVar("threatEventSourceList", threatEventAttackSourceModelList);
    // 安全事件设备Top10
    JSONArray threatEventDevArray = eventJsonObject.getJSONArray("dev_table");
    log.info("threatEventDevArray:{}", threatEventDevArray.toJSONString());
    List<ThreatEventDevModel> threatEventDevModelList = new ArrayList<>();
    if (threatEventDevArray.size() > 0) {
      for (int i = 0; i < threatEventDevArray.size(); i++) {
        ThreatEventDevModel threatEventDevModel = new ThreatEventDevModel(
            threatEventDevArray.getJSONObject(i).getString("udid"),
            threatEventDevArray.getJSONObject(i).getLongValue("count"),
            threatEventDevArray.getJSONObject(i).getString("model"),
            threatEventDevArray.getJSONObject(i).getString("os_info"),
            threatEventDevArray.getJSONObject(i).getString("last_time"));
        threatEventDevModelList.add(threatEventDevModel);
      }
      map.put(95 + threatEventDevModelList.size(), 105);
    } else {
      ThreatEventDevModel threatEventDevModel = new ThreatEventDevModel(
          "-", 0L, "-", "-", "-");
      threatEventDevModelList.add(threatEventDevModel);
      map.put(95, 105);
    }
    context.putVar("threatEventDevList", threatEventDevModelList);
    // 威胁总体情况
    JSONObject threatJsonObject = dataJsonObject.getJSONObject("threat");
    // 威胁总数
    context.putVar("threatThreatNum", threatJsonObject.getLongValue("risk_count"));
    // 威胁影响设备数
    context.putVar("threatThreatDevNum", threatJsonObject.getLongValue("risk_dev_count"));
    // 活跃设备数
    context.putVar("threatActiveDevNum", threatJsonObject.getLongValue("start_dev_count"));
    // 影响设备率
    context.putVar("threatThreatDevPlot", threatJsonObject.getString("risk_dev_rate"));
    // 威胁总体趋势
    JSONArray threatCoordArray = threatJsonObject.getJSONArray("coord_list");
    JSONArray threatCountArray = threatJsonObject.getJSONArray("risk_count_list");
    JSONArray threatDevCountArray = threatJsonObject.getJSONArray("risk_dev_count_list");
    List<ThreatThreatModel> threatThreatModelList = new ArrayList<>();
    for (int i = 0; i < threatCoordArray.size(); i++) {
      ThreatThreatModel threatThreatModel = new ThreatThreatModel(threatCoordArray.getString(i),
          threatCountArray.getLongValue(i), threatDevCountArray.getLongValue(i));
      threatThreatModelList.add(threatThreatModel);
    }
    context.putVar("threatThreatList", threatThreatModelList);
    // 威胁发生次数分类统计
    JSONArray threatClassifyArray = threatJsonObject.getJSONArray("classify");
    List<ThreatThreatClassifyModel> threatThreatClassifyModelList = new ArrayList<>();
    if (threatClassifyArray.size() > 0) {
      for (int i = threatClassifyArray.size() - 1; i >= 0; i--) {
        JSONObject jsonObject = threatClassifyArray.getJSONObject(i);
        String strType = getThreatType(jsonObject.getString("type"));
        ThreatThreatClassifyModel threatThreatClassifyModel = new ThreatThreatClassifyModel(
            strType, jsonObject.getLongValue("count"),
            jsonObject.getLongValue("dev_count"));
        threatThreatClassifyModelList.add(threatThreatClassifyModel);
      }
    } else {
      ThreatThreatClassifyModel threatThreatClassifyModel = new ThreatThreatClassifyModel(
          "-", 0L, 0L);
      threatThreatClassifyModelList.add(threatThreatClassifyModel);
    }
    context.putVar("threatThreatTypeList", threatThreatClassifyModelList);
    // 威胁地域分布
    JSONArray threatThreatLocationArray = threatJsonObject.getJSONArray("location_table");
    List<ThreatThreatLocationModel> threatThreatLocationModelList = new ArrayList<>();
    if (threatThreatLocationArray.size() > 0) {
      for (int i = 0; i < threatThreatLocationArray.size(); i++) {
        ThreatThreatLocationModel threatThreatLocationModel = new ThreatThreatLocationModel(
            threatThreatLocationArray.getJSONObject(i).getString("location"),
            threatThreatLocationArray.getJSONObject(i).getLongValue("risk_count"),
            threatThreatLocationArray.getJSONObject(i).getString("rate"),
            threatThreatLocationArray.getJSONObject(i).getLongValue("risk_dev_count"),
            threatThreatLocationArray.getJSONObject(i).getString("dev_rate"));
        threatThreatLocationModelList.add(threatThreatLocationModel);
      }
      map.put(191 + threatThreatLocationModelList.size(), 221);
    } else {
      ThreatThreatLocationModel threatThreatLocationModel = new ThreatThreatLocationModel(
          "-", 0L, "0.00%", 0L, "0.00%");
      threatThreatLocationModelList.add(threatThreatLocationModel);
      map.put(191, 221);
    }
    context.putVar("threatThreatLocationList", threatThreatLocationModelList);
    // 威胁系统分布
    JSONArray threatThreatOsInfoArray = threatJsonObject.getJSONArray("os_version_table");
    List<ThreatThreatOsInfoModel> threatThreatOsInfoModelList = new ArrayList<>();
    if (threatThreatOsInfoArray.size() > 0) {
      for (int i = 0; i < threatThreatOsInfoArray.size(); i++) {
        ThreatThreatOsInfoModel threatThreatOsInfoModel = new ThreatThreatOsInfoModel(
            threatThreatOsInfoArray.getJSONObject(i).getString("os_version"),
            threatThreatOsInfoArray.getJSONObject(i).getLongValue("risk_count"),
            threatThreatOsInfoArray.getJSONObject(i).getString("rate"),
            threatThreatOsInfoArray.getJSONObject(i).getLongValue("risk_dev_count"),
            threatThreatOsInfoArray.getJSONObject(i).getString("dev_rate"));
        threatThreatOsInfoModelList.add(threatThreatOsInfoModel);
      }
      map.put(224 + threatThreatOsInfoModelList.size(), 254);
    } else {
      ThreatThreatOsInfoModel threatThreatOsInfoModel = new ThreatThreatOsInfoModel(
          "-", 0L, "0.00%", 0L, "0.00%");
      threatThreatOsInfoModelList.add(threatThreatOsInfoModel);
      map.put(224, 254);
    }
    context.putVar("threatThreatOsInfoList", threatThreatOsInfoModelList);
    // 威胁应用版本分布
    JSONArray threatThreatAppInfoArray = threatJsonObject.getJSONArray("app_version_table");
    List<ThreatThreatAppInfoModel> threatThreatAppInfoModelList = new ArrayList<>();
    if (threatThreatAppInfoArray.size() > 0) {
      for (int i = 0; i < threatThreatAppInfoArray.size(); i++) {
        ThreatThreatAppInfoModel threatThreatAppInfoModel = new ThreatThreatAppInfoModel(
            threatThreatAppInfoArray.getJSONObject(i).getString("app_version"),
            threatThreatAppInfoArray.getJSONObject(i).getLongValue("risk_count"),
            threatThreatAppInfoArray.getJSONObject(i).getString("rate"),
            threatThreatAppInfoArray.getJSONObject(i).getLongValue("risk_dev_count"),
            threatThreatAppInfoArray.getJSONObject(i).getString("dev_rate"));
        threatThreatAppInfoModelList.add(threatThreatAppInfoModel);
      }
      map.put(257 + threatThreatAppInfoModelList.size(), 287);
    } else {
      ThreatThreatAppInfoModel threatThreatAppInfoModel = new ThreatThreatAppInfoModel(
          "-", 0L, "0.00%", 0L, "0.00%");
      threatThreatAppInfoModelList.add(threatThreatAppInfoModel);
      map.put(257, 287);
    }
    context.putVar("threatThreatAppInfoList", threatThreatAppInfoModelList);
    // 威胁影响设备Top10
    JSONArray threatThreatDevArray = threatJsonObject.getJSONArray("dev_table");
    List<threatThreatDevModel> threatThreatDevModelList = new ArrayList<>();
    if (threatThreatDevArray.size() > 0) {
      for (int i = 0; i < threatThreatDevArray.size(); i++) {
        threatThreatDevModel threatThreatDevModel = new threatThreatDevModel(
            threatThreatDevArray.getJSONObject(i).getString("udid"),
            threatThreatDevArray.getJSONObject(i).getLongValue("count"),
            threatThreatDevArray.getJSONObject(i).getLongValue("data_type_count"),
            threatThreatDevArray.getJSONObject(i).getString("os_info"),
            threatThreatDevArray.getJSONObject(i).getString("last_time"));
        threatThreatDevModelList.add(threatThreatDevModel);
      }
      map.put(290 + threatThreatDevModelList.size(), 300);
    } else {
      threatThreatDevModel threatThreatDevModel = new threatThreatDevModel(
          "-", 0L, 0L, "-", "-");
      threatThreatDevModelList.add(threatThreatDevModel);
      map.put(290, 300);
    }
    context.putVar("threatThreatDevList", threatThreatDevModelList);
    // 威胁策略实施情况统计
    JSONArray threatTacticsArray = threatJsonObject.getJSONArray("tactics_table");
    log.info("threatTacticsArray:{}", threatTacticsArray.toJSONString());
    List<ThreatTacticsModel> threatTacticsModelList = new ArrayList<>();
    if (threatTacticsArray.size() > 0) {
      for (int i = 0; i < threatTacticsArray.size(); i++) {
        JSONObject jsonObject = threatTacticsArray.getJSONObject(i);
        String strThreatType = getThreatType(jsonObject.getString("risk_type"));
        String strStstus = jsonObject.getIntValue("status") == 0 ? "关闭" : "开启";
        String strTacticsType = getTacticsType(jsonObject.getString("plot_type"));
        ThreatTacticsModel threatTacticsModel = new ThreatTacticsModel(strThreatType, strStstus,
            strTacticsType, jsonObject.getLongValue("risk_count"),
            jsonObject.getLongValue("risk_plot_count"), jsonObject.getString("rate"));
        threatTacticsModelList.add(threatTacticsModel);
      }
      map.put(303 + threatTacticsModelList.size(), 311);
    } else {
      ThreatTacticsModel threatTacticsModel = new ThreatTacticsModel("-", "-",
          "-", 0L, 0L, "0.00%");
      threatTacticsModelList.add(threatTacticsModel);
      map.put(303, 311);
    }
    context.putVar("threatThreatTacticsList", threatTacticsModelList);
    // 环境风险统计
    JSONObject envJsonObject = dataJsonObject.getJSONObject("evn");
    // 异常设备数
    context.putVar("threatEnvDevNum", envJsonObject.getLongValue("abnormal_dev_count"));
    // 异常设备率
    context.putVar("threatEnvDevPlot", envJsonObject.getString("abnormal_dev_rate"));
    // 环境风险总体趋势
    JSONArray envCoordArray = envJsonObject.getJSONArray("coord_list");
    JSONArray envDevCountArray = envJsonObject.getJSONArray("abnormal_dev_list");
    List<ThreatEnvDevTrendModel> threatEnvDevTrendModelList = new ArrayList<>();
    for (int i = 0; i < envCoordArray.size(); i++) {
      ThreatEnvDevTrendModel threatEnvDevTrendModel = new ThreatEnvDevTrendModel(
          envCoordArray.getString(i), envDevCountArray.getLongValue(i));
      threatEnvDevTrendModelList.add(threatEnvDevTrendModel);
    }
    context.putVar("threatEnvDevTrendList", threatEnvDevTrendModelList);
    JSONArray threatEnvTypeClassifyArray = envJsonObject.getJSONArray("classify");
    List<ThreatEnvTypeModel> threatEnvTypeModelList = new ArrayList<>();
    if (threatEnvTypeClassifyArray.size() > 0) {
      for (int i = 0; i < threatEnvTypeClassifyArray.size(); i++) {
        JSONObject job = threatEnvTypeClassifyArray.getJSONObject(i);
        String strEnvType = getEnvType(job.getString("env_type"));
        ThreatEnvTypeModel threatEnvTypeModel = new ThreatEnvTypeModel(
            strEnvType, job.getLongValue("env_count"));
        threatEnvTypeModelList.add(threatEnvTypeModel);
      }
    } else {
      ThreatEnvTypeModel threatEnvTypeModel = new ThreatEnvTypeModel(
          "-", 0L);
      threatEnvTypeModelList.add(threatEnvTypeModel);
    }
    context.putVar("threatEnvTypeList", threatEnvTypeModelList);
    // 环境风险地域分布
    JSONArray threatEnvLocationDistributedArray = envJsonObject.getJSONArray("location_table");
    List<ThreatEnvLocationDistributedModel> threatEnvLocationDistributedModelList1 =
        new ArrayList<>();
    if (threatEnvLocationDistributedArray.size() > 0) {
      for (int i = 0; i < threatEnvLocationDistributedArray.size(); i++) {
        ThreatEnvLocationDistributedModel threatEnvLocationDistributedModel =
            new ThreatEnvLocationDistributedModel(
                threatEnvLocationDistributedArray.getJSONObject(i).getString("location"),
                threatEnvLocationDistributedArray.getJSONObject(i).getLongValue("abnormal_count"),
                threatEnvLocationDistributedArray.getJSONObject(i)
                    .getLongValue("abnormal_dev_count"),
                threatEnvLocationDistributedArray.getJSONObject(i).getLongValue("start_dev_count"),
                threatEnvLocationDistributedArray.getJSONObject(i).getString("risk_dev_rate"));
        threatEnvLocationDistributedModelList1.add(threatEnvLocationDistributedModel);
      }
      map.put(355 + threatEnvLocationDistributedModelList1.size(), 387);
    } else {
      ThreatEnvLocationDistributedModel threatEnvLocationDistributedModel =
          new ThreatEnvLocationDistributedModel(
              "-", 0L, 0L, 0L, "0.00%");
      threatEnvLocationDistributedModelList1.add(threatEnvLocationDistributedModel);
      map.put(355, 387);
    }
    context.putVar("threatEnvLocationList", threatEnvLocationDistributedModelList1);
    // 环境风险系统版本分布
    JSONArray threatEnvOsInfoDistributedArray = envJsonObject.getJSONArray("os_version_table");
    log.info("threatEnvOsInfoDistributedArray:{}", threatEnvOsInfoDistributedArray);
    List<ThreatEnvOsInfoDistributedModel> threatEnvOsInfoDistributedModelList = new ArrayList<>();
    if (threatEnvOsInfoDistributedArray.size() > 0) {
      for (int i = 0; i < threatEnvOsInfoDistributedArray.size(); i++) {
        ThreatEnvOsInfoDistributedModel threatEnvOsInfoDistributedModel =
            new ThreatEnvOsInfoDistributedModel(
                threatEnvOsInfoDistributedArray.getJSONObject(i).getString("os_version"),//系统版本
                threatEnvOsInfoDistributedArray.getJSONObject(i).getLongValue("abnormal_count"),
                //风险总数
                threatEnvOsInfoDistributedArray.getJSONObject(i).getLongValue("abnormal_dev_count"),
                //影响设备数
                threatEnvOsInfoDistributedArray.getJSONObject(i).getLongValue("start_dev_count"),
                //活跃设备数
                threatEnvOsInfoDistributedArray.getJSONObject(i).getString("risk_dev_rate"));//影响设备率
        threatEnvOsInfoDistributedModelList.add(threatEnvOsInfoDistributedModel);
      }
      map.put(390 + threatEnvOsInfoDistributedModelList.size(), 420);
    } else {
      ThreatEnvOsInfoDistributedModel threatEnvOsInfoDistributedModel =
          new ThreatEnvOsInfoDistributedModel(
              "-",//系统版本
              0L,//风险总数
              0L,//影响设备数
              0L,//活跃设备数
              "0.00%");//影响设备率
      threatEnvOsInfoDistributedModelList.add(threatEnvOsInfoDistributedModel);
      map.put(390, 420);
    }
    context.putVar("threatEnvOsInfoList", threatEnvOsInfoDistributedModelList);
    // 环境风险应用版本分布
    JSONArray threatEnvAppInfoDistributedArray = envJsonObject.getJSONArray("app_version_table");
    List<ThreatEnvAppInfoDistributedModel> threatEnvAppInfoDistributedModelList = new ArrayList<>();
    if (threatEnvAppInfoDistributedArray.size() > 0) {
      for (int i = 0; i < threatEnvAppInfoDistributedArray.size(); i++) {
        ThreatEnvAppInfoDistributedModel threatEnvAppInfoDistributedModel =
            new ThreatEnvAppInfoDistributedModel(
                threatEnvAppInfoDistributedArray.getJSONObject(i).getString("app_version"),
                threatEnvAppInfoDistributedArray.getJSONObject(i).getLongValue("abnormal_count"),
                threatEnvAppInfoDistributedArray.getJSONObject(i)
                    .getLongValue("abnormal_dev_count"),
                threatEnvAppInfoDistributedArray.getJSONObject(i).getLongValue("start_dev_count"),
                threatEnvAppInfoDistributedArray.getJSONObject(i).getString("risk_dev_rate"));
        threatEnvAppInfoDistributedModelList.add(threatEnvAppInfoDistributedModel);
      }
      map.put(423
          + threatEnvAppInfoDistributedModelList.size(), 453);
    } else {
      ThreatEnvAppInfoDistributedModel threatEnvAppInfoDistributedModel =
          new ThreatEnvAppInfoDistributedModel(
              "-", 0L, 0L, 0L, "0.00%");
      threatEnvAppInfoDistributedModelList.add(threatEnvAppInfoDistributedModel);
      map.put(423, 453);
    }
    context.putVar("threatEnvAppInfoList", threatEnvAppInfoDistributedModelList);
    // 环境风险影响设备Top10
    JSONArray threatEnvDevArray = envJsonObject.getJSONArray("dev_table");
    List<ThreatEnvDevModel> threatEnvDevModelList = new ArrayList<>();
    if (threatEnvDevArray.size() > 0) {
      for (int i = 0; i < threatEnvDevArray.size(); i++) {
        ThreatEnvDevModel threatEnvDevModel = new ThreatEnvDevModel(
            threatEnvDevArray.getJSONObject(i).getString("udid"),
            threatEnvDevArray.getJSONObject(i).getLongValue("env_count"),
            threatEnvDevArray.getJSONObject(i).getLongValue("data_type_count"),
            threatEnvDevArray.getJSONObject(i).getString("app_version"),
            threatEnvDevArray.getJSONObject(i).getString("os_info"),
            threatEnvDevArray.getJSONObject(i).getString("last_time"));
        threatEnvDevModelList.add(threatEnvDevModel);
      }
      map.put(456 + threatEnvDevModelList.size(), 466);
    } else {
      ThreatEnvDevModel threatEnvDevModel = new ThreatEnvDevModel(
          "-", 0L, 0L, "-", "-", "-");
      threatEnvDevModelList.add(threatEnvDevModel);
      map.put(456, 466);
    }
    mapDeleteRows.put("威胁态势", map);
    context.putVar("threatEnvDevTop10List", threatEnvDevModelList);
  }

  /**
   * 赋值运行分析部分数据.
   */
  private void genRunContext(JSONObject dataJsonObject, Context context,
      Map<String, Map<Integer, Integer>> mapDeleteRows) {
    Map<Integer, Integer> map = new HashMap<>();
    JSONObject runTotleJsonObject = dataJsonObject.getJSONObject("runningCount");
    //三.1.1.总体情况
    context.putVar("runTotleNumbers", runTotleJsonObject.getLongValue("start_total_count"));
    context.putVar("runActiveDevice", runTotleJsonObject.getLongValue("start_dev_count"));
    context.putVar("runAverageNumber", runTotleJsonObject.getLongValue("start_average_count"));
    //三.1.2.运行总体趋势-启动次数总体趋势
    JSONObject runTotleTJsonObject = dataJsonObject.getJSONObject("runningThreat");
    JSONArray runDateJsonArray = runTotleTJsonObject.getJSONArray("coord_list");
    JSONArray runStartCountJsonArray = runTotleTJsonObject.getJSONArray("start_count_list");
    log.info("runTotleTJsonObject.keySet(){}", runTotleTJsonObject.keySet());
    List<RunTrendMapModel> runNumList = new ArrayList<>();
    for (int i = 0; i < runDateJsonArray.size(); i++) {
      RunTrendMapModel runTrendMapModel = new RunTrendMapModel(runDateJsonArray.getString(i),
          runStartCountJsonArray.getLong(i));
      runNumList.add(runTrendMapModel);
    }
    context.putVar("runCountTotalNumList", runNumList);
    //活跃设备总体趋势
    JSONArray runStartDevCountJsonArray = runTotleTJsonObject.getJSONArray("start_dev_count_list");
    List<RunActiveMapModel> runActiveList = new ArrayList<>();
    for (int i = 0; i < runStartDevCountJsonArray.size(); i++) {
      RunActiveMapModel runActiveMapModel = new RunActiveMapModel(
          runStartDevCountJsonArray.getString(i),
          runStartDevCountJsonArray.getLong(i));
      runActiveList.add(runActiveMapModel);
    }
    context.putVar("runActiveEquipmentList", runActiveList);
    //三.1.3.1.启动次数地域分布
    JSONArray runLocationJsonArray = dataJsonObject.getJSONObject("runningStatByLocation")
        .getJSONArray("datalist");
    List<RunLocationModel> runLocationModelList = new ArrayList<>();
    if (runLocationJsonArray.size() > 0) {
      for (int i = 0; i < runLocationJsonArray.size(); i++) {
        JSONObject object = runLocationJsonArray.getJSONObject(i);
        RunLocationModel runLocationModel = new RunLocationModel(object.getString("type"),
            object.getLong("count"), decimalToPercent(object.getDoubleValue("percent")));
        runLocationModelList.add(runLocationModel);
      }
      map.put(43 + runLocationModelList.size(), 73);
    } else {
      RunLocationModel runLocationModel = new RunLocationModel("-",
          0L, "0.00%");
      runLocationModelList.add(runLocationModel);
      map.put(43, 73);
    }
    context.putVar("runLocationList", runLocationModelList);

    //三.1.3.2.启动次数应用版本分布
    JSONArray runStatByLocationJsonArray = dataJsonObject.getJSONObject("runningStatByAppVersion")
        .getJSONArray("datalist");
    List<RunAppLicationVersionModel> runningStatByLocationList = new ArrayList<>();
    if (runStatByLocationJsonArray.size() > 0) {
      for (int i = 0; i < runStatByLocationJsonArray.size(); i++) {
        // 这没有run_dev_count数据
        JSONObject object1 = runStatByLocationJsonArray.getJSONObject(i);
        RunAppLicationVersionModel runAppLicationVersionModel = new RunAppLicationVersionModel(
            object1.getString("type"),
            object1.getLong("count"), decimalToPercent(object1.getDoubleValue("percent")));
        runningStatByLocationList.add(runAppLicationVersionModel);
      }
      map.put(76 + runningStatByLocationList.size(), 106);
    } else {
      RunAppLicationVersionModel runAppLicationVersionModel = new RunAppLicationVersionModel(
          "-", 0L, "0.00%");
      runningStatByLocationList.add(runAppLicationVersionModel);
      map.put(76, 106);
    }
    context.putVar("runAppLicationVersionList", runningStatByLocationList);
    //三.1.4.启动次数设备Top10

    //三.2.1.总体情况
    JSONObject runterminalJsonObject = dataJsonObject.getJSONObject("devCount");
    context.putVar("runEquipmentTotle", runterminalJsonObject.getLongValue("dev_count"));
    context.putVar("runEquipmentNum", runterminalJsonObject.getLongValue("start_dev_count"));
    context.putVar("runEquipmentRate", runterminalJsonObject.getString("start_dev_rate"));
    //三.2.2.设备总体趋势－设备总数总体趋势
    JSONObject runEquipmentTotalJsonObject = dataJsonObject.getJSONObject("devThrend");
    JSONArray runEquipmentDateJsonArray = runEquipmentTotalJsonObject.getJSONArray("coord_list");
    JSONArray runDevCountJsonArray = runEquipmentTotalJsonObject.getJSONArray("dev_count_list");
    List<RunDevCountMapModel> runDevCountMapModelArrayList = new ArrayList<>();
    for (int i = 0; i < runEquipmentDateJsonArray.size(); i++) {
      RunDevCountMapModel runDevCountMapModel = new RunDevCountMapModel(
          runEquipmentDateJsonArray.getString(i), runDevCountJsonArray.getLong(i));
      runDevCountMapModelArrayList.add(runDevCountMapModel);
    }
    context.putVar("runEquipmentTotalList", runDevCountMapModelArrayList);
    //新增设备总体趋势
    JSONArray runAddEquipmentJsonArray = runEquipmentTotalJsonObject.getJSONArray("dev_new_list");
    List<RunAddEquipmentMapModel> runAddEquipmentMapModelList = new ArrayList<>();
    for (int i = 0; i < runEquipmentDateJsonArray.size(); i++) {
      RunAddEquipmentMapModel runAddEquipmentMapModel = new RunAddEquipmentMapModel(
          runEquipmentDateJsonArray.getString(i), runAddEquipmentJsonArray.getLong(i));
      runAddEquipmentMapModelList.add(runAddEquipmentMapModel);
    }
    context.putVar("runaddEquipmentList", runAddEquipmentMapModelList);

    //三.2.3.1.系统版本分布
    JSONArray runSystemJsonArray = dataJsonObject.getJSONObject("devStatByOsVersion")
        .getJSONArray("datalist");
    List<RunSystemModel> runSystemModelList = new ArrayList<>();
    if (runSystemJsonArray.size() > 0) {
      for (int i = 0; i < runSystemJsonArray.size(); i++) {
        JSONObject object = runSystemJsonArray.getJSONObject(i);
        RunSystemModel runSystemModel = new RunSystemModel(object.getString("type"),
            object.getLong("count"), decimalToPercent(object.getDoubleValue("percent")));
        runSystemModelList.add(runSystemModel);
      }
      map.put(149 + runSystemModelList.size(), 179);
    } else {
      RunSystemModel runSystemModel = new RunSystemModel("-",
          0L, "0.00%");
      runSystemModelList.add(runSystemModel);
      map.put(149, 179);
    }
    context.putVar("runSystemList", runSystemModelList);

    //三.2.3.2.应用版本分布
    JSONArray runAppVersionJsonArray = dataJsonObject.getJSONObject("devStatByAppVersion")
        .getJSONArray("datalist");
    List<RunAppVersionModel> runAppVersionModelList = new ArrayList<>();
    if (runAppVersionJsonArray.size() > 0) {
      for (int i = 0; i < runAppVersionJsonArray.size(); i++) {
        JSONObject object = runAppVersionJsonArray.getJSONObject(i);
        RunAppVersionModel runAppVersionModel = new RunAppVersionModel(object.getString("type"),
            object.getLong("count"), decimalToPercent(object.getDoubleValue("percent")));
        runAppVersionModelList.add(runAppVersionModel);
      }
      map.put(182 + runAppVersionModelList.size(), 212);
    } else {
      RunAppVersionModel runAppVersionModel = new RunAppVersionModel("-",
          0L, "0.00%");
      runAppVersionModelList.add(runAppVersionModel);
      map.put(182, 212);
    }
    context.putVar("runAppVersionList", runAppVersionModelList);
    //三.2.3.3.设备型号分布
    JSONArray runEquipmentVersionJsonArray = dataJsonObject.getJSONObject("devSatatByDevice")
        .getJSONArray("datalist");
    List<RunEquipmentVersionModel> runEquipmentVersionModelList = new ArrayList<>();
    if (runEquipmentVersionJsonArray.size() > 0) {
      for (int i = 0; i < runEquipmentVersionJsonArray.size(); i++) {
        JSONObject object = runEquipmentVersionJsonArray.getJSONObject(i);
        RunEquipmentVersionModel runEquipmentVersionModel = new RunEquipmentVersionModel(
            object.getString("type"),
            object.getLong("count"), decimalToPercent(object.getDoubleValue("percent")));
        runEquipmentVersionModelList.add(runEquipmentVersionModel);
      }
      map.put(215 + runEquipmentVersionModelList.size(), 245);
    } else {
      RunEquipmentVersionModel runEquipmentVersionModel = new RunEquipmentVersionModel(
          "-", 0L, "0.00%");
      runEquipmentVersionModelList.add(runEquipmentVersionModel);
      map.put(215, 245);
    }
    context.putVar("runEquipmentVersionList", runEquipmentVersionModelList);
    //三.3.终端应用安装量Top10
    JSONArray runTerminalJsonArray = dataJsonObject.getJSONObject("appCount")
        .getJSONArray("datalist");
    List<RunTerminalModel> runTerminalModelList = new ArrayList<>();
    if (runTerminalJsonArray.size() > 0) {
      for (int i = 0; i < runTerminalJsonArray.size(); i++) {
        JSONObject runTerminalJsonObject = runTerminalJsonArray.getJSONObject(i);
        RunTerminalModel runTerminalModel = new RunTerminalModel(
            runTerminalJsonObject.getString("app_name"), runTerminalJsonObject.getString("percent"),
            runTerminalJsonObject.getLong("app_count"));
        runTerminalModelList.add(runTerminalModel);
      }
      map.put(248 + runTerminalModelList.size(), 258);
    } else {
      RunTerminalModel runTerminalModel = new RunTerminalModel(
          "-", "0.00%", 0L);
      runTerminalModelList.add(runTerminalModel);
      map.put(248, 258);
    }
    mapDeleteRows.put("运行分析", map);
    context.putVar("runTerminalList", runTerminalModelList);
  }

  /**
   * 赋值综合态势部分数据.
   */
  private void genHomeContext(JSONObject dataJsonObject, Context context,
      Map<String, Map<Integer, Integer>> mapDeleteRows) {
    // 综合态势安全事件统计的曲线图
    JSONObject eventJsonObject = dataJsonObject.getJSONObject("event");
    context.putVar("indexEventDevNum", eventJsonObject.getLongValue("event_dev_count"));
    context.putVar("indexEventNum", eventJsonObject.getLongValue("event_count"));
    JSONArray eventDateJsonArray = eventJsonObject.getJSONArray("coord_list");
    JSONArray eventCountJsonArray = eventJsonObject.getJSONArray("event_list");
    JSONArray eventDevCountJsonArray = eventJsonObject.getJSONArray("event_dev_list");
    List<IndexEventModel> indexEventModelList = new ArrayList<>();
    for (int i = 0; i < eventDateJsonArray.size(); i++) {
      IndexEventModel indexEventModel = new IndexEventModel(eventDateJsonArray.getString(i),
          eventCountJsonArray.getLong(i), eventDevCountJsonArray.getLong(i));
      indexEventModelList.add(indexEventModel);
    }
    context.putVar("indexEventList", indexEventModelList);
    // 综合态势运行统计的曲线图
    JSONObject startJsonObject = dataJsonObject.getJSONObject("start");
    context.putVar("indexRunDevNum", startJsonObject.getLongValue("start_dev_count"));
    context.putVar("indexRunNum", startJsonObject.getLongValue("start_count"));
    context.putVar("indexRunAvgNum", startJsonObject.getLongValue("start_average_count"));
    JSONArray startDateJsonArray = startJsonObject.getJSONArray("coord_list");
    JSONArray startCountJsonArray = startJsonObject.getJSONArray("start_count_list");
    JSONArray startDevCountJsonArray = startJsonObject.getJSONArray("start_dev_count_list");
    List<IndexRunModel> indexRunModelList = new ArrayList<>();
    for (int i = 0; i < startDateJsonArray.size(); i++) {
      IndexRunModel indexRunModel = new IndexRunModel(startDateJsonArray.getString(i),
          startCountJsonArray.getLong(i), startDevCountJsonArray.getLong(i));
      indexRunModelList.add(indexRunModel);
    }
    context.putVar("indexRunList", indexRunModelList);
    // 综合态势崩溃的曲线图
    JSONObject crashJsonObject = dataJsonObject.getJSONObject("crash");
    //
    context.putVar("indexCrashNum", crashJsonObject.getLongValue("app_crash_count"));
    context.putVar("indexCrashDevNum", crashJsonObject.getLongValue("crash_dev_count"));
    context.putVar("indexCrashRate", crashJsonObject.getString("crash_dev_rate"));
    JSONArray crashDateJsonArray = crashJsonObject.getJSONArray("coord_list");
    JSONArray crashCountJsonArray = crashJsonObject.getJSONArray("crash_count_list");
    JSONArray crashDevCountJsonArray = crashJsonObject.getJSONArray("crash_dev_count_list");
    List<IndexCrashModel> indexCrashModelList = new ArrayList<>();
    for (int i = 0; i < crashDateJsonArray.size(); i++) {
      IndexCrashModel indexCrashModel = new IndexCrashModel(crashDateJsonArray.getString(i),
          crashCountJsonArray.getLong(i), crashDevCountJsonArray.getLong(i));
      indexCrashModelList.add(indexCrashModel);
    }
    context.putVar("indexCrashList", indexCrashModelList);
    // 威胁影响设备数
    JSONObject threatJsonObject = dataJsonObject.getJSONObject("threat");
    context.putVar("indexThreatNum", threatJsonObject.getLongValue("threat_count"));
    context.putVar("indexThreatTypeNum", threatJsonObject.getLongValue("type_total"));
    context.putVar("indexThreatDevNum", threatJsonObject.getLongValue("threat_dev_count"));
    JSONArray threatJsonArray = threatJsonObject.getJSONArray("datalist");
    List<IndexThreatModel> indexThreatDevList = new ArrayList<>();
    if (threatJsonArray.size() > 0) {
      for (int i = 0; i < threatJsonArray.size(); i++) {
        JSONObject object = threatJsonArray.getJSONObject(i);
        String strThreatType = getThreatType(object.getString("type"));
        IndexThreatModel indexThreatModel = new IndexThreatModel(strThreatType,
            object.getLong("dev_count"));
        indexThreatDevList.add(indexThreatModel);
      }
    } else {
      IndexThreatModel indexThreatModel = new IndexThreatModel("-",
          0L);
      indexThreatDevList.add(indexThreatModel);
    }
    context.putVar("indexThreatDevList", indexThreatDevList);
    // 地域安全态势分布
    JSONArray locationJsonArray = dataJsonObject.getJSONObject("distribution")
        .getJSONArray("table");
    List<IndexLocationModel> indexLocationList = new ArrayList<>();
    Map<Integer, Integer> map = new HashMap<>();
    if (locationJsonArray.size() > 0) {
      for (int i = 0; i < locationJsonArray.size(); i++) {
        // 这没有run_dev_count数据
        JSONObject object = locationJsonArray.getJSONObject(i);
        String location = object.getString("location");
        // 排除空和未知的显示
        if (location != null && !"".equals(location) && !"unknown".equals(location)) {
          IndexLocationModel indexLocationModel = new IndexLocationModel(location,
              object.getLong("threat_count"), object.getLong("event_count"),
              object.getLong("env_count"),
              object.getLong("crash_count"), object.getLong("crash_dev_count"),
              object.getLong("threat_dev_count"),
              object.getLong("run_count"));
          indexLocationList.add(indexLocationModel);
        }
      }
      map.put(19 + indexLocationList.size(), 59);
      context.putVar("indexLocationNum", indexLocationList.size());
    } else {
      IndexLocationModel indexLocationModel = new IndexLocationModel("-", 0L, 0L, 0L,
          0L, 0L, 0L, 0L);
      indexLocationList.add(indexLocationModel);
      map.put(19, 59);
      context.putVar("indexLocationNum", 0);
    }

    JSONArray locationMapJsonArray = dataJsonObject.getJSONObject("distribution")
        .getJSONArray("map");
    List<String> locationTopList = new ArrayList<>();
    int topNum = 0;
    for (int i = 0; i < locationMapJsonArray.size(); i++) {
      JSONObject object = locationMapJsonArray.getJSONObject(i);
      String location = object.getString("type");
      if (location != null && !"".equals(location) && !"unknown".equals(location)) {
        if (topNum < 5) {
          locationTopList.add(location);
        } else {
          break;
        }
        topNum++;
      }
    }
    // map join 1.8 语法
    context.putVar("indexTopLocation", locationTopList.stream().map(i -> i.toString()).collect(
        Collectors.joining(",")));
    context.putVar("indexLocationList", indexLocationList);
    mapDeleteRows.put("综合态势", map);
  }

  /**
   * 从硬盘数据文件中读取数据.
   */
  private JSONObject readDataFromFile(String dataPath) {
    FileReader fileReader = null;
    BufferedReader bufferedReader = null;
    StringBuffer stringBuffer = new StringBuffer();
    try {
      fileReader = new FileReader(dataPath);
      bufferedReader = new BufferedReader(fileReader);
      String line = null;
      while ((line = bufferedReader.readLine()) != null) {
        stringBuffer.append(line);
      }
    } catch (FileNotFoundException e) {
      log.error("", e);
    } catch (IOException e) {
      log.error("", e);
    } finally {
      if (bufferedReader != null) {
        try {
          bufferedReader.close();
        } catch (IOException e) {
          log.error("", e);
        }
      }
      if (fileReader != null) {
        try {
          fileReader.close();
        } catch (IOException e) {
          log.error("error", e);
        }
      }
    }
    String dataStr = stringBuffer.toString();
    JSONObject dataJsonObject = null;
    try {
      dataJsonObject = JSON.parseObject(dataStr);
    } catch (Exception e) {
      log.error("", e);
    }
    return dataJsonObject;
  }

  /**
   * 获得报表的目录名，由 agentId_taskId_subTaskId组成.
   */
  private String subTaskDir(ReportSubTaskManage reportSubTaskManage) {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(reportSubTaskManage.getNumAgentId());
    stringBuffer.append("_");
    stringBuffer.append(reportSubTaskManage.getNumTaskId());
    stringBuffer.append("_");
    stringBuffer.append(reportSubTaskManage.getId());
    return stringBuffer.toString();
  }

  /**
   * 报表目录的绝对路径.
   */
  private String subTaskAbsoluteDir(ReportSubTaskManage reportSubTaskManage) {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(reportDir);
    if (!reportDir.endsWith("/")) {
      stringBuffer.append("/");
    }
    stringBuffer.append(subTaskDir(reportSubTaskManage));
    stringBuffer.append("/");
    return stringBuffer.toString();
  }

  private String firstIndex(int size) {
    String index = "";
    switch (size) {
      case 1:
        index = "一";
        break;
      case 2:
        index = "二";
        break;
      case 3:
        index = "三";
        break;
      case 4:
        index = "四";
        break;
      case 5:
        index = "五";
        break;
      case 6:
        index = "六";
        break;
      default:
        index = "";
    }
    return index;
  }

  /**
   * 威胁类型英文转汉字.
   */
  private String getThreatType(String strThreatType) {
    String strResult = "";
    switch (strThreatType) {
      case "e_inject":
        strResult = "注入攻击";
        break;
      case "e_devicesreuse":
        strResult = "设备重用";
        break;
      case "e_location":
        strResult = "位置欺诈";
        break;
      case "e_emulator":
        strResult = "模拟器";
        break;
      case "e_gameplugin":
        strResult = "程序外挂";
        break;
      case "e_debug":
        strResult = "调试行为";
        break;
      case "e_hostfraud":
        strResult = "域名欺诈";
        break;
      case "e_speed":
        strResult = "系统加速";
        break;
      default:
        break;
    }
    return strResult;
  }

  /**
   * 环境类型转汉字.
   */
  private String getEnvType(String strEnvType) {
    String strResult = "";
    switch (strEnvType) {
      case "risk_app":
        strResult = "风险应用";
        break;
      case "risk_frame":
        strResult = "框架攻击";
        break;
      case "root":
        strResult = "Root/越狱";
        break;
      case "sys_conf":
        strResult = "敏感配置";
        break;
      case "risk_process":
        strResult = "风险进程";
        break;
      default:
        break;
    }
    return strResult;
  }

  /**
   * 策略类型英文转汉字.
   */
  private String getTacticsType(String strTacticsType) {
    String strResult = "";
    switch (strTacticsType) {
      case "0":
        strResult = "静默监控";
        break;
      case "1":
        strResult = "弹窗提醒";
        break;
      case "2":
        strResult = "提醒后选择退出";
        break;
      case "3":
        strResult = "提醒后强制退出";
        break;
      default:
        break;
    }
    return strResult;
  }

  /**
   * 删除sheet中所有为0的行.
   */
  private void rowsHidden(XSSFWorkbook workbook, String strSheetName, int numStartRow,
      int numEndRow)
      throws IOException {
    XSSFSheet sheet = workbook.getSheet(strSheetName);
    for (int i = numStartRow; i < numEndRow; i++) {
      XSSFRow xssfrow = sheet.getRow(i);
      xssfrow.setZeroHeight(true);
    }
  }

  /**
   * 读入制作好的初始报表.
   */
  private XSSFWorkbook readWorkBook(String strPath) {
    FileInputStream is = null;
    XSSFWorkbook workbook = null;
    try {
      is = new FileInputStream(strPath);
      workbook = new XSSFWorkbook(is);
    } catch (Exception e) {
      log.error("", e);
    } finally {
      if (is != null) {
        try {
          is.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    return workbook;
  }

  /**
   * 输出隐藏好的数据流.
   */
  private void writeWorkBook(XSSFWorkbook workbook, String strPath) {
    FileOutputStream os = null;
    try {
      os = new FileOutputStream(strPath);
    } catch (FileNotFoundException e) {
      log.error("", e);
    }
    try {
      workbook.write(os);
      os.close();
    } catch (IOException e) {
      log.error("", e);
    }
  }

  /**
   * 删除报表没选择sheet区域.
   */
  private XSSFWorkbook removeSheet(XSSFWorkbook xssfWorkbook, List<String> areaList) {
    if (areaList.size() == 4) {
      return xssfWorkbook;
    }
    if (!areaList.contains(strCrash)) {
      xssfWorkbook.removeSheetAt(4);
    }
    if (!areaList.contains(strRun)) {
      xssfWorkbook.removeSheetAt(3);
    }
    if (!areaList.contains(strThreat)) {
      xssfWorkbook.removeSheetAt(2);
    }
    if (!areaList.contains(strHome)) {
      xssfWorkbook.removeSheetAt(1);
    }
    return xssfWorkbook;
  }

  /**
   * 小数转百分数.
   */
  private String decimalToPercent(Double numDouble) {
    DecimalFormat df = new DecimalFormat("0.00");
    String strRate = df.format(numDouble * 100) + "%";
    return strRate;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.entity.ReportTaskManage;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.repository.ReportTaskManageRepository;
import com.bangcle.service.ReportListService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:47 18-4-9.
 */
@Service
@Slf4j
public class ReportListServiceImpl implements ReportListService {

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Autowired
  private ReportTaskManageRepository reportTaskManageRepository;

  @Override
  public JSONObject getReportList(Integer numAgentId, Integer numTaskId, String strBeginTime,
      String strEndTime, Integer numPage, Integer numSize) throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    Date dateBeginTime = null;
    Date dateEndTime = null;
    if (strBeginTime != null && strEndTime != null) {
      Calendar calendar = new GregorianCalendar();
      calendar.setTime(sdf.parse(strEndTime));
      calendar.add(calendar.DATE, 1);
      dateBeginTime = sdf.parse(strBeginTime);
      dateEndTime = calendar.getTime();
    }
    int numTotal = 0;
    Page<ReportSubTaskManage> pageReportSubTaskManages = null;
    if (numTaskId == null && dateBeginTime != null && dateEndTime != null) {
      pageReportSubTaskManages = reportSubtaskManageRepository
          .findByTimeAndAgentId(numAgentId, dateBeginTime, dateEndTime, 1,
              new PageRequest(numPage - 1, numSize));
      numTotal = reportSubtaskManageRepository
          .findByTimeAndAgentId(numAgentId, dateBeginTime, dateEndTime, 1);
    } else if (numTaskId != null && dateBeginTime != null && dateEndTime != null) {
      pageReportSubTaskManages = reportSubtaskManageRepository
          .findByTimeAndAgentIdAndTaskName(numAgentId, numTaskId, dateBeginTime, dateEndTime, 1,
              new PageRequest(numPage - 1, numSize));
      numTotal = reportSubtaskManageRepository
          .findByTimeAndAgentIdAndTaskName(numAgentId, numTaskId, dateBeginTime, dateEndTime, 1);
    } else if (numTaskId == null && dateBeginTime == null && dateEndTime == null) {
      pageReportSubTaskManages = reportSubtaskManageRepository
          .findByAgentId(numAgentId, 1, new PageRequest(numPage - 1, numSize));
      numTotal = reportSubtaskManageRepository.findByAgentId(numAgentId, 1);
    } else if (numTaskId != null && dateBeginTime == null && dateEndTime == null) {
      pageReportSubTaskManages = reportSubtaskManageRepository
          .findByAgentIdAndTaskName(numAgentId, numTaskId, 1,
              new PageRequest(numPage - 1, numSize));
      numTotal = reportSubtaskManageRepository.findByAgentIdAndTaskName(numAgentId, numTaskId, 1);
    }
    JSONArray jsonArray = new JSONArray();
    for (ReportSubTaskManage reportSubTaskManage : pageReportSubTaskManages) {
      JSONObject data = new JSONObject();
      data.put("begin_time", reportSubTaskManage.getStrBeginTime());
      data.put("end_time", reportSubTaskManage.getStrEndTime());
      data.put("create_time", TimeParse.dataFormat(reportSubTaskManage.getDateCreatedAt()));
      data.put("task_cycle", reportSubTaskManage.getNumTaskCycle());
      data.put("task_id", reportSubTaskManage.getNumTaskId());
      data.put("task_name", reportSubTaskManage.getStrReportName());
      data.put("content_id", reportSubTaskManage.getId());
      jsonArray.add(data);
    }
    JSONObject result = new JSONObject();
    JSONObject jsonObject = new JSONObject();
    jsonObject.put("total", numTotal);
    jsonObject.put("datalist", jsonArray);
    result.put("code", 0);
    result.put("data", jsonObject);
    result.put("msg", "");
    return result;
  }

  @Override
  public JSONObject getReportTaskNames(Integer numAgentId) {
    JSONObject result = new JSONObject();
    List<ReportSubTaskManage> listReportSubTaskManages = new ArrayList<>();
    try {
      listReportSubTaskManages = reportSubtaskManageRepository.findByAppId(numAgentId);
    } catch (Exception e) {
      log.error("{}", e);
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    JSONObject data = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    Map<Integer, String> mapReportTask = new HashMap<>();
    for (ReportSubTaskManage reportSubTaskManage : listReportSubTaskManages) {
      int numId = reportSubTaskManage.getNumTaskId();
      if (!mapReportTask.containsKey(numId)) {
        ReportTaskManage reportTaskManage = reportTaskManageRepository.findById(numId);
        mapReportTask.put(numId, reportTaskManage.getStrTaskName());
      }
    }
    for (Map.Entry<Integer, String> entry : mapReportTask.entrySet()) {
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("task_id", entry.getKey());
      jsonObject.put("task_name", entry.getValue());
      jsonArray.add(jsonObject);
    }
    data.put("datalist", jsonArray);
    result.put("code", 0);
    result.put("msg", "");
    result.put("data", data);
    return result;
  }

  @Override
  public JSONObject getReportListById(Integer reportId) {
    ReportSubTaskManage reportSubTaskManage = reportSubtaskManageRepository.findById(reportId);
    return JSONObject.parseObject(JSONObject.toJSONString(reportSubTaskManage));
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.entity.ReportTaskManage;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.repository.ReportTaskManageRepository;
import com.bangcle.service.ReportTaskManageService;
import com.bangcle.thread.PushSubReportTaskThread;
import com.bangcle.util.PubString;
import com.bangcle.util.ReportsExportBaseParam;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午12:23 18-3-14.
 */
@Service
@Slf4j
public class ReportTaskManageServiceImpl implements ReportTaskManageService {

  @Autowired
  private ReportTaskManageRepository reportTaskManageRepository;

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Autowired
  private PushSubReportTaskThread pushSubReportTaskThread;

  /**
   * 报表任务创建.
   *
   * @param numTaskCycle 0 一次性,1 每天,2 每周,3 每两周,4 一个月,5 一季度
   * @param listReportTypes home 综合态势，threat 威胁态势，run 运行分析，crash 崩溃分析 报表任务创建.
   */
  @Override
  public JSONObject reportTaskCreate(Integer numAgentId, JSONArray listAppInfos,
      JSONArray listLocations, JSONArray listOsInfos, JSONArray listReportTypes,
      String strTaskName, Integer numTaskCycle, String strBeginTime, String strEndTime) {
    JSONObject result = new JSONObject();
    //任务名称不允许为空
    if (strTaskName.isEmpty()) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return result;
    }
    //任务名称长度不允许超过15
    if (strTaskName.length() > 15) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ReportTaskNameTooLong.getInfo());
      return result;
    }
    //任务名称不允许重复
    ReportTaskManage isExist = reportTaskManageRepository
        .findByTaskNameAndAgentId(strTaskName, numAgentId);
    if (isExist != null) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorReportExist.getInfo());
      return result;
    }
    ReportTaskManage reportTaskManage = new ReportTaskManage();
    reportTaskManage.setStrTaskName(strTaskName);
    reportTaskManage.setStrBeginTime(strBeginTime);
    reportTaskManage.setStrEndTime(strEndTime);
    reportTaskManage.setDateCreatedAt(new Date());
    reportTaskManage.setNumAgentId(numAgentId);
    reportTaskManage.setNumTaskCycle(numTaskCycle);
    reportTaskManage.setNumStatus(PubString.STOP_STATUS);
    if (listAppInfos != null && !listAppInfos.isEmpty()) {
      reportTaskManage.setStrAppInfos(listAppInfos.toJSONString());
    }
    if (listLocations != null && !listLocations.isEmpty()) {
      reportTaskManage.setStrLocations(listLocations.toJSONString());
    }
    if (listOsInfos != null && !listOsInfos.isEmpty()) {
      reportTaskManage.setStrOsInfos(listOsInfos.toJSONString());
    }
    if (listReportTypes != null && !listReportTypes.isEmpty()) {
      reportTaskManage.setStrReportType(listReportTypes.toJSONString());
    }
    try {
      reportTaskManageRepository.save(reportTaskManage);
      // 创建所有报表.
      createSubReport(reportTaskManage);
    } catch (Exception e) {
      log.error("error", e);
      result.put("code", 1);
      result.put("msg", ErrorInfo.CreateFailure.getInfo());
      return result;
    }
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * 报表任务删除.
   */
  @Override
  public JSONObject reportTaskDelete(Integer numAgentId, Integer numId) {
    JSONObject result = new JSONObject();
    int numCount = 0;
    int numSubReportCount = 0;
    try {
      numCount = reportTaskManageRepository.deleteByIdAndAgentId(numId, numAgentId);
      numSubReportCount = reportSubtaskManageRepository.deleteByTaskId(numId);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("code", 1);
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
      return result;
    }
    if (numCount > 0) {
      result.put("code", 0);
      result.put("msg", "");
    } else {
      result.put("code", 1);
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
    }
    return result;
  }

  /**
   * 报表任务状态修改.
   */
  public JSONObject reportTaskStatus(Integer numAgentId, Integer numId, Integer numStatus)
      throws ParseException {
    JSONObject result = new JSONObject();
    ReportTaskManage reportTaskManage = null;
    try {
      reportTaskManage = reportTaskManageRepository.findByIdAndAgentId(numId, numAgentId);
    } catch (Exception e) {
      log.error("error:{}", e);
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    reportTaskManage.setNumStatus(numStatus);
    reportTaskManageRepository.save(reportTaskManage);
    if (numStatus == 1) {
      pushSubReportTaskThread.pushSubTaskOnce();
    }
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /**
   * 报表任务信息回显.
   */
  public JSONObject reportTaskInfo(Integer numAgentId, Integer numId) {
    JSONObject data = new JSONObject();
    JSONObject result = new JSONObject();
    ReportTaskManage reportTaskManage = null;
    try {
      reportTaskManage = reportTaskManageRepository.findByIdAndAgentId(numId, numAgentId);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      result.put("code", 0);
      return result;
    }
    if (reportTaskManage != null) {
      data.put("app_infos", reportTaskManage.getStrAppInfos() == null ? new JSONArray()
          : JSONArray.parseArray(reportTaskManage.getStrAppInfos()));
      data.put("os_infos", reportTaskManage.getStrOsInfos() == null ? new JSONArray()
          : JSONArray.parseArray(reportTaskManage.getStrOsInfos()));
      data.put("locations", reportTaskManage.getStrLocations() == null ? new JSONArray()
          : JSONArray.parseArray(reportTaskManage.getStrLocations()));
      data.put("report_type", reportTaskManage.getStrReportType() == null ? new JSONArray()
          : JSONArray.parseArray(reportTaskManage.getStrReportType()));
      data.put("begin_time", reportTaskManage.getStrBeginTime());
      data.put("end_time", reportTaskManage.getStrEndTime());
      data.put("task_cycle", reportTaskManage.getNumTaskCycle());
      data.put("task_name", reportTaskManage.getStrTaskName());
      result.put("data", data);
      result.put("code", 0);
      result.put("msg", "");
    } else {
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      result.put("code", 0);
    }
    return result;
  }

  /**
   * 报表任务列表.
   */
  public JSONObject reportTaskList(Integer numAgentId, Integer numPage, Integer numSize)
      throws ParseException {
    JSONObject result = new JSONObject();
    Page<ReportTaskManage> listReportTaskManages = null;
    try {
      listReportTaskManages = reportTaskManageRepository
          .findByAgentId(numAgentId, new PageRequest(numPage - 1, numSize));
    } catch (Exception e) {
      e.printStackTrace();
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    if (listReportTaskManages == null) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    JSONObject data = new JSONObject();
    JSONArray listData = new JSONArray();
    String strCurrent = TimeParse.dataFormat(new Date());
    SimpleDateFormat sdfYmdHms = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd 00:00:00");
    for (ReportTaskManage reportTaskManage : listReportTaskManages) {
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("create_time", TimeParse.dataFormat(reportTaskManage.getDateCreatedAt()));
      String strNextTime = reportSubtaskManageRepository
          .findByTaskIdAndStatusAndEndTime(reportTaskManage.getId(), 0, strCurrent);
      if (strNextTime != null) {
        Date dateEndTime = sdfYmdHms.parse(strNextTime);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dateEndTime);
        calendar.add(calendar.DATE, 1);
        jsonObject.put("next_report_time", sdf.format(calendar.getTime()));
      } else {
        jsonObject.put("next_report_time", "-");
      }
      //jsonObject.put("next_report_time", reportTaskManage.getStrNextTime());
      int numReportCount = reportSubtaskManageRepository
          .findByTaskIdAndStatus(reportTaskManage.getId(), 1);
      jsonObject.put("report_count", numReportCount);
      jsonObject.put("status", reportTaskManage.getNumStatus());
      jsonObject.put("task_cycle", reportTaskManage.getNumTaskCycle());
      jsonObject.put("task_id", reportTaskManage.getId());
      jsonObject.put("task_name", reportTaskManage.getStrTaskName());
      jsonObject.put("update_time", reportTaskManage.getDateUpdateAt() == null ? ""
          : TimeParse.dataFormat(reportTaskManage.getDateUpdateAt()));
      listData.add(jsonObject);
    }
    int numTotal = 0;
    try {
      numTotal = reportTaskManageRepository.findTotalByAgentId(numAgentId);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      return result;
    }
    data.put("datalist", listData);
    data.put("total", numTotal);
    result.put("code", 0);
    result.put("data", data);
    result.put("msg", "");
    return result;
  }

  /**
   * 报表任务修改.
   */
  public JSONObject reportTaskUpdate(Integer numAgentId, JSONArray listAppInfos,
      JSONArray listLocations, JSONArray listOsInfos,
      JSONArray listReportTypes, String strTaskName, Integer numTaskCycle, String strBeginTime,
      String strEndTime, Integer numId) {
    JSONObject result = new JSONObject();
    //任务名称不允许为空
    if (strTaskName.isEmpty()) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ParamMustExist.getInfo());
      return result;
    }
    //任务名称长度不允许超过15
    if (strTaskName.length() > 15) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ReportTaskNameTooLong.getInfo());
      return result;
    }
    ReportTaskManage isExist = reportTaskManageRepository
        .findByTaskNameAndAgentId(strTaskName, numAgentId);
    if (isExist != null && isExist.getId().intValue() != numId.intValue()) {
      result.put("code", 1);
      result.put("msg", ErrorInfo.ErrorReportExist.getInfo());
      return result;
    }
    ReportTaskManage reportTaskManage = reportTaskManageRepository
        .findByIdAndAgentId(numId, numAgentId);
    reportTaskManage.setStrTaskName(strTaskName);
    reportTaskManage.setStrBeginTime(strBeginTime);
    reportTaskManage.setStrEndTime(strEndTime);
    reportTaskManage.setDateUpdateAt(new Date());
    reportTaskManage.setNumAgentId(numAgentId);
    reportTaskManage.setNumTaskCycle(numTaskCycle);
    if (listAppInfos != null && !listAppInfos.isEmpty()) {
      reportTaskManage.setStrAppInfos(listAppInfos.toJSONString());
    }
    if (listLocations != null && !listLocations.isEmpty()) {
      reportTaskManage.setStrLocations(listLocations.toJSONString());
    }
    if (listOsInfos != null && !listOsInfos.isEmpty()) {
      reportTaskManage.setStrOsInfos(listOsInfos.toJSONString());
    }
    try {
      reportTaskManageRepository.save(reportTaskManage);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("code", 1);
      result.put("msg", ErrorInfo.CreateFailure.getInfo());
      return result;
    }
    result.put("code", 0);
    result.put("msg", "");
    return result;
  }

  /*
  * 创建详细的报表任务，创建任务后一次创建出所有的报表.
  * **/
  @Override
  public boolean createSubReport(ReportTaskManage reportTaskManage) {
    List<ReportSubTaskManage> reportSubTaskManageList = getReportSubTaskManageList(
        reportTaskManage);
    if (reportSubTaskManageList == null || reportSubTaskManageList.isEmpty()) {
      return false;
    }
    reportSubtaskManageRepository.save(reportSubTaskManageList);
    return true;
  }

  /**
   * 获得要保存的报表列表集合.
   */
  public List<ReportSubTaskManage> getReportSubTaskManageList(ReportTaskManage reportTaskManage) {
    String beginTime = reportTaskManage.getStrBeginTime();
    String endTime = reportTaskManage.getStrEndTime();
    int taskCycle = reportTaskManage.getNumTaskCycle();
    Integer agentId = reportTaskManage.getNumAgentId();
    Integer taskId = reportTaskManage.getId();
    String taskName = reportTaskManage.getStrTaskName();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date startDate = null;
    Date endDate = null;
    Calendar calendar = Calendar.getInstance();
    List<ReportSubTaskManage> reportSubTaskManageList = new ArrayList<>();
    try {
      startDate = dateFormat.parse(beginTime);
      endDate = dateFormat.parse(endTime);
    } catch (ParseException e) {
      log.error("", e);
      return null;
    }
    // 一次性任务
    if (ReportsExportBaseParam.TASK_CYCLE_TYPE_ONCE == taskCycle) {
      ReportSubTaskManage reportSubTaskManage = onceSubTask(beginTime, endTime,
          taskCycle, agentId, taskId, taskName);
      reportSubTaskManageList.add(reportSubTaskManage);
    } else if (ReportsExportBaseParam.TASK_CYCLE_TYPE_EVERY_DAY == taskCycle) {
      // 天任务
      while (startDate.compareTo(endDate) < 1) {
        beginTime = dateFormat.format(startDate);
        endTime = dateFormat.format(startDate);
        ReportSubTaskManage reportSubTaskManage = onceSubTask(beginTime, endTime, taskCycle,
            agentId, taskId, taskName);
        reportSubTaskManageList.add(reportSubTaskManage);
        calendar.setTime(startDate);
        calendar.add(Calendar.DATE, 1);
        startDate = calendar.getTime();
      }
    } else if (ReportsExportBaseParam.TASK_CYCLE_TYPE_WEEKLY == taskCycle) {
      // 周任务
      Calendar startCalendar = Calendar.getInstance();
      startCalendar.setTime(startDate);
      Calendar endCalendar = Calendar.getInstance();
      endCalendar.setTime(endDate);
      int intStartDay = startCalendar.get(Calendar.DAY_OF_WEEK);
      int intEndDay = endCalendar.get(Calendar.DAY_OF_WEEK);
      if (intStartDay == 2 && intEndDay == 1) {
        // 起始和结束时间范围内都是整周.
        weekSubTask(reportSubTaskManageList, reportTaskManage, startDate, endDate);
      } else if (intStartDay != 2 && intEndDay == 1) {
        Date nextWeekStartDate = weekPreSubTask(taskCycle, agentId, taskId, taskName, dateFormat,
            reportSubTaskManageList, startDate, startCalendar, intStartDay);
        // 剩余整数周期的计算
        weekSubTask(reportSubTaskManageList, reportTaskManage, nextWeekStartDate, endDate);
        // 起始时间不是周一.
      } else if (intStartDay == 2 && intEndDay != 1) {
        // 结束时间不是周日.
        Date lastWeekEndDate = weekNextSubTask(taskCycle, agentId, taskId, taskName, dateFormat,
            reportSubTaskManageList, endDate, endCalendar, intEndDay);
        // 剩余整数周期的计算
        weekSubTask(reportSubTaskManageList, reportTaskManage, startDate, lastWeekEndDate);
      } else {
        Date nextWeekStartDate = weekPreSubTask(taskCycle, agentId, taskId, taskName, dateFormat,
            reportSubTaskManageList, startDate, startCalendar, intStartDay);
        Date lastWeekEndDate = weekNextSubTask(taskCycle, agentId, taskId, taskName, dateFormat,
            reportSubTaskManageList, endDate, endCalendar, intEndDay);
        weekSubTask(reportSubTaskManageList, reportTaskManage, nextWeekStartDate, lastWeekEndDate);
      }
    } else if (ReportsExportBaseParam.TASK_CYCLE_TYPE_EVERY_MONTH == taskCycle) {
      monthSubTask(reportSubTaskManageList, reportTaskManage, startDate, endDate);
    } else if (ReportsExportBaseParam.TASK_CYCLE_TYPE_EACH_QUARTER == taskCycle) {
      quarterSubTask(reportSubTaskManageList, reportTaskManage, startDate, endDate);
    }
    return reportSubTaskManageList;
  }

  /**
   * 创建季度任务.
   */
  private void quarterSubTask(List<ReportSubTaskManage> reportSubTaskManageList,
      ReportTaskManage reportTaskManage,
      Date startDate, Date endDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Integer taskCycle = reportTaskManage.getNumTaskCycle();
    Integer agentId = reportTaskManage.getNumAgentId();
    Integer id = reportTaskManage.getId();
    String taskName = reportTaskManage.getStrTaskName();
    int i = 0;
    while (startDate.compareTo(endDate) < 1) {
      Calendar calendar = Calendar.getInstance();
      calendar.setTime(startDate);
      // 0 ~ 3 ~ 6 ~ 9 ~ 11
      // 3
      int intDayIndex = calendar.get(Calendar.MONTH);
      calendar.add(Calendar.MONTH, 3 - intDayIndex % 3);
      calendar.set(Calendar.DAY_OF_MONTH, 1);
      calendar.add(Calendar.DATE, -1);
      Date quarterEndDate = calendar.getTime();
      if (quarterEndDate.compareTo(endDate) == 1) {
        quarterEndDate = endDate;
      }
      ReportSubTaskManage reportSubTaskManage = onceSubTask(dateFormat.format(startDate),
          dateFormat.format(quarterEndDate),
          taskCycle, agentId, id, taskName);
      reportSubTaskManageList.add(reportSubTaskManage);
      // 设置起始时间为下个季度的第一天
      calendar.add(Calendar.DATE, 1);
      startDate = calendar.getTime();
    }
  }

  /**
   * 创建整月任务.
   */
  private void monthSubTask(List<ReportSubTaskManage> reportSubTaskManageList,
      ReportTaskManage reportTaskManage,
      Date startDate, Date endDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Integer taskCycle = reportTaskManage.getNumTaskCycle();
    Integer agentId = reportTaskManage.getNumAgentId();
    Integer id = reportTaskManage.getId();
    String taskName = reportTaskManage.getStrTaskName();
    while (startDate.compareTo(endDate) < 1) {
      Calendar calendar = Calendar.getInstance();
      calendar.setTime(startDate);
      calendar.add(Calendar.MONTH, 1);
      // 设为下个月的第一天
      calendar.set(Calendar.DAY_OF_MONTH, 1);
      calendar.add(Calendar.DATE, -1);
      Date monthEndDate = calendar.getTime();
      // 月最后时间大于截至时间
      if (monthEndDate.compareTo(endDate) == 1) {
        monthEndDate = endDate;
      }
      ReportSubTaskManage reportSubTaskManage = onceSubTask(dateFormat.format(startDate),
          dateFormat.format(monthEndDate),
          taskCycle, agentId, id, taskName);
      reportSubTaskManageList.add(reportSubTaskManage);
      // 设置起始时间为下个月的第一天
      calendar.add(Calendar.DATE, 1);
      startDate = calendar.getTime();
    }
  }

  /**
   * 计算周任务后面不满足一周的任务, 返回上周日的时间.
   */
  private Date weekNextSubTask(int taskCycle, Integer agentId, Integer taskId, String taskName,
      SimpleDateFormat dateFormat, List<ReportSubTaskManage> reportSubTaskManageList,
      Date endDate, Calendar endCalendar, int intEndDay) {
    int day = intEndDay;
    /**
     * 2 3 4 5 6 7
     * 0 1 2 3 4 5
     * */
    endCalendar.add(Calendar.DATE, 0 - day + 2);
    Date weekStartDate = endCalendar.getTime();
    String beginTime = dateFormat.format(weekStartDate);
    String endTime = dateFormat.format(endDate);
    ReportSubTaskManage reportSubTaskManage = onceSubTask(beginTime, endTime, taskCycle,
        agentId, taskId, taskName);
    endCalendar.add(Calendar.DATE, -1);
    reportSubTaskManageList.add(reportSubTaskManage);
    return endCalendar.getTime();
  }

  /**
   * 计算周任务前面不满足一周的任务, 返回下周一的时间.
   */
  private Date weekPreSubTask(int taskCycle, Integer agentId, Integer taskId, String taskName,
      SimpleDateFormat dateFormat, List<ReportSubTaskManage> reportSubTaskManageList,
      Date startDate, Calendar startCalendar, int intStartDay) {
    int day = intStartDay;
    if (intStartDay == 1) {
      // 起始时间是周日单独处理
      day = 8;
    }
    startCalendar.add(Calendar.DATE, 7 - day + 1);
    Date weekEndDate = startCalendar.getTime();
    String beginTime = dateFormat.format(startDate);
    String endTime = dateFormat.format(weekEndDate);
    ReportSubTaskManage reportSubTaskManage = onceSubTask(beginTime, endTime, taskCycle,
        agentId, taskId, taskName);
    startCalendar.add(Calendar.DATE, 1);
    reportSubTaskManageList.add(reportSubTaskManage);
    return startCalendar.getTime();
  }

  /**
   * 创建整周任务，针对开始时间是星期一,结束时间是星期日.
   */
  private void weekSubTask(List<ReportSubTaskManage> reportSubTaskManageList,
      ReportTaskManage reportTaskManage,
      Date startDate, Date endDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    while (startDate.before(endDate)) {
      String beginTime = dateFormat.format(startDate);
      Calendar calendar = Calendar.getInstance();
      calendar.setTime(startDate);
      calendar.add(Calendar.DATE, 6);
      Date weekEndDate = calendar.getTime();
      String endTime = dateFormat.format(weekEndDate);
      ReportSubTaskManage reportSubTaskManage = onceSubTask(beginTime, endTime,
          reportTaskManage.getNumTaskCycle(), reportTaskManage.getNumAgentId(),
          reportTaskManage.getId(), reportTaskManage.getStrTaskName());
      reportSubTaskManageList.add(reportSubTaskManage);
      // 设置下一周的起始时间，周一.
      calendar.add(Calendar.DATE, 1);
      startDate = calendar.getTime();
    }
  }


  /**
   * 创建一次任务，周期性的一次任务也算一次性任务.
   */
  private ReportSubTaskManage onceSubTask(String beginTime, String endTime, int taskCycle,
      Integer agentId, Integer taskId, String taskName) {
    String subTaskName = taskName + "【" + beginTime + " ~ " + endTime + "】";
    String subTaskBeginTime = beginTime + " 00:00:00";
    String subTaskEndTime = endTime + " 23:59:59";
    return new ReportSubTaskManage(agentId,
        subTaskName, taskCycle, subTaskBeginTime, subTaskEndTime, 0,
        new Date(), taskId, "");
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.RiskApp;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.RiskAppDefRepository;
import com.bangcle.service.RiskAppDefService;
import com.bangcle.util.TimeParse;
import java.util.List;
import javax.persistence.criteria.CriteriaBuilder.In;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/1/15.
 */
@Slf4j
@Service
public class RiskAppDefServiceImpl implements RiskAppDefService {

  @Autowired
  RiskAppDefRepository riskAppDefRepository;

  /**
   * 新增风险应用.
   */
  public String addRiskApp(Integer appId, String appName, String appMd5, String pkgName,
      String platform) {
    String addFlag = "";

    RiskApp riskApp = riskAppDefRepository.checkOnly(appId, appMd5, pkgName, platform);
    if (riskApp != null) {
      addFlag = ErrorInfo.AlreadyConfig.getInfo();
    } else {
      riskApp = new RiskApp();
      riskApp.setAppId(appId);
      riskApp.setAppName(appName);
      riskApp.setAppMd5(appMd5);
      riskApp.setPackageName(pkgName);
      riskApp.setCreateTime(System.currentTimeMillis());
      riskApp.setPlatform(platform);
      try {
        riskAppDefRepository.save(riskApp);
      } catch (Exception e) {
        log.error("error", e);
        addFlag = ErrorInfo.CreateFailure.getInfo();
      }
    }
    return addFlag;
  }

  /**
   * 风险应用列表.
   */
  public JSONObject riskAppList(Integer appId) {
    JSONObject data = new JSONObject();
    JSONArray jsonList = new JSONArray();
    List<RiskApp> infoList = riskAppDefRepository.findByAppId(appId);
    for (RiskApp riskApp : infoList) {
      JSONObject info = new JSONObject();
      info.put("app_md5", riskApp.getAppMd5());
      info.put("app_name", riskApp.getAppName());
      info.put("create_time",
          TimeParse.Long2StrTime(riskApp.getCreateTime(), "yyyy-MM-dd HH:mm:ss"));
      info.put("on_off", riskApp.getOnOff());
      info.put("package_name", riskApp.getPackageName());
      info.put("risk_app_id", riskApp.getRiskAppId());
      info.put("platform", riskApp.getPlatform());
      jsonList.add(info);
    }
    data.put("risk_app_list", jsonList);
    return data;
  }

  /**
   * 删除风险应用.
   */
  public boolean deleteRiskApp(Integer appId, List<Integer> riskAppId) {
    boolean delFlag = false;
    Integer[] riskAppIds = riskAppId.toArray(new Integer[riskAppId.size()]);
    int del = riskAppDefRepository.updateDel(appId, riskAppIds);
    if (del > 0) {
      delFlag = true;
    }
    return delFlag;
  }

  /**
   * 启用／关闭风险应用.
   */
  public boolean switchRiskApp(Integer appId, Integer onOff, List<Integer> riskAppIds) {
    boolean switchFlag = false;
    int sw = riskAppDefRepository
        .updateOnOff(appId, onOff, riskAppIds.toArray(new Integer[riskAppIds.size()]));
    if (sw > 0) {
      switchFlag = true;
    }
    return switchFlag;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.RunningInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.sort.SortOrder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:52 17-12-1.
 */
@Service
@Slf4j
public class RunningInfoServiceImpl implements RunningInfoService {

  @Autowired
  private EsRepository es;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;

  /**
   * sort_by:区分升序还是降序 desc asc 启动列表.
   */
  @Override
  public JSONObject startSort(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      String strUdid, Long startTime, Long endTime, long page, long size, String strSortBy) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    //只看此设备
    JSONArray jsonArray = new JSONArray();
    if (null != strUdid && !strUdid.isEmpty()) {
      JSONObject jsonObjectCondition = new JSONObject();
      jsonObjectCondition.put("field", EsFieldModel.UDID);
      jsonObjectCondition.put("value", strUdid);
      jsonArray.add(jsonObjectCondition);
    }
    JSONObject result = commonAggService
        .searchList(indexName, indexTypeName, appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime,
            null, page, size, jsonArray, false);
    JSONArray datalistResultArray = result.getJSONArray("data_list");
    JSONArray datalistJsonArray = new JSONArray();
    for (Object object : datalistResultArray) {
      JSONObject jsonObject = (JSONObject) object;
      JSONObject job = new JSONObject();
      job.put("app_name", jsonObject.get(EsFieldModel.APP_NAME));
      if ("null".equals(jsonObject.get(EsFieldModel.APP_VERSION))
          || jsonObject.get(EsFieldModel.APP_VERSION) == null) {
        job.put("app_version", "");
      } else {
        job.put("app_version", jsonObject.get(EsFieldModel.APP_VERSION));
      }
      job.put("location", jsonObject.get(EsFieldModel.LOCATION));
      job.put("model", jsonObject.get(EsFieldModel.MANUFACTURER));
      job.put("os_version", jsonObject.get(EsFieldModel.OS_VERSION));
      job.put("platform", jsonObject.get(EsFieldModel.PLATFORM));
      job.put("time", sdf.format(new Date(jsonObject.getLong(EsFieldModel.TIME_STAMP))));
      job.put("udid", jsonObject.get(EsFieldModel.UDID));
      job.put("network", jsonObject.get(EsFieldModel.NETWORK));
      job.put("ip", jsonObject.get(EsFieldModel.CLIENT_IP));
      if (jsonObject.containsKey(EsFieldModel.IMEI)) {
        job.put("imei", jsonObject.get(EsFieldModel.IMEI) == null ? "NoPermission"
            : PubFunc.jsonArray2String(jsonObject.getString(EsFieldModel.IMEI)));
      } else {
        job.put("imei", "NoPermission");
      }
      //listJsonObject.put("ip_lan", jsonObject.get(EsFieldModel.IP_LAN));
      datalistJsonArray.add(job);
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("total", result.getLongValue("count"));
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }

  @Override
  public JSONObject startCountTrend(String agentId, String udid, Long startTime, Long endTime) {
    //构造过滤条件
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, agentId));
    RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(EsFieldModel.TIME).lt(endTime)
        .gt(startTime);
    boolQueryBuilder.must(rangeQueryBuilder);
    if (!StringUtils.isEmpty(udid)) {
      TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(EsFieldModel.UDID, udid);
      boolQueryBuilder.must(termsQueryBuilder);
    }
    // 统计每天或者每小时的启动次数
    List<String> dateList = new ArrayList<>();
    boolean sameDay = TimeParse.isSameDay(startTime, endTime);
    String dateHistogramName = "count_every_time";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME);
    dateList = handleDateCondition(startTime, endTime, sameDay, dateHistogramAggregationBuilder);

    //根据传入时间计算对应的index
    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);

    if (indexExist.length == 0) {
      JSONObject result = new JSONObject();
      result.put("coord_list", dateList);
      result.put("count_list", new long[dateList.size()]);
      return result;
    }

    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder).addAggregation(dateHistogramAggregationBuilder)
        .execute().actionGet();

    Histogram histogram = searchResponse.getAggregations().get(dateHistogramName);
    Map<String, Map<String, Long>> countMap = new HashMap<>();
    for (Histogram.Bucket bucket : histogram.getBuckets()) {
      long count = bucket.getDocCount();
      String historgramKey = TimeParse.timeSplit(sameDay, bucket.getKeyAsString());
      Map<String, Long> map = new HashMap<>();
      map.put("count", count);
      countMap.put(historgramKey, map);
    }
    List<Long> countList = new ArrayList<>();
    for (String date : dateList) {
      long count = 0L;
      if (countMap.containsKey(date)) {
        count = countMap.get(date).get("count");
      }
      countList.add(count);
    }

    JSONObject result = new JSONObject();
    result.put("coord_list", dateList);
    result.put("count_list", countList);

    return result;
  }

  @Override
  public JSONObject getStartSummary(String appId, String udid, Integer page, Integer size,
      long startTime, long endTime) {
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    if (!StringUtils.isEmpty(udid)) {
      TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(EsFieldModel.UDID, udid);
      boolQueryBuilder.must(termQueryBuilder);
    }
    if (endTime > 0L) {
      RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(EsFieldModel.TIME).lt(endTime)
          .gt(startTime);
      boolQueryBuilder.must(rangeQueryBuilder);
    }
    //根据传入时间计算对应的index
    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);

    if (indexExist.length == 0) {
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("datalist", new JSONArray());
      jsonObject.put("total", 0);
      return jsonObject;
    }
    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addSort(EsFieldModel.TIME, SortOrder.DESC)
        .setFrom((page - 1) * size)
        .setSize(size)
        .execute()
        .actionGet();
    SearchHits searchHits = searchResponse.getHits();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray jsonArray = new JSONArray();
    HashMap<String, JSONObject> runInfoMap = new HashMap<>();
    for (SearchHit searchHit : searchHits) {
      JSONObject data = new JSONObject();
      Map startMap = searchHit.getSourceAsMap();
      if (startMap.containsKey("time")) {
        data.put("time",
            sdf.format(new Date(Long.valueOf(startMap.get(EsFieldModel.TIME_STAMP).toString()))));
      }
      data.put("ip",
          startMap.containsKey(EsFieldModel.CLIENT_IP) ? startMap.get(EsFieldModel.CLIENT_IP)
              : "unknown");
      data.put("user_data",
          startMap.containsKey("user_data") ? startMap.get("user_data") : "unknown");
      data.put("location",
          startMap.containsKey(EsFieldModel.LOCATION) ? startMap.get(EsFieldModel.LOCATION)
              : "unknown");
      if (startMap.containsKey("extra") && startMap.get("extra") != null) {
        JSONObject jsonObject = JSONObject.parseObject(startMap.get("extra").toString());
        if (jsonObject.containsKey("location") && jsonObject.get("location") != null) {
          JSONObject job = jsonObject.getJSONObject("location");
          String strLatitude = job.containsKey("latitude") ? job.getString("latitude") : "unknown";
          String strLongitude =
              job.containsKey("longitude") ? job.getString("longitude") : "unknown";
          data.put("gps_info", strLatitude + "," + strLongitude);
        } else {
          data.put("gps_info", "unknown" + "," + "unknown");
        }
      } else {
        data.put("gps_info", "unknown" + "," + "unknown");
      }
      if (startMap.containsKey("mobile_cid")) {
        data.put("mobile_cid",
            startMap.get("mobile_cid") == null ? "unknown" : startMap.get("mobile_cid"));
      } else {
        data.put("mobile_cid", "unknown");
      }
      if (startMap.containsKey("wifi_mac")) {
        data.put("wifi_mac",
            startMap.get("wifi_mac") == null ? "unknown" : startMap.get("wifi_mac"));
      } else {
        data.put("wifi_mac", "unknown");
      }
      if (startMap.containsKey("wifi_ssid")) {
        data.put("wifi_ssid",
            startMap.get("wifi_ssid") == null ? "unknown" : startMap.get("wifi_ssid"));
      } else {
        data.put("wifi_ssid", "unknown");
      }
      jsonArray.add(data);

      if (PubString.showUserData) {
        data.put("bank_subbranch", "");
        data.put("id_card", "");
        data.put("phone", "");
        StringBuffer mapKey = new StringBuffer();
        mapKey.append(startMap.get(EsFieldModel.UDID));
        mapKey.append(startMap.get(EsFieldModel.RUN_KEY));
        runInfoMap.put(mapKey.toString(), data);
        Map<String, String> mapTerm = new HashMap<>();
        mapTerm.put(EsFieldModel.UDID, startMap.get(EsFieldModel.UDID).toString());
        mapTerm.put(EsFieldModel.RUN_KEY, startMap.get(EsFieldModel.RUN_KEY).toString());
        BoolQueryBuilder queryTmp = commonBaseService.filterQueryBuilder(mapTerm, null);
        boolQueryBuilder.should(queryTmp);
      }
    }

    if (PubString.showUserData) {
      //根据传入时间计算对应的index
      List<String> userDataIndexs = es
          .getIndexs(commonBaseService.getUserDataIndexName(), startTime, endTime, "yyyyMMdd");
      //index清洗
      String[] userDataIndexExist = es.washIndex(userDataIndexs);

      if (indexExist.length > 0) {
        SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(userDataIndexExist)
            .setTypes(commonBaseService.getIndexTypeName())
            .setQuery(boolQueryBuilder)
            .setSize(runInfoMap.size() * 10);
        SearchResponse userDataSearchResponse = searchRequestBuilder.get();
        SearchHits userDatasearchHits = userDataSearchResponse.getHits();
        for (SearchHit hit : userDatasearchHits) {
          Map userdataMap = hit.getSourceAsMap();
          StringBuffer mapKey = new StringBuffer();
          mapKey.append(userdataMap.get(EsFieldModel.UDID));
          mapKey.append(userdataMap.get(EsFieldModel.RUN_KEY));
          if (runInfoMap.containsKey(mapKey.toString())) {
            JSONArray userData = JSON.parseArray(userdataMap.get("user_data").toString());
            for (int u = 0; u < userData.size(); u++) {
              if (userData.getJSONObject(u).get("ccb_data") instanceof JSONArray) {
                JSONArray ccbData = userData.getJSONObject(u).getJSONArray("ccb_data");
                if (ccbData.size() > 0) {
                  Set<String> bankSubbranchSet = new HashSet<>();
                  Set<String> idCardSet = new HashSet<>();
                  Set<String> phoneSet = new HashSet<>();
                  for (int cc = 0; cc < ccbData.size(); cc++) {
                    JSONObject ccJson = ccbData.getJSONObject(cc);
                    bankSubbranchSet.add(ccJson.get("bank_subbranch").toString());
                    idCardSet.add(ccJson.get("id_card").toString());
                    phoneSet.add(ccJson.get("phone").toString());
                  }
                  JSONObject data = runInfoMap.get(mapKey.toString());
                  List<String> bankSubbranch = new ArrayList<>();
                  bankSubbranch.addAll(Arrays.asList(data.getString("bank_subbranch").split(",")));
                  bankSubbranchSet.addAll(bankSubbranch);
                  List<String> idCard = new ArrayList<>();
                  idCard.addAll(Arrays.asList(data.getString("id_card").split(",")));
                  idCardSet.addAll(idCard);
                  List<String> phone = new ArrayList<>();
                  phone.addAll(Arrays.asList(data.getString("phone").split(",")));
                  phoneSet.addAll(phone);
                  data.put("bank_subbranch", PubFunc.jsonArray2Str(bankSubbranchSet.toString()));
                  data.put("id_card", PubFunc.jsonArray2Str(idCardSet.toString()));
                  data.put("phone", PubFunc.jsonArray2Str(phoneSet.toString()));
                }
              }
            }
          }
        }
      }
    }

    JSONObject jsonObject = new JSONObject();
    jsonObject.put("datalist", jsonArray);
    jsonObject.put("total", searchHits.totalHits);
    return jsonObject;
  }


  /*
  * 处理aggs条件，通过日期统计总数和设备数目.
  * **/
  private List<String> handleDateCondition(Long startTime, Long endTime, boolean sameDay,
      DateHistogramAggregationBuilder dateHistogramAggregationBuilder) {
    List<String> dateList = new ArrayList<>();
    dateHistogramAggregationBuilder
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    if (sameDay) {
      // 查看一天的数据按照小时分组.
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.HOUR);
      dateList = TimeParse.getHourList();
    } else {
      // 按照每天查看数据.
      dateHistogramAggregationBuilder.dateHistogramInterval(DateHistogramInterval.DAY);
      dateList = TimeParse.getDateList(startTime, endTime);
    }
    return dateList;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.service.RunningStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.elasticsearch.search.aggregations.metrics.max.Max;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:54 17-12-1.
 */
@Service
public class RunningStatServiceImpl implements RunningStatService {

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  /**
   * 运行分析总数统计.
   */
  @Override
  public JSONObject runningCount(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime) {
    DecimalFormat df = new DecimalFormat("0.00");
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    JSONObject data = commonAggService
        .totalCount(indexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, startTime, endTime, null, false);
    JSONObject dataJsonObject = new JSONObject();
    long devCount = data.getLong("dev_count");
    long count = data.getLong("count");
    dataJsonObject.put("start_average_count",
        Double.parseDouble(df.format(commonBaseService.getRate(count, devCount))));
    dataJsonObject.put("start_dev_count", devCount);
    dataJsonObject.put("start_total_count", count);
    return dataJsonObject;
  }

  /**
   * 启动趋势.
   */
  @Override
  public JSONObject runningTrend(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime) {
    long[] oldRangeTime = TimeParse.getOldRangeTime(startTime, endTime);
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    JSONObject data = commonAggService
        .trendCount(indexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, startTime, endTime, null);
    JSONObject oldData = commonAggService
        .trendCount(indexName, indexTypeName, appId, manufacturerList, locationList,
            osVersionList, appVersionList, oldRangeTime[0], oldRangeTime[1], null);
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("coord_list", data.get("date_list"));
    dataJsonObject.put("start_count_list", data.get("count_list"));
    dataJsonObject.put("start_count_list_old", oldData.get("count_list"));
    dataJsonObject.put("start_dev_count_list", data.get("dev_count_list"));
    dataJsonObject.put("start_dev_count_list_old", oldData.get("dev_count_list"));

    return dataJsonObject;
  }

  /**
   * 启动次数排名前十城市/活跃设备排名前十城市
   */
  @Override
  public JSONObject runningRank(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type) {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    JSONArray resultArray = commonAggService.statCountByField(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime,
        null, EsFieldModel.LOCATION, 10L, false, false);
    JSONArray datalistJsonArray = new JSONArray();
    if ("start_dev_count".equals(type)) {
      List<Map<String, Object>> resultList = new ArrayList<>();
      for (Object fieldObject : resultArray) {
        JSONObject fieldJsonObject = (JSONObject) fieldObject;
        Map<String, Object> fieldMap = new HashMap<>();
        fieldMap.put("field", fieldJsonObject.get("field"));
        fieldMap.put("dev_count", fieldJsonObject.get("dev_count"));
        resultList.add(fieldMap);
      }

      Collections.sort(resultList, new Comparator<Map<String, Object>>() {
        @Override
        public int compare(Map<String, Object> o1, Map<String, Object> o2) {
          long o1DevCount = (long) o1.get("dev_count");
          long o2DevCount = (long) o2.get("dev_count");
          return (int) (o2DevCount - o1DevCount);
        }
      });
      for (Map<String, Object> map : resultList) {
        int i = 0;
        if (i < 10) {
          JSONObject listJsonObject = new JSONObject();
          listJsonObject.put("location", map.get("field"));
          listJsonObject.put("value", map.get("dev_count"));
          datalistJsonArray.add(listJsonObject);
        } else {
          break;
        }
      }
    } else {
      int i = 0;
      for (Object fieldObject : resultArray) {
        JSONObject fieldJsonObject = (JSONObject) fieldObject;
        if (i < 10) {
          JSONObject listJsonObject = new JSONObject();
          listJsonObject.put("location", fieldJsonObject.get("field"));
          listJsonObject.put("value", fieldJsonObject.get("count"));
          datalistJsonArray.add(listJsonObject);
        } else {
          break;
        }
        i++;
      }
    }

    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }

  /**
   * 启动分布.
   */
  @Override
  public JSONObject runningStat(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type, String distType) {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String field = "";
    switch (distType) {
      case "model":
        field = EsFieldModel.MANUFACTURER;
        break;
      case "location":
        field = EsFieldModel.LOCATION;
        break;
      case "os_version":
        field = EsFieldModel.OS_INFO;
        break;
      case "app_version":
        field = EsFieldModel.APP_INFO;
        break;
      default:
        break;
    }
    String countKey = "count";
    if ("start_dev_count".equals(type)) {
      countKey = "dev_count";
    }
    JSONObject totalCountObject = commonAggService.totalCount(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime, null,
        false);
    long count = totalCountObject.getLong(countKey);
    JSONArray resultArray = commonAggService.statCountByField(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime,
        null, field, 1000, false, false);
    JSONArray datalistJsonArray = new JSONArray();
    for (Object object : resultArray) {
      JSONObject fieldJsonObject = (JSONObject) object;
      JSONObject listJsonObject = new JSONObject();
      long fieldCount = fieldJsonObject.getLongValue(countKey);
      listJsonObject.put("count", fieldCount);
      listJsonObject.put("type", fieldJsonObject.get("field"));
      listJsonObject.put("percent", commonBaseService.getRate(fieldCount, count));
      datalistJsonArray.add(listJsonObject);
    }

    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.SafeEvent;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.SafeEventRepository;
import com.bangcle.service.SafeEventService;
import com.bangcle.service.UserService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.thread.CleanESDocThread;
import com.bangcle.util.SelfCache;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.util.Pair;
import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:40 17-12-28.
 */
@Service
@Slf4j
public class SafeEventServiceImpl implements SafeEventService {

  @Autowired
  private SafeEventRepository safeEventRepo;

  @Autowired
  public HttpServletRequest request;

  @Autowired
  private UserService userService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Override
  public JSONObject safeEventCreate(String strEventName, String strDeacrip, Integer numEventType,
      Long numTime, String strTimeType, Integer numCount, String strThreatType,
      Integer numSpecies, List<String> listThreatType, Integer numOrder, Integer agentId) {
    JSONObject data = new JSONObject();
    //操作员不允许创建事件
    if (isAuditor()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.NoAuthority.getInfo());
      return data;
    }
    //计算优先级id最大值
    List<SafeEvent> listEvent = safeEventRepo.findByAgentId(agentId);
    int maxStatus = 0;
    if (!listEvent.isEmpty()) {
      List<Integer> listLevelId = new ArrayList<>();
      for (SafeEvent safeEvent : listEvent) {
        listLevelId.add(safeEvent.getLevel());
      }
      maxStatus = Collections.max(listLevelId) + 1;
    }
    //判断事件是否存在，事件名不允许重复
    //必传参数
    if (strEventName == null || strDeacrip == null || numEventType == null || numTime == null
        || strTimeType == null) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    //数量设置不允许大于9999
    if (numTime > 9999) {
      data.put("msg", ErrorInfo.ParamTooLarge.getInfo());
      data.put("code", 1);
      return data;
    }
    if (numCount != null && numCount > 9999) {
      data.put("msg", ErrorInfo.ParamTooLarge.getInfo());
      data.put("code", 1);
      return data;
    }
    if (numSpecies != null && numSpecies > 9999) {
      data.put("msg", ErrorInfo.ParamTooLarge.getInfo());
      data.put("code", 1);
      return data;
    }
    //事件名称 描述等字符串长度不允许超过100
    if (strEventName.length() > 100 || strDeacrip.length() > 100) {
      data.put("msg", ErrorInfo.EventParamTooLarge.getInfo());
      data.put("code", 1);
      return data;
    }
    JSONObject content = new JSONObject();
    content.put("event_name", strEventName);
    content.put("description", strDeacrip);
    content.put("event_type", numEventType);
    long longTime = TimeParse.getPeriod(numTime, strTimeType);
    content.put("time", longTime);
    content.put("time_type", strTimeType);
    content.put("num_time", numTime);
    SafeEvent event = safeEventRepo.findByAgentIdAndName(agentId, strEventName);
    if (event != null) {
      data.put("msg", ErrorInfo.ErrorEventExit.getInfo());
      data.put("code", 1);
      return data;
    }
    //按照威胁发生次数生成事件
    if (numEventType == 0) {
      if (numCount != null && strThreatType != null) {
        content.put("num_count", numCount);
        content.put("threat_type", strThreatType);
      } else {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      }
      //按照威胁发生种类数生成事件
    } else if (numEventType == 1) {
      if (numSpecies == null) {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      } else {
        //威胁种类数不能大于8
        if (numSpecies > 8) {
          data.put("msg", ErrorInfo.ErrorThreatNum.getInfo());
          data.put("code", 1);
          return data;
        } else {
          content.put("num_species", numSpecies);
        }
      }
      //按照指定威胁生成事件
    } else if (numEventType == 2) {
      if (listThreatType != null && numOrder != null) {
        content.put("threat_type_list", listThreatType);
        content.put("num_order", numOrder);
      } else {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      }
    }

    SafeEvent safeEvent = new SafeEvent();
    safeEvent.setAgentId(agentId);
    safeEvent.setContent(content.toJSONString());
    safeEvent.setDescription(strDeacrip);
    safeEvent.setName(strEventName);
    safeEvent.setLevel(maxStatus);
    safeEventRepo.save(safeEvent);
    data.put("msg", "");
    data.put("code", 0);
    return data;
  }

  @Override
  public JSONArray safeEventList(Integer agentId) {
    List<SafeEvent> listSafeEvent = safeEventRepo.findByAgentId(agentId);
    JSONArray jsonArray = new JSONArray();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    for (SafeEvent safeEvent : listSafeEvent) {
      JSONObject data = new JSONObject();
      data.put("event_id", safeEvent.getId());
      data.put("create_time", sdf.format(safeEvent.getCreateAt()));
      data.put("update_time", sdf.format(safeEvent.getUpdateAt()));
      data.put("onOff", safeEvent.getStatus());
      data.put("rule_name", safeEvent.getName());
      data.put("level_id", safeEvent.getLevel());
      jsonArray.add(data);
    }
    return jsonArray;
  }

  @Override
  public JSONObject safeEventInfo(Integer eventId) {
    SafeEvent safeEvent = safeEventRepo.findById(eventId);
    String strContent = safeEvent.getContent();
    JSONObject jsonContent = JSONObject.parseObject(strContent);
    jsonContent.remove("time");
    return jsonContent;
  }

  @Override
  public JSONObject safeEventUpdate(String strEventName, String strDescrip, Integer numEventType,
      Long numTime, String strTimeType, Integer numCount, String strThreatType,
      Integer numSpecies, List<String> listThreatType, Integer numOrder, Integer numEventId,
      Integer agentId) {
    JSONObject data = new JSONObject();
    //操作员不允许修改事件
    if (isAuditor()) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.NoAuthority.getInfo());
      return data;
    }
    //判断事件是否存在，事件名不允许重复
    SafeEvent event = safeEventRepo.findByAgentIdAndName(agentId, strEventName);
    if (event != null && event.getId() != numEventId) {
      data.put("msg", ErrorInfo.ErrorEventExit.getInfo());
      data.put("code", 1);
      return data;
    }
    JSONObject content = new JSONObject();
    //必传参数
    if (strEventName == null || strDescrip == null || numEventType == null || numTime == null
        || strTimeType == null) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    content.put("event_name", strEventName);
    content.put("description", strDescrip);
    content.put("event_type", numEventType);
    long longTime = TimeParse.getPeriod(numTime, strTimeType);
    content.put("time", longTime);
    content.put("time_type", strTimeType);
    content.put("num_time", numTime);
    //按照威胁发生次数生成事件
    if (numEventType == 0) {
      if (numCount != null && strThreatType != null) {
        content.put("num_count", numCount);
        content.put("threat_type", strThreatType);
      } else {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      }
      //按照威胁发生种类数生成事件
    } else if (numEventType == 1) {
      if (numSpecies == null) {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      } else {
        //威胁种类数不能大于8
        if (numSpecies > 8) {
          data.put("msg", ErrorInfo.ErrorThreatNum.getInfo());
          data.put("code", 1);
          return data;
        } else {
          content.put("num_species", numSpecies);
        }
      }
      //按照指定威胁生成事件
    } else if (numEventType == 2) {
      if (listThreatType != null || numOrder != null) {
        content.put("threat_type_list", listThreatType);
        content.put("num_order", numOrder);
      } else {
        data.put("msg", ErrorInfo.ParamMustExist.getInfo());
        data.put("code", 1);
        return data;
      }
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String strContent = content.toJSONString();
    Date updateAt = new Date();
    safeEventRepo.updateById(strEventName, strDescrip, updateAt, strContent, numEventId);
    data.put("msg", "");
    data.put("code", 0);
    return data;
  }

  @Override
  public JSONObject safeEventStatus(Integer numEventId, Integer numStatus) {
    safeEventRepo.updateStatusById(numStatus, numEventId);
    JSONObject data = new JSONObject();
    data.put("msg", "");
    data.put("code", 0);
    return data;
  }

  @Override
  public JSONObject deleteById(Integer eventId) {
    Map<String, Object> map = new HashMap<>();
    map.put(EsFieldModel.EVENT_DEF_ID, eventId);
    Pair<String, Map<String, Object>> pair = new Pair<String, Map<String, Object>>(
        commonBaseService.getEventIndexName(), map);
    try {
      CleanESDocThread.cleanDoc.put(pair);
    } catch (InterruptedException e) {
      log.error("", e);
    }
    safeEventRepo.deleteById(eventId);
    JSONObject data = new JSONObject();
    data.put("msg", "");
    data.put("code", 0);
    return data;
  }

  @Override
  public JSONObject safeEventChange(Integer eventIdUp, Integer eventIdDown, Integer levelIdUp,
      Integer levelIdDown) {
    Integer numLevel = levelIdDown;
    Integer numEventId = eventIdUp;
    safeEventRepo.updateLevelById(numLevel, numEventId);
    numLevel = levelIdUp;
    numEventId = eventIdDown;
    safeEventRepo.updateLevelById(numLevel, numEventId);
    JSONObject data = new JSONObject();
    data.put("msg", "");
    data.put("code", 0);
    return data;
  }

  @Override
  public SafeEvent getSafeEventByName(Integer agentId, String strEventName) {
    SafeEvent safeEvent = safeEventRepo.findByAgentIdAndName(agentId, strEventName);
    return safeEvent;
  }

  /**
   * 判断登录账户是否是审计员.
   * @return
   */
  public boolean isAuditor() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int userId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    User user = userService.findById(userId);
    if (userService.isAuditor(user)) {
      return true;
    }
    return false;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.SearchService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.common.CommonHbaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.ExistsQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class SearchServiceImpl implements SearchService {

  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private EsRepository es;
  @Autowired
  private CommonHbaseService commonHbaseService;

  private final String[] fields = {"udid", "imei", "imsi", "client_ip", "android_id", "mac"};

  @Override
  public JSONObject search(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type, String value, List<String> fieldList, long page,
      long perPageNum, String isRoot) {
    JSONObject result = new JSONObject();
    /**
     * 过滤搜索条件，模糊搜索，都是或的条件.
     * 设备不受搜索时间控制，设备时间只有收到设备信息的时间，不能是搜索维度.
     * */
    BoolQueryBuilder boolQueryBuilder = filterDevBoolQuery(appId, manufacturerList,
        locationList, osVersionList, appVersionList, 0L, System.currentTimeMillis(), fieldList,
        type, value, isRoot);
    //log.info(boolQueryBuilder.toString());
    JSONObject devJsonObject = getDevList(boolQueryBuilder, page, perPageNum);
    List<String> udidList = new ArrayList<>();
    List<String> rowKeyArray = new ArrayList<>();
    JSONArray dataJsonArray = devJsonObject.getJSONArray("data_list");
    for (Object object : dataJsonArray) {
      JSONObject jsonObject = (JSONObject) object;
      udidList.add(jsonObject.getString(EsFieldModel.UDID));
      StringBuffer rowKey = new StringBuffer();
      rowKey.append(jsonObject.getString(EsFieldModel.UDID));
      rowKey.append("|");
      rowKey.append(appId);
      jsonObject.put("rowkey", rowKey.toString());
      rowKeyArray.add(rowKey.toString());
    }
    if (udidList.size() > 0) {

      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      Map<String, Map<String, Long>> map = getDevRiskCount(appId, manufacturerList,
          locationList, osVersionList, appVersionList, startTime, endTime, udidList);
      /*Map<String, Map<String, String>> udidMap = getRunKey(appId, manufacturerList,
          locationList, osVersionList, appVersionList, startTime, endTime, udidList);*/
      HashMap<String, HashMap<String, String>> devStatus = commonHbaseService
          .getDevStatus(rowKeyArray.toArray(new String[rowKeyArray.size()]));
      for (Object object : dataJsonArray) {
        JSONObject jsonObject = (JSONObject) object;
        String udid = jsonObject.getString("udid");
        long crashCount = map.get("crash").get(udid) != null ? map.get("crash").get(udid) : 0L;
        long eventCrash = map.get("event").get(udid) != null ? map.get("event").get(udid) : 0L;
        long startCount = map.get("start").get(udid) != null ? map.get("start").get(udid) : 0L;
        long threatCount = map.get("threat").get(udid) != null ? map.get("threat").get(udid) : 0L;
        long envCount = map.get("env").get(udid) != null ? map.get("env").get(udid) : 0L;
        //String runKey = udidMap.get("env").get(udid) != null ? udidMap.get("env").get(udid) : "";
        jsonObject.put("crash_count", crashCount);
        jsonObject.put("event_count", eventCrash);
        jsonObject.put("start_count", startCount);
        jsonObject.put("threat_count", threatCount);
        jsonObject.put("environment", envCount > 0 ? "不安全" : "安全");
        jsonObject.put("run_key", "-");
        String key = jsonObject.getString("rowkey");
        if (devStatus.containsKey(key)) {
          HashMap<String, String> status = devStatus.get(key);
          jsonObject.put("last_time", status.containsKey("last_start_time") ? sdf
              .format(new Date(Long.valueOf(status.get("last_start_time")))) : "");
          jsonObject.put("network",
              status.containsKey("start_net_type") ? status.get("start_net_type") : "");
          //jsonObject.put("imei", status.containsKey("imei") ?
          // PubFunc.jsonArray2String(status.get("imei")) : "");
        } else {
          jsonObject.put("last_time", "");
          jsonObject.put("network", "");
          jsonObject.put("imei", "");
        }
      }
    }
    result.put("data_list", dataJsonArray);
    result.put("count", devJsonObject.get("count"));
    return result;
  }


  @Override
  public List<String> filterDuckCondition(String value) {
    if (value == null) {
      return null;
    }
    value = value.trim();
    if ("".equals(value)) {
      return null;
    }
    // String strValue = value.replaceAll("\\s+", " ");
    String[] valueArray = value.split("\\s+");
    return Arrays.asList(valueArray);
  }


  /**
   * 获取设备列表.
   */
  private JSONObject getDevList(BoolQueryBuilder boolQueryBuilder, long page,
      long perPageNum) {
    if (page < 1L) {
      page = 1L;
    }
    if (perPageNum < 1L) {
      perPageNum = 20L;
    }

    SearchResponse searchResponse = es.client
        .prepareSearch(commonBaseService.getDevIndexName())
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addSort("server_time", SortOrder.DESC)
        .setFrom((int) ((page - 1) * perPageNum))
        .setSize((int) perPageNum)
        .execute().actionGet();
    SearchHits searchHits = searchResponse.getHits();
    SearchHit[] hits = searchHits.getHits();
    JSONArray dataListJsonArray = new JSONArray();
    for (int i = 0; i < hits.length; i++) {
      Map<String, Object> map = hits[i].getSourceAsMap();
      JSONObject jsonObject = JSONObject.parseObject(JSON.toJSONString(map));
      dataListJsonArray.add(jsonObject);
    }
    JSONObject result = new JSONObject();
    result.put("count", searchHits.getTotalHits());
    JSONArray selectJsonArray = new JSONArray();
    for (Object object : dataListJsonArray) {
      JSONObject jsonObject = (JSONObject) object;
      JSONObject selectJsonObject = new JSONObject();
      selectJsonObject.put("app_name", jsonObject.get("app_name"));
      selectJsonObject.put("app_version", jsonObject.get("app_version"));
      selectJsonObject.put("os_info", jsonObject.get("os_info"));
      if (jsonObject.containsKey("imei")) {
        selectJsonObject.put("imei", jsonObject.get(EsFieldModel.IMEI) == null ? "NoPermission"
            : PubFunc.jsonArray2String(jsonObject.getString(EsFieldModel.IMEI)));
      } else {
        selectJsonObject.put("imei", "NoPermission");
      }
      if (jsonObject.containsKey("client_ip")) {
        selectJsonObject.put("ip", jsonObject.get("client_ip"));
      } else {
        selectJsonObject.put("ip", jsonObject.get(""));
      }
      if (jsonObject.containsKey("location")) {
        selectJsonObject.put("location", jsonObject.get("location"));
      } else {
        selectJsonObject.put("location", "");
      }
      if (jsonObject.containsKey("model")) {
        selectJsonObject.put("model", jsonObject.get("model"));
      } else {
        selectJsonObject.put("model", "");
      }
      /*if (jsonObject.containsKey("net_type")) {
        selectJsonObject.put("network", jsonObject.get("net_type"));
      } else {
        selectJsonObject.put("network", "");
      }*/
      /*if (jsonObject.containsKey("last_start_time")){
        selectJsonObject
            .put("last_time", TimeParse.formatEsTime(jsonObject.getString("last_start_time")));
      }else {
        selectJsonObject
            .put("last_time", "");
      }*/
      if (jsonObject.containsKey("udid")) {
        selectJsonObject.put("udid", jsonObject.get("udid"));
      } else {
        selectJsonObject.put("udid", "");
      }
      /*if (jsonObject.containsKey("ip_lan")) {
        selectJsonObject.put("ip_lan", jsonObject.get("ip_lan"));
      } else {
        selectJsonObject.put("ip_lan", "");
      }*/
      selectJsonArray.add(selectJsonObject);
    }
    result.put("data_list", selectJsonArray);
    return result;
  }

  /**
   * 获得设备的崩溃次数、安全事件数目，威胁数目，启动次数，环境统计等.
   */
  private Map<String, Map<String, Long>> getDevRiskCount(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> udids) {
    Map<String, Map<String, Long>> map = new HashMap<>();
    Map<String, Long> eventMap = statCountByUdid(commonBaseService.getEventIndexName(),
        commonBaseService.getIndexTypeName(),
        appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, udids, false);
    map.put("event", eventMap);
    Map<String, Long> threatMap = statCountByUdid(commonBaseService.getThreatIndexName(),
        commonBaseService.getIndexTypeName(),
        appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, udids, false);
    map.put("threat", threatMap);
    Map<String, Long> startMap = statCountByUdid(commonBaseService.getStartIndexName(),
        commonBaseService.getIndexTypeName(),
        appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, udids, false);
    map.put("start", startMap);
    Map<String, Long> envMap = statCountByUdid(commonBaseService.getEnvIndexName(),
        commonBaseService.getIndexTypeName(),
        appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, udids, false);
    map.put("env", envMap);

    Map<String, Long> crashMap = statCountByUdid(commonBaseService.getCrashIndexName(),
        commonBaseService.getIndexTypeName(),
        appId, manufacturerList,
        locationList, osVersionList, appVersionList, startTime, endTime, udids, false);
    map.put("crash", crashMap);
    return map;
  }

  /**
   * 获取启动id(run_key).
   */
  private Map<String, Map<String, String>> getRunKey(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> udids) {
    Map<String, Map<String, String>> map = new HashMap<>();

    Map<String, String> envMap = getRunKeyForUdid(commonBaseService.getEnvIndexName(),
        commonBaseService.getIndexTypeName(), appId, manufacturerList, locationList, osVersionList,
        appVersionList, startTime, endTime, udids, false);

    map.put("env", envMap);
    return map;
  }

  private BoolQueryBuilder filterDevBoolQuery(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, List<String> fieldList, String type, String value,
      String isRoot) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime, null);
    boolean minMatch = false;
    List<String> shouldFields = new ArrayList<>();
    if (type != null && value != null && !"".equals(type.trim()) && !"".equals(value.trim())) {
      for (int i = 0; i < fields.length; i++) {
        if (type != fields[i]) {
          shouldFields.add(fields[i]);
        }
      }
      TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(type, value);
      boolQueryBuilder.must(termQueryBuilder);
    } else {
      shouldFields = Arrays.asList(fields);
    }
    if (fieldList != null && !fieldList.isEmpty()) {
      minMatch = true;
      for (String field : shouldFields) {
        TermsQueryBuilder termsQueryBuilder = QueryBuilders.termsQuery(field, fieldList);
        boolQueryBuilder.should(termsQueryBuilder);
      }
    }
    if (minMatch) {
      //  should       "minimum_should_match": 1,
      boolQueryBuilder.minimumShouldMatch(1);
    }
    if (isRoot != null && !"".equals(isRoot)) {
      ExistsQueryBuilder existsQueryBuilder = QueryBuilders.existsQuery("is_root");
      if ("true".equals(isRoot)) {
        boolQueryBuilder.must(existsQueryBuilder);
      } else {
        boolQueryBuilder.mustNot(existsQueryBuilder);
      }
    }
    return boolQueryBuilder;
  }

  private Map<String, Long> statCountByUdid(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> udids,
      boolean oneIndex) {
    Map<String, Long> map = new HashMap<>();
    String[] indexExist = {indexName};
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return map;
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, null);
    TermsQueryBuilder udidTermsQueryBuilder = QueryBuilders.termsQuery(EsFieldModel.UDID, udids);
    boolQueryBuilder.must(udidTermsQueryBuilder);

    String termsName = "count_by_field";
    long size = udids.size();
    long shardSize = size;
    if (size < 1) {
      // shard size 设置必须比0大，es限制
      shardSize = 1;
    }
    TermsAggregationBuilder termsAggregationBuilder = AggregationBuilders.terms(termsName)
        .field(EsFieldModel.UDID)
        .shardSize((int) shardSize)
        .size((int) size)
        .order(BucketOrder.count(false));

    SearchResponse searchResponse = es.client.prepareSearch(indexExist)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addAggregation(termsAggregationBuilder)
        .execute()
        .actionGet();

    Terms terms = searchResponse.getAggregations().get(termsName);
    for (Terms.Bucket entry : terms.getBuckets()) {
      long count = entry.getDocCount();
      String field = entry.getKeyAsString();
      map.put(field, count);
    }
    return map;
  }

  private Map<String, String> getRunKeyForUdid(String indexName, String indexType, String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, List<String> udids,
      boolean oneIndex) {
    Map<String, String> map = new HashMap<>();
    String[] indexExist = {};
    if (oneIndex) {
      indexExist = new String[]{indexName};
    } else {
      List<String> indexs = es
          .getIndexs(indexName, startTime, endTime, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return map;
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList, startTime, endTime, null);
    TermsQueryBuilder udidTermsQueryBuilder = QueryBuilders.termsQuery(EsFieldModel.UDID, udids);
    boolQueryBuilder.must(udidTermsQueryBuilder);

    SearchRequestBuilder searchRequestBuilder = es.client.prepareSearch(indexExist)
        .setTypes(indexType).setQuery(boolQueryBuilder).setSize(PubString.lsize)
        .addSort(EsFieldModel.TIME, SortOrder.DESC);

    SearchResponse searchRequest = searchRequestBuilder.get();
    SearchHit[] searchHits = searchRequest.getHits().getHits();
    for (SearchHit hit : searchHits) {
      Map mapHit = hit.getSourceAsMap();
      if (!map.containsKey(mapHit.get("udid"))) {
        map.put(mapHit.get("udid").toString(), mapHit.get("run_key").toString());
      }
    }
    return map;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.StatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilder;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class StatServiceImpl implements StatService {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private AppRepository appRepository;

  @Override
  public JSONObject getStartTrend(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject jsonObject = commonAggService
        .trendCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null);
    JSONObject data = new JSONObject();
    data.put("coord_list", jsonObject.get("date_list"));
    data.put("count_list", jsonObject.get("count_list"));
    data.put("risk_dev_list", jsonObject.get("dev_count_list"));
    return data;
  }

  @Override
  public JSONObject getCrashTrend(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject jsonObject = commonAggService
        .trendCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null);
    JSONObject data = new JSONObject();
    data.put("coord_list", jsonObject.get("date_list"));
    data.put("count_list", jsonObject.get("count_list"));
    data.put("risk_dev_list", jsonObject.get("dev_count_list"));
    return data;
  }

  @Override
  public JSONObject getDetection(String strAgentId) {
    List<Map<String, String>> mapList = getMonitorList(strAgentId,
        commonBaseService.getThreatIndexName());
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getSafeEvent(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject jsonObject = commonAggService
        .trendCount(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null);
    JSONObject data = new JSONObject();
    data.put("coord_list", jsonObject.get("date_list"));
    data.put("count_list", jsonObject.get("count_list"));
    data.put("risk_dev_list", jsonObject.get("dev_count_list"));
    return data;
  }

  @Override
  public JSONObject getRiskInfo(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    DecimalFormat df = new DecimalFormat("0.00");
    //启动数据统计
    JSONObject jsonObjectStart = commonAggService
        .totalCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null, false);
    //应用启动次数
    long longActiveDev = jsonObjectStart.getLong("count");
    //活跃设备数
    long longStartDev = jsonObjectStart.getLong("dev_count");
    data.put("start_dev", longStartDev);
    data.put("app_start", longActiveDev);
    //平均每台启动次数
    String strAppStartRate = "0.00";
    if (longActiveDev > 0) {
      strAppStartRate = df
          .format((float) longActiveDev / longStartDev);
    }
    data.put("app_start_rate", strAppStartRate);
    //安全事件统计
    JSONObject jsonObjectEvent = commonAggService
        .totalCount(commonBaseService.getEventIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null, false);
    //安全事件总数
    long longEventCount = jsonObjectEvent.getLong("count");
    //事件设备总数
    long longEventDev = jsonObjectEvent.getLong("dev_count");
    data.put("event_count", longEventCount);
    data.put("event_dev_count", longEventDev);
    //威胁数据统计
    JSONObject jsonObjectThreat = commonAggService
        .totalCount(commonBaseService.getThreatIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null, false);
    //威胁发生次数
    long longThreatCount = jsonObjectThreat.getLong("count");
    //威胁影响设备数
    long longThreatDev = jsonObjectThreat.getLong("dev_count");
    data.put("risk_count", longThreatCount);
    data.put("risk_dev_count", longThreatDev);
    //崩溃数据统计
    JSONObject jsonObjectCrash = commonAggService
        .totalCount(commonBaseService.getCrashIndexName(), commonBaseService.getIndexTypeName(),
            strAgentId, null, null, null, null, startTime, endTime, null, false);
    //崩溃次数
    long longAppCrash = jsonObjectCrash.getLong("count");
    //崩溃影响设备数
    long longCrashDev = jsonObjectCrash.getLong("dev_count");
    data.put("app_crash", longAppCrash);
    data.put("crash_dev_count", longCrashDev);
    //崩溃影响设备率
    String crashDevRate = "0.00%";
    if (longCrashDev > 0) {
      crashDevRate = commonBaseService
          .getPercentRateStr(longCrashDev, longStartDev);
    }
    data.put("crash_dev_rate", crashDevRate);
    return data;
  }

  @Override
  public JSONObject getRiskDev(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    List<Map<String, String>> mapList = getKeyCount(strAgentId,
        commonBaseService.getThreatIndexName(),
        EsFieldModel.DATA_TYPE, EsFieldModel.UDID, "type", "num", startTime,
        endTime, 10, false);
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getRiskFrequency(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    List<Map<String, String>> mapList = getKeyCount(strAgentId,
        commonBaseService.getThreatIndexName(),
        EsFieldModel.DATA_TYPE, null, "type", "num", startTime, endTime, 10, false);
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getLocationMap(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    List<Map<String, String>> mapList = getKeyCount(strAgentId,
        commonBaseService.getThreatIndexName(), EsFieldModel.LOCATION, null, "location", "value",
        startTime, endTime, 500, false);
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getLocationDistribution(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    List<Map<String, String>> mapList = getDocDevCount(strAgentId,
        commonBaseService.getThreatIndexName(),
        EsFieldModel.LOCATION, EsFieldModel.UDID, "location",
        "risk_count", "risk_dev_count", startTime, endTime, 5, false);
    //获取某个地域的受影响设备数和启动设备数
    for (Map<String, String> map : mapList) {
      String riskDevCount = getCount(strAgentId, commonBaseService.getThreatIndexName(),
          EsFieldModel.LOCATION,
          map.get("location"), startTime, endTime, false);
      String startDev = getCount(strAgentId, commonBaseService.getStartIndexName(),
          EsFieldModel.LOCATION, map.get("location"), startTime, endTime, false);
      //防止某种消息上报过慢出现比例超过百分之百的情况
      if (Long.parseLong(startDev) < Long.parseLong(riskDevCount)) {
        startDev = riskDevCount;
      }
      map.put("risk_dev_count", riskDevCount);
      map.put("start_dev", startDev);
      String ratio = "0.00%";
      if (Long.parseLong(startDev) > 0) {
        ratio = commonBaseService
            .getPercentRateStr(Long.parseLong(riskDevCount), Long.parseLong(startDev));
      }
      map.put("rate", ratio);
    }
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getRiskDevSort(long startTime, long endTime, String strAgentId)
      throws ParseException {
    JSONObject data = new JSONObject();
    List<Map<String, String>> mapList = getDocDevCount(strAgentId,
        commonBaseService.getThreatIndexName(),
        "udid", "data_type", "udid",
        "risk_count", "risk_type_count", startTime, endTime, 5, false);
    //获取某台设备对应位置
    for (Map<String, String> map : mapList) {
      String local = getLocation(strAgentId, commonBaseService.getThreatIndexName(),
          EsFieldModel.UDID, map.get("udid"),
          startTime, endTime);
      map.put("location", local);
    }
    data.put("datalist", mapList);
    return data;
  }

  //获取顶部筛选条件
  @Override
  public JSONObject getFilterCondition(String strMsgType, String strAppId) {
    JSONObject jsonData = new JSONObject();
    String strIndex = "";
    switch (strMsgType) {
      case "safe_event":
        strIndex = commonBaseService.getEventIndexName();
        break;
      case "everisk":
        strIndex = commonBaseService.getThreatIndexName();
        break;
      case "environment":
        strIndex = commonBaseService.getEnvIndexName();
        break;
      case "crash":
        strIndex = commonBaseService.getCrashIndexName();
        break;
      case "start":
        strIndex = commonBaseService.getStartIndexName();
        break;
      case "apkinfo":
        strIndex = commonBaseService.getAppIndexName();
        break;
      case "devinfo":
        strIndex = commonBaseService.getDevIndexName();
        break;
      default:
        break;
    }

    if (!es.exists(strIndex)) {
      return jsonData;
    }
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    bqb.must(QueryBuilders.matchAllQuery());
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAppId));

    SearchRequestBuilder searchRequestBuilder = es.client
        .prepareSearch(strIndex)
        .setSize(PubString.lsize)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb);

    //需要做汇聚的字段
    String[] arrstrType = {EsFieldModel.MANUFACTURER, EsFieldModel.LOCATION, EsFieldModel.OS_INFO,
        EsFieldModel.APP_INFO};
    for (String field : arrstrType) {
      //按照条件做汇聚
      TermsAggregationBuilder tab = AggregationBuilders
          .terms(field + "s")
          .field(field)
          .size(PubString.lsize);
      searchRequestBuilder.addAggregation(tab);
    }

    SearchResponse searchResponse = searchRequestBuilder.get();

    for (String field : arrstrType) {
      List<String> list = new ArrayList<>();
      Terms terms = searchResponse.getAggregations().get(field + "s");
      for (Terms.Bucket entry : terms.getBuckets()) {
        list.add(entry.getKey().toString());
      }
      if (EsFieldModel.MANUFACTURER.equals(field)) {
        jsonData.put("model_list", list);
      } else if (EsFieldModel.LOCATION.equals(field)) {
        jsonData.put("location_list", list);
      } else if (EsFieldModel.OS_INFO.equals(field)) {
        jsonData.put("os_version_list", list);
      } else if (EsFieldModel.APP_INFO.equals(field)) {
        jsonData.put("app_version_list", list);
      }
    }
    return jsonData;
  }

  @Override
  public JSONObject getActiveDevCount(String strAgentId) {
    JSONObject result = new JSONObject();
    JSONObject jsonObject = new JSONObject();
    App app = appRepository.findById(Integer.parseInt(strAgentId));
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    int numActiveDev = 0;
    if (app.getDateStartTime() != null && app.getDateEndTime() != null) {
      long[] longsTime = null;
      try {
        longsTime = TimeParse
            .getLongRangeTime(sdf.format(app.getDateStartTime()), sdf.format(app.getDateEndTime()));
      } catch (ParseException e) {
        log.error("Error:{}", e);
      }
      JSONObject data = null;
      try {
        data = commonAggService
            .trendCount(commonBaseService.getStartIndexName(), commonBaseService.getIndexTypeName(),
                strAgentId, null, null, null, null, longsTime[0], longsTime[1], null);
      } catch (Exception e) {
        log.error("error:{}", e);
        result.put("code", 1);
        result.put("msg", ErrorInfo.ErrorRequst.getInfo());
        return result;
      }
      List<Long> list = (List) data.get("dev_count_list");
      int numDayLive = app.getDliveInfo() == null ? 0 : app.getDliveInfo();
      long max = 0;
      long min = 0;
      switch (numDayLive) {
        case 0:
          max = 50000;
          min = 0;
          break;
        case 1:
          max = 300000;
          min = 50000;
          break;
        case 2:
          max = 1000000;
          min = 300000;
          break;
        case 3:
          max = 5000000;
          min = 1000000;
          break;
        case 4:
          max = 10000000;
          min = 5000000;
          break;
        case 5:
          max = 0;
          min = 10000000;
          break;
        default:
          break;
      }
      if (list.size() > 0) {
        for (int i = 0; i < list.size(); i++) {
          long numDevCount = list.get(i);
          if (max != 0) {
            if (numDevCount > max || numDevCount < min) {
              numActiveDev++;
            }
          }
        }
      }
      log.info("AppId:{} Active Dev List:{}", strAgentId, list);
    }
    jsonObject.put("days_count", numActiveDev);
    result.put("data", jsonObject);
    result.put("msg", "");
    result.put("code", 0);
    return result;
  }

  /**
   * 实时监测.
   */
  @Override
  public JSONObject realTimeMonitor(String strAgentId, List<String> listMonitorTypes,
      List<String> listModels,
      List<String> listLocations, List<String> listOsVersions, List<String> listAppVersions,
      Integer numMonitor) {
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(strAgentId, listModels, listLocations, listOsVersions, listAppVersions,
            0L, 0L, null);
    if (numMonitor == null) {
      numMonitor = 20;
    }
    String[] strsIndex = new String[listMonitorTypes.size()];
    for (int i = 0; i < listMonitorTypes.size(); i++) {
      String str = listMonitorTypes.get(i);
      String strMonitorType = commonBaseService.getEventIndexName();
      switch (str) {
        case "threat":
          strMonitorType = commonBaseService.getThreatIndexName();
          break;
        case "event":
          strMonitorType = commonBaseService.getEventIndexName();
          break;
        case "env":
          strMonitorType = commonBaseService.getEnvIndexName();
          break;
        case "start":
          strMonitorType = commonBaseService.getStartIndexName();
          break;
        case "crash":
          strMonitorType = commonBaseService.getCrashIndexName();
          break;
        default:
          break;
      }
      strsIndex[i] = strMonitorType;
    }
    JSONArray arrayData = new JSONArray();
    JSONArray arrayResult = new JSONArray();
    SearchHit[] shAll = getRelTimeMonitorList(strsIndex, boolQueryBuilder, numMonitor);
    for (int i = 0; i < shAll.length; i++) {
      JSONObject jsonObject = new JSONObject();
      Map<String, Object> mapSource = shAll[i].getSourceAsMap();
      jsonObject.put("id", shAll[i].getId());
      jsonObject.put("time",
          TimeParse.dataFormat(
              new Date(Long.parseLong(String.valueOf(mapSource.get(EsFieldModel.TIME_STAMP))))));
      jsonObject.put("location", mapSource.get(EsFieldModel.LOCATION));
      jsonObject.put("manufacturer", mapSource.get(EsFieldModel.MANUFACTURER));
      jsonObject.put("udid", mapSource.get(EsFieldModel.UDID));
      jsonObject.put("os_info", mapSource.get(EsFieldModel.OS_INFO));
      jsonObject.put("app_info",
          mapSource.get(EsFieldModel.APP_NAME) + " " + mapSource.get(EsFieldModel.APP_VERSION));
      jsonObject.put("net_work", mapSource.get(EsFieldModel.NETWORK));
      jsonObject.put("ip", mapSource.get(EsFieldModel.CLIENT_IP));
      jsonObject.put("monitor_type", getMonitorType(shAll[i].getIndex()));
      if (mapSource.containsKey(EsFieldModel.IMEI)) {
        jsonObject.put("imei", mapSource.get(EsFieldModel.IMEI) == null ? "NoPermission":
            PubFunc.jsonArray2String(mapSource.get(EsFieldModel.IMEI).toString()));
      } else {
        jsonObject.put("imei", "NoPermission");
      }
      String strMsg = getMsgType(shAll[i].getIndex(),
          mapSource.get(EsFieldModel.DATA_TYPE).toString());
      // 如果是事件数据则显示事件规则名称
      if ("event".equals(strMsg)) {
        strMsg = mapSource.get(EsFieldModel.RULE_NAME).toString();
      }
      jsonObject.put("describe", strMsg);
      /*if (!"start".equals(mapSource.get(EsFieldModel.DATA_TYPE).toString())) {
        arrayResult.add(jsonObject);
      }*/
      arrayData.add(jsonObject);
    }
    // 为了保证最近发生的启动消息在最前面写的奇怪代码
    /*if (arrayData.size() > 0) {
      for (int n = arrayData.size() - 1; n >= 0; n--) {
        JSONObject object = arrayData.getJSONObject(n);
        if ("正常启动".equals(object.getString("describe"))) {
          arrayResult.add(0, object);
        }
      }
    }*/
    JSONObject result = new JSONObject();
    JSONObject jsonData = new JSONObject();
    //jsonData.put("datalist", arrayResult);
    jsonData.put("datalist", arrayData);
    result.put("code", 0);
    result.put("data", jsonData);
    result.put("msg", "");
    return result;
  }

  /**
   * param strIndex param strField description: 获取最新的50条数据按照时间字段降序排列.
   */
  public List<Map<String, String>> getMonitorList(String strAgentId, String strIndex) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    String[] strsIndex = {strIndex};

    SearchHit[] shAll = getRelTimeMonitorList(strsIndex, bqb, 5);

    List<Map<String, String>> mapArray = new ArrayList();
    //正序
    for (int i = 0; i < shAll.length; i++) {
      Map<String, String> map = new HashMap();
      Map<String, Object> mapSource = shAll[i].getSourceAsMap();
      map.put("threat_id", shAll[i].getId());
      map.put("time",
          sdf.format(
              new Date(Long.parseLong(String.valueOf(mapSource.get(EsFieldModel.TIME_STAMP))))));
      map.put("location", String.valueOf(mapSource.get("location")));
      map.put("risk_type", String.valueOf(mapSource.get("data_type")));
      map.put("udid", String.valueOf(mapSource.get("udid")));
      mapArray.add(map);
    }
    return mapArray;
  }

  /**
   * param strIndex param strTerm param strField param strCabField param keyFir param keySec param
   * longStart param longEnd param numSize description: 统计某个时间段内某个地区的消息或设备数量，按照数量排名取前n.
   */
  public List<Map<String, String>> getKeyCount(String strAgentId, String strIndex,
      String termsAggField, String strCabField, String keyFir, String keySec,
      Long longStart, Long longEnd, int numSize, boolean oneIndex) {
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    List<Map<String, String>> mapArrayList = new ArrayList<>();
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    AggregationBuilder cab = null;
    //根据传入参数判断是否需要对设备去重统计
    if (strCabField != null) {
      cab = AggregationBuilders.cardinality(strCabField + "s").field(strCabField);
    }
    //按照条件汇聚日志数量
    TermsAggregationBuilder tab;
    if (cab != null) {
      tab = AggregationBuilders
          .terms(termsAggField + "s")
          .field(termsAggField)
          .shardSize(PubString.lsize)
          .size(numSize)
          .order(BucketOrder.count(false))
          .subAggregation(cab);
    } else {
      tab = AggregationBuilders
          .terms(termsAggField + "s")
          .field(termsAggField)
          .shardSize(PubString.lsize)
          .size(numSize)
          .order(BucketOrder.count(false));
    }

    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{strIndex};
    } else {
      List<String> indexs = es
          .getIndexs(strIndex, longStart, longEnd, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return mapArrayList;
    }

    SearchResponse sr = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(tab)
        .execute().actionGet();
    Terms termCount = sr.getAggregations().get(termsAggField + "s");

    for (Terms.Bucket entry : termCount.getBuckets()) {

      Map<String, String> strMap = new HashMap<String, String>();
      strMap.put(keyFir, String.valueOf(entry.getKey()));

      if (strCabField != null) {
        Cardinality cardinality = entry.getAggregations().get(strCabField + "s");
        strMap.put(keySec, String.valueOf(cardinality.getValue()));
      } else {
        strMap.put(keySec, String.valueOf(entry.getDocCount()));
      }
      mapArrayList.add(strMap);
    }
    return mapArrayList;
  }

  /**
   * param strIndex param strTerm param strField param strCabName param strCabField param keyFir
   * param keySec param keyThir param longStart param longEnd param numSize description:
   * 统计某个时间段内某个地区的消息和设备数量，按照消息数量排名取前n.
   */
  private List<Map<String, String>> getDocDevCount(String strAgentId, String strIndex,
      String termsAggField, String strCabField, String keyFir,
      String keySec, String keyThir, Long longStart, Long longEnd, int numSize, boolean oneIndex) {
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    List<Map<String, String>> mapArrayList = new ArrayList<Map<String, String>>();
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    //按照条件汇聚设备数量
    CardinalityAggregationBuilder cab = AggregationBuilders
        .cardinality(strCabField + "s").field(strCabField);
    TermsAggregationBuilder tab = AggregationBuilders
        .terms(termsAggField + "s")
        .field(termsAggField)
        .shardSize(PubString.lsize)
        .size(numSize)
        .order(BucketOrder.count(false))
        //.order(Terms.Order.count(false))
        .subAggregation(cab);
    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{strIndex};
    } else {
      List<String> indexs = es
          .getIndexs(strIndex, longStart, longEnd, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return mapArrayList;
    }
    SearchResponse sr = es.client.prepareSearch(strIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(tab)
        .execute()
        .actionGet();
    Terms termCount = sr.getAggregations().get(termsAggField + "s");
    for (Terms.Bucket entry : termCount.getBuckets()) {

      Map<String, String> mapRiskLocation = new HashMap<String, String>();

      mapRiskLocation.put(keyFir, String.valueOf(entry.getKey()));

      mapRiskLocation.put(keySec, String.valueOf(entry.getDocCount()));

      Cardinality cardinality = entry.getAggregations().get(strCabField + "s");
      mapRiskLocation.put(keyThir, String.valueOf(cardinality.getValue()));

      mapArrayList.add(mapRiskLocation);
    }
    return mapArrayList;
  }

  /**
   * param strIndex param strField param strLocation param longStart param longEnd description:
   * 查询某个时间段内对应位置设备去重以后的数量.
   */
  private String getCount(String strAgentId, String strIndex, String strField, String strLocation,
      Long longStart, Long longEnd, boolean oneIndex) {
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();

    bqb.must(QueryBuilders.termQuery(strField, strLocation));
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    //按bqb条件过滤

    String[] indexExist = null;
    if (oneIndex) {
      indexExist = new String[]{strIndex};
    } else {
      List<String> indexs = es
          .getIndexs(strIndex, longStart, longEnd, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
    }
    if (indexExist.length == 0) {
      return "0";
    }

    CardinalityAggregationBuilder cabUdid = AggregationBuilders
        .cardinality(EsFieldModel.UDID + "s").field(EsFieldModel.UDID);
    SearchResponse sr = es.client.prepareSearch(strIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(cabUdid)
        .execute()
        .actionGet();
    Cardinality cna = sr.getAggregations().get(EsFieldModel.UDID + "s");
    String strValue = String.valueOf(cna.getValue());
    //返回去重以后的统计数量
    return strValue;
  }

  /**
   * param strIndex param strField param strLocation param longStart param longEnd description
   * 查询某个时间段内某台设备对应位置.
   */
  public String getLocation(String strAgentId, String strIndex, String strField, String strLocation,
      Long longStart, Long longEnd) {
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    String strCity = "";
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    bqb.must(QueryBuilders.termQuery(strField, strLocation));
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    //按照bqb条件过滤
    SearchResponse sr = es.client.prepareSearch(strIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .setFrom(0).setSize(1)
        .execute()
        .actionGet();
    SearchHits hits = sr.getHits();
    if (hits != null && hits.totalHits > 0) {
      strCity = (String) hits.getAt(0).getSourceAsMap().get("location");
    }
    return strCity;
  }

  /**
   * 获取实时监测列表.
   */
  private SearchHit[] getRelTimeMonitorList(String[] strsIndex, BoolQueryBuilder boolQueryBuilder,
      int numMointor) {
    SearchResponse searchResponse = es.client
        .prepareSearch(strsIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addSort(EsFieldModel.TIME_STAMP, SortOrder.DESC)
        .setSize(numMointor)
        .execute().actionGet();

    SearchHits his = searchResponse.getHits();
    return his.getHits();
  }

  /**
   * 判断消息类型.
   */
  private String getMsgType(String strIndexName, String strDataType) {
    String strResult = "event";
    if (strIndexName.contains("threat")) {
      switch (strDataType) {
        case "e_inject":
          strResult = "注入攻击";
          break;
        case "e_devicesreuse":
          strResult = "设备重用";
          break;
        case "e_location":
          strResult = "位置欺诈";
          break;
        case "e_emulator":
          strResult = "模拟器";
          break;
        case "e_gameplugin":
          strResult = "程序外挂";
          break;
        case "e_debug":
          strResult = "调试行为";
          break;
        case "e_hostfraud":
          strResult = "域名欺诈";
          break;
        case "e_speed":
          strResult = "系统加速";
          break;
        default:
          break;
      }
    } else if (strIndexName.contains("environment")) {
      switch (strDataType) {
        case "risk_app":
          strResult = "风险应用";
          break;
        case "risk_frame":
          strResult = "框架攻击";
          break;
        case "root":
          strResult = "Root/越狱";
          break;
        case "sys_conf":
          strResult = "敏感配置";
          break;
        case "risk_process":
          strResult = "风险进程";
          break;
        default:
          break;
      }
    } else if (strIndexName.contains("start")) {
      strResult = "正常启动";
    } else if (strIndexName.contains("crash")) {
      strResult = "运行崩溃";
    }
    return strResult;
  }

  /**
   * 判断每条消息对应属于哪一类.
   */
  private String getMonitorType(String strIndexName) {
    String strResult = "";
    if (strIndexName.contains("threat")) {
      strResult = "threat";
    }else if (strIndexName.contains("event")) {
      strResult = "event";
    }else if (strIndexName.contains("environment")) {
      strResult = "env";
    }else if (strIndexName.contains("start")) {
      strResult = "start";
    }else if (strIndexName.contains("crash")) {
      strResult = "crash";
    }
    return strResult;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.CheatHostConfig;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.ThreatHostFraudConfigRepository;
import com.bangcle.service.ThreatHostFraudService;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午9:13 18-2-8.
 */
@Service
@Slf4j
public class ThreatHostFraudServiceImpl implements ThreatHostFraudService {

  @Autowired
  private ThreatHostFraudConfigRepository threatHostFraudConfigRepository;

  @Override
  public JSONObject cheatHostConfigInsert(Integer agentId, String strHost, String strIp) {
    JSONObject result = new JSONObject();
    //域名和ip不允许为空
    if (strHost.isEmpty() || strIp.isEmpty()) {
      result.put("msg", ErrorInfo.ParamMustExist.getInfo());
      result.put("code", 1);
      return result;
    }
    //ip格式校验
    if (strIp.split("\\.").length != 4) {
      result.put("msg", ErrorInfo.ErrorIpFormat.getInfo());
      result.put("code", 1);
      return result;
    }
    //ip不允许重复
    CheatHostConfig cheatHostConfigIp = threatHostFraudConfigRepository
        .findByIpAndAgentId(strIp.trim(), agentId);
    /*if (cheatHostConfigHost != null || cheatHostConfigIp != null){
      result.put("msg", ErrorInfo.AlreadyConfig.getInfo());
      result.put("code", 1);
      return result;
    }*/
    if (cheatHostConfigIp != null) {
      result.put("msg", ErrorInfo.AlreadyConfig.getInfo());
      result.put("code", 1);
      return result;
    }
    try {
      CheatHostConfig cheatHostConfig = new CheatHostConfig();
      cheatHostConfig.setStrHost(strHost.trim());
      cheatHostConfig.setAgentId(agentId);
      cheatHostConfig.setStrIp(strIp.trim());
      cheatHostConfig.setDateCreate(new Date());
      threatHostFraudConfigRepository.save(cheatHostConfig);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("msg", ErrorInfo.CreateFailure.getInfo());
      result.put("code", 1);
      return result;
    }
    result.put("msg", "");
    result.put("code", 0);
    return result;
  }

  @Override
  public JSONObject cheatHostConfigList(Integer agentId) {
    JSONObject result = new JSONObject();
    List<CheatHostConfig> listCheatHostConfig = new ArrayList<>();
    try {
      listCheatHostConfig = threatHostFraudConfigRepository.findByAgentId(agentId);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("msg", ErrorInfo.ErrorRequst.getInfo());
      result.put("code", 1);
      return result;
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    JSONArray jsonArray = new JSONArray();
    if (listCheatHostConfig.size() > 0) {
      for (CheatHostConfig cheatHostConfig : listCheatHostConfig) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("num_id", cheatHostConfig.getId());
        jsonObject.put("host", cheatHostConfig.getStrHost());
        jsonObject.put("ip", cheatHostConfig.getStrIp());
        jsonObject.put("create_at", sdf.format(cheatHostConfig.getDateCreate()));
        jsonArray.add(jsonObject);
      }
    }
    JSONObject data = new JSONObject();
    data.put("datalist", jsonArray);
    result.put("data", data);
    result.put("msg", "");
    result.put("code", 0);
    return result;
  }

  @Override
  public JSONObject cheatHostConfigDelete(Integer agentId, Integer[] ids) {
    JSONObject result = new JSONObject();
    int numDelete = 0;
    try {
      numDelete = threatHostFraudConfigRepository.deleteByIds(ids, agentId);
    } catch (Exception e) {
      e.printStackTrace();
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
      result.put("code", 1);
      return result;
    }
    if (numDelete == 0) {
      result.put("msg", ErrorInfo.DeleteFailure.getInfo());
      result.put("code", 1);
      return result;
    }
    result.put("msg", "");
    result.put("code", 0);
    return result;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ThreatDescription;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.ThreatDescriptionRepository;
import com.bangcle.service.ThreatInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.DataType;
import com.bangcle.service.model.DevicesReuseType;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.PubString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午4:31 17-11-30.
 */
@Service
@Slf4j
public class ThreatInfoServiceImpl implements ThreatInfoService {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  ThreatDescriptionRepository threatDescriptionRepository;

  @Override
  public JSONObject threatSort(String appId, List<String> listAppVersion, String strThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      long startTime, long endTime, String strStatType) {
    listOsVersion = commonBaseService.elementTreat(listOsVersion);
    listAppVersion = commonBaseService.elementTreat(listAppVersion);
    List<String> listDataTypes = new ArrayList<>();
    if (strThreatType != null && !strThreatType.isEmpty()) {
      listDataTypes.add(strThreatType);
    }
    //前端传入model则改为manufacturer字段汇聚
    String strTermsField = commonBaseService.modelToManufacturer(strStatType);
    //构造过滤条件
    BoolQueryBuilder bqb = commonBaseService.filterQueryBuilder(appId, listManufacturer,
        listLocation, listOsVersion, listAppVersion, startTime, endTime, listDataTypes);
    //获得次数和设备数统计
    List<Map<String, Object>> mapList = getDocDevCount(bqb, strTermsField, EsFieldModel.UDID,
        startTime, endTime, strStatType, "risk_count", "risk_dev_count");

    JSONArray resultArray = commonAggService.statCountByField(commonBaseService.getStartIndexName(),
        commonBaseService.getIndexTypeName(), appId, listManufacturer, listLocation, listOsVersion,
        listAppVersion, startTime, endTime, null, strTermsField, 1000L, true, false);
    Map<String, Long> activeCountMap = new HashMap<>();
    //遍历结果增加设备数统计
    for (Object object : resultArray) {
      JSONObject jsonObject = (JSONObject) object;
      activeCountMap.put(jsonObject.getString("field"), jsonObject.getLongValue("dev_count"));
    }
    //计算对应条件下的活跃设备数量和影响设备率
    for (Map<String, Object> map : mapList) {
      long startDevCount = activeCountMap.containsKey(map.get(strStatType)) ? activeCountMap
          .get(map.get(strStatType)) : 0L;
      map.put("start_dev_count", startDevCount);
      map.put("risk_dev_rate", commonBaseService.getPercentRateStr(
          (Long) map.get("risk_dev_count"), startDevCount));
    }
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject getThreatList(String appId, List<String> listAppVersion, String strThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strStatType, String strSortBy, String strSortFiled, Long page, Long size,
      Long startTime, Long endTime) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    //判断威胁类型不为空放入list中
    List<String> listThreatType = new ArrayList<>();
    if (strThreatType != null && !strThreatType.isEmpty()) {
      listThreatType.add(strThreatType);
    }
    JSONObject data = new JSONObject();
    JSONObject jsonObject = new JSONObject();
    if ("threat".equals(strStatType)) {
      jsonObject = commonAggService
          .searchList(commonBaseService.getThreatIndexName(), commonBaseService.getIndexTypeName(),
              appId, listManufacturer, listLocation, listOsVersion, listAppVersion, startTime,
              endTime, listThreatType, page, size, null, false);
    } else {
      jsonObject = commonAggService
          .getDevDetail(commonBaseService.getThreatIndexName(), appId, listManufacturer,
              listLocation, listOsVersion, listAppVersion, startTime, endTime, listThreatType, null,
              EsFieldModel.DATA_TYPE, true, strSortBy, strSortFiled, page, size, false);
    }
    JSONArray jsonArray = (JSONArray) jsonObject.get("data_list");
    JSONArray dataArray = new JSONArray();
    //遍历获取的数据，将需要的字段过滤出来
    if (jsonArray.size() > 0) {
      for (int i = 0; i < jsonArray.size(); i++) {
        JSONObject job = jsonArray.getJSONObject(i);
        JSONObject object = new JSONObject();
        object.put("app_version", job.get(EsFieldModel.APP_VERSION));
        object.put("ip", job.get(EsFieldModel.CLIENT_IP));
        //object.put("ip_lan", job.get(EsFieldModel.IP_LAN));
        if (job.containsKey(EsFieldModel.IMEI)) {
          object.put("imei", job.get(EsFieldModel.IMEI) == null ? "NoPermission"
              : PubFunc.jsonArray2String(job.getString(EsFieldModel.IMEI)));
        }else {
          object.put("imei", "NoPermission");
        }
        object.put("location", job.get(EsFieldModel.LOCATION));
        object.put("model", job.get(EsFieldModel.MANUFACTURER));
        object.put("network", job.get(EsFieldModel.NETWORK));
        object.put("os_info", job.get(EsFieldModel.OS_INFO));
        object.put("threat_type", job.get(EsFieldModel.DATA_TYPE));
        object.put("self_md5", job.get(EsFieldModel.SELF_MD5));
        if (job.containsKey("last_time")) {
          object.put("last_time", job.get("last_time"));
          object.put("count", job.get("count"));
          object.put("data_type_count", job.get("data_type_count"));
        } else {
          object.put("time", sdf.format(new Date(job.getLong(EsFieldModel.TIME_STAMP))));
          object.put("threat_id", job.get("id"));
        }
        object.put("udid", job.get(EsFieldModel.UDID));
        dataArray.add(object);
      }
    }
    data.put("datalist", dataArray);
    data.put("total", jsonObject.get("count"));
    return data;
  }

  @Override
  public JSONObject getTimeLine(String appId, List<String> listAppVersion, String strThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String udid, Long startTime, Long endTime) {
    List<String> listThreatType = new ArrayList<>();
    if (strThreatType != null && !strThreatType.isEmpty()) {
      listThreatType.add(strThreatType);
    }
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, listManufacturer,
            listLocation, listOsVersion, listAppVersion, startTime, endTime, listThreatType);
    boolQueryBuilder.must(QueryBuilders.termQuery(EsFieldModel.UDID, udid));
    JSONObject data = commonAggService
        .timeLineList(commonBaseService.getThreatIndexName(), commonBaseService.getIndexTypeName(),
            boolQueryBuilder, EsFieldModel.DATA_TYPE, udid, startTime, endTime, false);
    return data;
  }

  @Override
  public JSONObject getThreatAnalyze(String strThreatId, String appId) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    List<String> listIds = new ArrayList<>();
    if (strThreatId != null && !strThreatId.isEmpty()) {
      listIds.add(strThreatId);
    }
    JSONObject jsonObject = commonAggService
        .getDataById(listIds, appId, commonBaseService.getThreatIndexName(),
            commonBaseService.getIndexTypeName());
    JSONObject data = new JSONObject();

    data.put("threat_type", jsonObject.get("data_type"));
    data.put("time", sdf.format(new Date(jsonObject.getLong(EsFieldModel.TIME_STAMP))));
    if ("e_inject".equals(jsonObject.get("data_type").toString())) {
      data.put("inject_type", jsonObject.get("type"));
    }
    if (jsonObject.get(EsFieldModel.PLOT_TYPE) == null) {
      data.put("tactics", "-");
    } else {
      data.put("tactics", jsonObject.get(EsFieldModel.PLOT_TYPE));
    }
    ThreatDescription threatDescription = threatDescriptionRepository
        .findByDataType(jsonObject.get("data_type").toString());
    if (threatDescription == null) {
      data.put("description", "-");
    } else {
      data.put("description", threatDescription.getThreatDescription());
    }
    try {
      JSONObject analyzeResult = getAnalyzeResult(jsonObject.get("data_type").toString(),
          jsonObject);
      log.info("analyzeResult = {}", analyzeResult);
      data.put("analyze_result", analyzeResult);
    } catch (Exception e) {
      log.error("error", e);
      /*JSONObject info = new JSONObject();
      info.put(jsonObject.get("data_type").toString(), null);*/
      data.put("analyze_result", "-");
    }

    return data;
  }

  /**
   * description: 获得次数和某个字段去重后的数量.
   */
  public List<Map<String, Object>> getDocDevCount(BoolQueryBuilder boolQueryBuilder,
      String termsAggField, String strCabField, long startTime, long endTime, String keyFir,
      String keySec, String keyThir) {
    List<String> indexs = es
        .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    //index清洗
    String[] indexExist = es.washIndex(indexs);

    List<Map<String, Object>> mapArrayList = new ArrayList<>();
    Map<String, Object> mapTotal = new HashMap<>();
    //总数
    long longTotal = 0;
    //总的去重后的次数
    long longTotalDev = 0;
    if (indexExist.length > 0) {
      String udidCardinalityName = "count_distinct_udid";
      String udidCardinalityAll = "all_udid_count";
      //按照条件汇聚设备数量
      CardinalityAggregationBuilder cab = AggregationBuilders
          .cardinality(udidCardinalityName).field(strCabField);

      CardinalityAggregationBuilder udidCabAll = AggregationBuilders
          .cardinality(udidCardinalityAll).field(EsFieldModel.UDID);

      TermsAggregationBuilder tab = AggregationBuilders
          .terms(termsAggField + "s")
          .field(termsAggField)
          .size(PubString.lsize)
          .order(BucketOrder.count(false))
          .subAggregation(cab);

      SearchResponse sr = es.client.prepareSearch(indexExist)
          .setTypes(commonBaseService.getIndexTypeName())
          .addAggregation(udidCabAll)
          .setQuery(boolQueryBuilder)
          .addAggregation(tab)
          .execute()
          .actionGet();

      SearchHits searchHits = sr.getHits();
      longTotal = searchHits.getTotalHits();
      Cardinality cardinalityAll = sr.getAggregations().get(udidCardinalityAll);
      longTotalDev = cardinalityAll.getValue();
      Terms termCount = sr.getAggregations().get(termsAggField + "s");

      for (Terms.Bucket entry : termCount.getBuckets()) {

        Map<String, Object> mapRiskLocation = new HashMap<String, Object>();

        mapRiskLocation.put(keyFir, entry.getKey());
        //log.info("key count:{}", entry.getKey());      // Term

        mapRiskLocation.put(keySec, entry.getDocCount());
        mapRiskLocation
            .put("rate", commonBaseService.getPercentRateStr(entry.getDocCount(), longTotal));
        //log.info("doc count:{}", entry.getDocCount()); // Doc count

        Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
        mapRiskLocation.put(keyThir, cardinality.getValue());
        mapRiskLocation.put("dev_rate",
            commonBaseService.getPercentRateStr(cardinality.getValue(), longTotalDev));
        //log.info("dev count:{}", cardinality.getValue()); //Dev count

        mapArrayList.add(mapRiskLocation);
      }
    }
    mapTotal.put(keyFir, "总计");
    mapTotal.put(keySec, longTotal);
    mapTotal.put(keyThir, longTotalDev);
    mapTotal.put("rate", commonBaseService.getPercentRateStr(longTotal, longTotal));
    mapTotal.put("dev_rate", commonBaseService.getPercentRateStr(longTotalDev, longTotalDev));

    mapArrayList.add(0, mapTotal);
    return mapArrayList;
  }

  /**
   * 组织分析结果结构.
   */
  public JSONObject getAnalyzeResult(String threatType, JSONObject data) {
    log.info("getAnalyzeResult data = {}", data);
    JSONObject analyzeResult = new JSONObject();
    //模拟器
    if (threatType.equals(DataType.E_EMULATOR.getType())) {
      JSONObject info = new JSONObject();
      info.put("name", data.get("name"));
      analyzeResult.put(threatType, info);

      //位置欺诈
    } else if (threatType.equals(DataType.E_LOCATION.getType())) {
      JSONArray locationData = new JSONArray();
      JSONArray reasonInfo = data.getJSONArray("reason_info");
      for (int i = 0; i < reasonInfo.size(); i++) {
        JSONObject location = reasonInfo.getJSONObject(i);
        String type = location.getString("type");
        if (type.equals(DataType.E_LOCATION_GPS.getType())) {
          JSONObject gpsData = new JSONObject();
          gpsData.put("period_from_config", location.get("period_from_config"));
          DecimalFormat df = new DecimalFormat("0.00");
          gpsData.put("distance_from_config",
              df.format(location.getDoubleValue("distance_from_config") / 1000));
          gpsData.put("distance", df.format(location.getDoubleValue("distance") / 1000));
          gpsData.put("gps_start", location.getJSONObject("gps_a").get("longitude") + "-" + location
              .getJSONObject("gps_a").get("latitude"));
          gpsData.put("gps_end", location.getJSONObject("gps_b").get("longitude") + "-" + location
              .getJSONObject("gps_b").get("latitude"));
          JSONObject info = new JSONObject();
          info.put(type, gpsData);
          locationData.add(info);
        } else if (type.equals(DataType.E_LOCATION_HOOK.getType())) {
          JSONArray hooks = location.getJSONArray("hook");
          JSONArray hookData = new JSONArray();
          for (int j = 0; j < hooks.size(); j++) {
            JSONObject hook = hooks.getJSONObject(j);
            JSONObject json = new JSONObject();
            json.put("name", hook.get("name"));
            json.put("long_lat", hook.get("longitude") + "-" + hook.get("latitude"));
            hookData.add(json);
          }
          JSONObject info = new JSONObject();
          info.put(type, hookData);
          locationData.add(info);
        } else {
          log.info("location = {}", location);
          log.info("location type = {}", type);
        }
      }
      analyzeResult.put(threatType, locationData);
      //域名欺诈
    } else if (threatType.equals(DataType.E_HOST_FRAUD.getType())) {
      JSONObject info = new JSONObject();
      JSONArray arrayHostFraud = JSON.parseArray(data.get("data").toString());
      info.put("data", arrayHostFraud);
      analyzeResult.put(threatType, info);
      //设备重用
    } else if (threatType.equals(DataType.E_DEVICES_REUSE.getType())) {
      String type = data.get("type").toString();
      if (type.equals(DevicesReuseType.APP_DEVICE.getType())) {
        JSONObject info = new JSONObject();
        Map appDeviceInfo = new HashMap();
        appDeviceInfo.put("copy_open_name", data.get("copy_open_name"));
        appDeviceInfo.put("copy_open_package", data.get("copy_open_package"));
        info.put(type, appDeviceInfo);
        analyzeResult.put(threatType, info);
      } else if (type.equals(DevicesReuseType.DEVICE.getType())) {
        JSONObject info = new JSONObject();
        JSONArray device = new JSONArray();
        JSONArray dataField = JSON.parseArray(data.get("data_field").toString());
        JSONArray dataOld = JSON.parseArray(data.get("data_old").toString());
        JSONArray dataCur = JSON.parseArray(data.get("data_cur").toString());
        if (dataField.size() == dataOld.size() && dataOld.size() == dataCur.size()) {
          for (int i = 0; i < dataField.size(); i++) {
            JSONObject json = new JSONObject();
            json.put("field", dataField.get(i));
            json.put("old", dataOld.get(i));
            json.put("cur", dataCur.get(i));
            device.add(json);
          }
          info.put("device", device);
        }
        analyzeResult.put(threatType, info);
      } else {
        analyzeResult.put(threatType, null);
      }
      //注入攻击
    } else if (threatType.equals(DataType.E_INJECT.getType())) {
      String injectType = data.get("type").toString();
      if (injectType.equals(DataType.E_INJECT_DLOPEN.getType())) {
        JSONObject info = new JSONObject();
        JSONArray dlopenData = new JSONArray();
        JSONArray dlopen = data.getJSONArray(injectType);
        for (int i = 0; i < dlopen.size(); i++) {
          JSONObject json = dlopen.getJSONObject(i);
          dlopenData.add(json.get("so_path"));
        }
        info.put(injectType, dlopenData);
        analyzeResult.put(threatType, info);

      } else if (injectType.equals(DataType.E_INJECT_ATTACK_FRAME.getType())) {
        JSONObject info = new JSONObject();
        JSONArray attackFrameData = new JSONArray();
        JSONArray attackFram = data.getJSONArray(injectType);
        for (int i = 0; i < attackFram.size(); i++) {
          JSONObject json = attackFram.getJSONObject(i);
          //log.info("json.toJSONString():{}", json.toJSONString());
          JSONObject tmp = new JSONObject();
          if ("ios".equals(data.getString(EsFieldModel.PLATFORM))) {
            tmp.put("so_path", json.get("so_path"));
            tmp.put("constructor_cache", json.get("type"));
          } else {
            tmp.put("so_path", json.get("so_path"));
            tmp.put("constructor_cache", json.get("constructor_cache"));
            tmp.put("method_cache", json.get("method_cache"));
          }
          attackFrameData.add(tmp);
        }
        info.put(injectType, attackFrameData);
        analyzeResult.put(threatType, info);
      } else if (injectType.equals(DataType.E_INJECT_HOOK.getType())) {
        JSONObject info = new JSONObject();
        JSONArray hookData = new JSONArray();
        JSONArray hook = data.getJSONArray(injectType);
        for (int i = 0; i < hook.size(); i++) {
          JSONObject json = hook.getJSONObject(i);
          JSONObject[] hookFunction = json.getJSONArray("hook_function")
              .toArray(new JSONObject[]{});
          for (JSONObject tmp : hookFunction) {
            JSONObject obj = new JSONObject();
            obj.put("so_path", tmp.get("so_path"));
            obj.put("func_name", tmp.get("func_name"));
            hookData.add(obj);
          }
        }
        info.put(injectType, hookData);
        analyzeResult.put(threatType, info);
      } else {
        analyzeResult.put(threatType, null);
      }
      //调试行为
    } else if (threatType.equals(DataType.E_DEBUG.getType())) {
      JSONObject info = new JSONObject();
      info.put("is_debug", true);
      analyzeResult.put(threatType, info);
      //程序外挂
    } else if (threatType.equals(DataType.E_GAME_PLUGIN.getType())) {
      JSONObject gamePluginData = new JSONObject();
      Object appsName = data.get("gameplugin_app_name");
      gamePluginData.put("app_name", appsName);
      //gamePluginData.put("app_name", "Daniu大牛");
      Object apps = data.get("data");
      if (apps != null) {
        JSONArray appInfos = data.getJSONArray("data");
        JSONArray appPackage = new JSONArray();
        for (int i = 0; i < appInfos.size(); i++) {
          JSONObject json = appInfos.getJSONObject(i);
          appPackage.add(json.get("app_package"));
        }
        gamePluginData.put("app_package", appPackage);
      }
      Object so = data.get("so");
      if (so != null) {
        JSONArray soInfos = data.getJSONArray("so");
        JSONArray cheaterTrait = new JSONArray();
        for (int i = 0; i < soInfos.size(); i++) {
          JSONObject json = soInfos.getJSONObject(i);
          cheaterTrait.add(json.get("so_path"));
        }
        gamePluginData.put("cheater_trait", cheaterTrait);
      }
      analyzeResult.put(threatType, gamePluginData);
      //系统加速(加速／减速)
    } else if (threatType.equals(DataType.E_SPEED.getType())) {
      JSONObject info = new JSONObject();
      if (data.containsKey("status") && data.get("status") != null) {
        if ("ACCELERATING".equalsIgnoreCase(data.get("status").toString()) || "acceleration"
            .equalsIgnoreCase(data.get("status").toString())) {
          info.put("status", "acceleration");
        } else {
          info.put("status", "deceleration");
        }
      }
      //info.put("status", data.get("status"));
      analyzeResult.put(threatType, info);
    }
    return analyzeResult;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.CheatAddrConfig;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.ThreatLocationFraudConfigRepository;
import com.bangcle.service.ThreatLocationFraudService;
import java.util.Date;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class ThreatLocationFraudServiceImpl implements ThreatLocationFraudService {

  @Autowired
  private ThreatLocationFraudConfigRepository threatLocationFraudConfigRepository;

  @Override
  public void cheatAddrConfigInsert(Double addressOffset, Integer detectionCycle, Integer agentId,
      Date updatedAt) {
    CheatAddrConfig cheatAddrConfig = new CheatAddrConfig(addressOffset, detectionCycle, agentId,
        updatedAt);
    threatLocationFraudConfigRepository.save(cheatAddrConfig);
  }

  @Override
  public JSONObject cheatAddrConfigSelect(Integer agentId) {
    CheatAddrConfig cheatAddrConfig = threatLocationFraudConfigRepository.findByAgentId(agentId);
    JSONObject jsonObject = new JSONObject();
    JSONObject data = new JSONObject();
    if (null != cheatAddrConfig) {
      jsonObject.put("num_id", cheatAddrConfig.getId());
      jsonObject.put("address_offset", cheatAddrConfig.getAddressOffset());
      jsonObject.put("detection_cycle", cheatAddrConfig.getDetectionCycle());
    }
    data.put("code", 0);
    data.put("data", jsonObject);
    data.put("msg", "");
    return data;
  }

  @Override
  public JSONObject cheatAddrConfigUpdate(Double addressOffset, Integer detectionCycle, Integer id,
      Integer agentId) {
    CheatAddrConfig cheatAddrConfig = threatLocationFraudConfigRepository.findById(id);
    log.info("addressOffset:{}", addressOffset);
    JSONObject data = new JSONObject();
    if (addressOffset != null && cheatAddrConfig != null) {
      cheatAddrConfig.setAddressOffset(addressOffset);
      if (addressOffset <= 0) {
        data.put("code", 1);
        data.put("msg", ErrorInfo.ErrorAddressOffset.getInfo());
        return data;
      }
    }
    if (detectionCycle != null && cheatAddrConfig != null) {
      if (detectionCycle < 10) {
        data.put("code", 1);
        data.put("msg", ErrorInfo.ErrorParagramFormat.getInfo());
        return data;
      }
      cheatAddrConfig.setDetectionCycle(detectionCycle);
    }
    try {
      threatLocationFraudConfigRepository.save(cheatAddrConfig);
    } catch (Exception e) {
      e.printStackTrace();
      data.put("code", 1);
      data.put("msg", ErrorInfo.UpdateFailure.getInfo());
      return data;
    }
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }
}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ProtectStrategy;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.ProtectStrategyRepository;
import com.bangcle.service.ThreatStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.DataType;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubString;
import com.bangcle.util.TimeParse;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class ThreatStatServiceImpl implements ThreatStatService {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private ProtectStrategyRepository protectStrategyRepo;

  @Autowired
  private CommonAggService commonAggService;

  /**
   * 威胁总数统计.
   */
  @Override
  public JSONObject threatCount(String appId, List<String> manufacturerList,
      List<String> locationList,
      List<String> osVersionList, List<String> appVersionList, Long startTime, Long endTime,
      String threatType) {
    List<String> listDataType = new ArrayList<>();
    if (threatType != null && !threatType.isEmpty()) {
      listDataType.add(threatType);
    }
    BoolQueryBuilder threatBoolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList,
            startTime, endTime, listDataType);
    BoolQueryBuilder activeBoolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList,
            startTime, endTime, null);

    //log.info("============ bool query builder {}", threatBoolQueryBuilder.toString());

    // 聚合内容，相当于 select count(*) 这部分.
    // cardinality是唯一聚合，聚合的字段是udid，这统计的是udid去重后的数量，也就是数量.
    String udidCardinalityName = "count_distinct_udid";
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(udidCardinalityName).field(EsFieldModel.UDID);
    //根据传入时间过滤出相应的index
    String[] indexExistThreat = {commonBaseService.getThreatIndexName()};
    String[] indexExistStart = {commonBaseService.getStartIndexName()};
    //启动数目
    long activeCount = 0;
    //启动设备数目
    long activeDevCount = 0;
    //威胁数目
    long threatCount = 0;
    //威胁设备数目
    long threatDevCount = 0;
    String rate = "0.00%";
    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    indexExistStart = es.washIndex(indexs);

    indexs = es.getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    indexExistThreat = es.washIndex(indexs);

    // 查询结果，活跃.
    if (indexExistStart.length > 0) {
      SearchResponse activeSearchResponse = es.client
          .prepareSearch(indexExistStart)
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(activeBoolQueryBuilder).addAggregation(udidCardinalityAggregationBuilder)
          .execute().actionGet();
      Cardinality cardinality = activeSearchResponse.getAggregations().get(udidCardinalityName);
      activeCount = activeSearchResponse.getHits().getTotalHits();
      //log.info("========= 启动数目是: {}", activeCount);

      activeDevCount = cardinality.getValue();
      //log.info("========= 启动设备数目: {}", activeDevCount);
    }

    // 查询结果，威胁.
    if (indexExistThreat.length > 0) {
      SearchResponse threatSearchResponse = es.client
          .prepareSearch(indexExistThreat)
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(threatBoolQueryBuilder).addAggregation(udidCardinalityAggregationBuilder)
          .execute().actionGet();

      // 获得返回结果.
      threatCount = threatSearchResponse.getHits().getTotalHits();
      //log.info("========= 威胁数目是: {}", threatCount);

      Cardinality threatCardinality = threatSearchResponse.getAggregations()
          .get(udidCardinalityName);
      threatDevCount = threatCardinality.getValue();
      //log.info("========= 威胁设备数目: {}", threatDevCount);
    }
    //防止启动消息上报过慢出现影响设备率超过百分之百的情况
    if (activeDevCount < threatDevCount) {
      threatDevCount = activeDevCount;
    }
    DecimalFormat df = new DecimalFormat("0.00");
    if (activeDevCount > 0) {
      rate = df.format(((float) threatDevCount / activeDevCount) * 100) + "%";
    }
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("risk_count", threatCount);
    dataJsonObject.put("risk_dev_count", threatDevCount);
    dataJsonObject.put("risk_dev_rate", rate);
    dataJsonObject.put("start_dev_count", activeDevCount);
    return dataJsonObject;
  }

  /**
   * 威胁趋势.
   */
  @Override
  public JSONObject threatTrend(String appId, List<String> manufacturerList,
      List<String> locationList,
      List<String> osVersionList, List<String> appVersionList, Long startTime, Long endTime,
      String threatType) {
    List<String> listDataType = new ArrayList<>();
    if (threatType != null && !threatType.isEmpty()) {
      listDataType.add(threatType);
    }
    // 统计每天或者每小时的次数和设备数目.
    String dateHistogramName = "count_every_time";
    DateHistogramAggregationBuilder dateHistogramAggregationBuilder = AggregationBuilders
        .dateHistogram(dateHistogramName).field(EsFieldModel.TIME);
    dateHistogramAggregationBuilder
        .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("Asia/Shanghai")));
    boolean sameDay = TimeParse.isSameDay(startTime, endTime);
    List<String> dateList = new ArrayList<>();
    if (sameDay) {
      // 查看一天的数据按照小时分组.
      dateHistogramAggregationBuilder.dateHistogramInterval(new DateHistogramInterval("1h"));
      dateList = TimeParse.getHourList();
    } else {
      // 按照每天查看数据.
      dateHistogramAggregationBuilder.dateHistogramInterval(new DateHistogramInterval("1d"));
      dateList = TimeParse.getDateList(startTime, endTime);
    }
    String udidCardinalityName = "count_distinct_udid";
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(udidCardinalityName).field(EsFieldModel.UDID);
    dateHistogramAggregationBuilder.subAggregation(udidCardinalityAggregationBuilder);

    BoolQueryBuilder threatBoolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList,
            locationList, osVersionList, appVersionList,
            startTime, endTime, listDataType);

    List<String> indexs = es
        .getIndexs(commonBaseService.getStartIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExistStart = es.washIndex(indexs);

    indexs = es.getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExistThreat = es.washIndex(indexs);
    Map<String, Map<String, Long>> threatMap = new HashMap<>();
    if (indexExistThreat.length > 0) {
      SearchResponse threatSearchResponse = es.client
          .prepareSearch(indexExistThreat)
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(threatBoolQueryBuilder)
          .addAggregation(dateHistogramAggregationBuilder)
          .execute().actionGet();
      threatMap = getThreatMapByDate(dateHistogramName, udidCardinalityName, threatSearchResponse,
          sameDay);
    }

    Map<String, Map<String, Long>> activeMap = new HashMap<>();
    if (indexExistStart.length > 0) {
      BoolQueryBuilder activeBoolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, manufacturerList,
              locationList, osVersionList, appVersionList,
              startTime, endTime, null);
      SearchResponse activeSearchResponse = es.client
          .prepareSearch(indexExistStart)
          .setTypes(commonBaseService.getIndexTypeName())
          .setQuery(activeBoolQueryBuilder)
          .addAggregation(dateHistogramAggregationBuilder)
          .execute().actionGet();

      activeMap = getActiveMapByDate(dateHistogramName, udidCardinalityName, activeSearchResponse,
          sameDay);
    }

    JSONObject dataObject = new JSONObject();
    List<Long> threatCountList = new ArrayList<>();
    List<Long> threatDevCountList = new ArrayList<>();
    List<Long> activeDevCountList = new ArrayList<>();
    List<Double> rateList = new ArrayList<>();
    for (String date : dateList) {
      long threatCount = 0L;
      long threatDevCount = 0L;
      if (threatMap.containsKey(date)) {
        threatCount = threatMap.get(date).get("count");
        threatDevCount = threatMap.get(date).get("dev_count");
      }
      threatCountList.add(threatCount);
      threatDevCountList.add(threatDevCount);
      long activeDevCount = 0L;
      if (activeMap.containsKey(date)) {
        activeDevCount = activeMap.get(date).get("dev_count");
      }
      activeDevCountList.add(activeDevCount);
      double threatDevRate = 0.00;
      if (activeDevCount > 0L) {
        threatDevRate = commonBaseService.getRate(threatDevCount, activeDevCount);
        log.info("threatDevRate:{}", threatDevRate);
      }
      rateList.add(threatDevRate);
    }
    dataObject.put("risk_count_list", threatCountList);
    dataObject.put("risk_dev_count_list", threatDevCountList);
    dataObject.put("start_dev_count_list", activeDevCountList);
    dataObject.put("risk_dev_rate_list", rateList);
    dataObject.put("coord_list", dateList);
    return dataObject;
  }

  /**
   * 威胁分类统计.
   */
  @Override
  public JSONObject threatStatCount(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String threatType) {
    // 按照类型统计数目和设备数目
    // 选单个类型，个别类型要按照特征字段分组统计
    String sortField = "";
    if (threatType == null || threatType.isEmpty()) {
      sortField = EsFieldModel.DATA_TYPE;
    } else if (DataType.E_DEVICES_REUSE.getType().equals(threatType) || DataType.E_INJECT.getType()
        .equals(threatType) || DataType.E_EMULATOR.getType().equals(threatType)) {
      sortField = "type";
    } else if (DataType.E_GAME_PLUGIN.getType().equals(threatType)) {
      sortField = "gameplugin_app_name";
    } else if (DataType.E_SPEED.getType().equals(threatType)) {
      sortField = "status";
    }
    List<String> listDataType = new ArrayList<>();
    if (threatType != null && !threatType.isEmpty()) {
      listDataType.add(threatType);
    }
    BoolQueryBuilder bqb = commonBaseService.filterQueryBuilder(appId, manufacturerList,
        locationList, osVersionList, appVersionList,
        startTime, endTime, listDataType);
    List<Map<String, String>> mapList = getDocDevCount(threatType, bqb, sortField,
        EsFieldModel.UDID, "type", "count", "dev_count", startTime, endTime);
    JSONObject data = new JSONObject();
    data.put("datalist", mapList);
    return data;
  }

  @Override
  public JSONObject threatStat(String appId, List<String> manufacturerList,
      List<String> locationList,
      List<String> osVersionList, List<String> appVersionList, Long startTime, Long endTime,
      String threatType, String strCountType, String strDistType) {
    List<String> listDataTypes = new ArrayList<>();
    //判断是否选择数据类型，默认全部（首次点击页面前端会不返回数据类型，默认全部，以后点击如果如果不选择数据类型则返回空字符串）
    if (threatType != null && !threatType.isEmpty()) {
      listDataTypes.add(threatType);
    }
    String indexName = commonBaseService.getThreatIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String field = "";
    switch (strDistType) {
      case "model":
        field = EsFieldModel.MANUFACTURER;
        break;
      case "location":
        field = EsFieldModel.LOCATION;
        break;
      case "os_version":
        field = EsFieldModel.OS_INFO;
        break;
      case "app_version":
        field = EsFieldModel.APP_INFO;
        break;
      default:
        break;
    }
    String countKey = "count";
    if ("risk_dev_count".equals(strCountType)) {
      countKey = "dev_count";
    }
    JSONObject totalCountObject = commonAggService.totalCount(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime,
        listDataTypes, false);
    long count = totalCountObject.getLong(countKey);
    JSONArray resultArray = commonAggService.statCountByField(indexName, indexTypeName, appId,
        manufacturerList, locationList, osVersionList, appVersionList, startTime, endTime,
        listDataTypes, field, 1000, false, false);
    JSONArray datalistJsonArray = new JSONArray();
    for (Object object : resultArray) {
      JSONObject fieldJsonObject = (JSONObject) object;
      JSONObject listJsonObject = new JSONObject();
      long fieldCount = fieldJsonObject.getLongValue(countKey);
      listJsonObject.put("count", fieldCount);
      listJsonObject.put("type", fieldJsonObject.get("field"));
      listJsonObject.put("percent", commonBaseService.getRate(fieldCount, count));
      datalistJsonArray.add(listJsonObject);
    }

    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("datalist", datalistJsonArray);
    return dataJsonObject;
  }

  @Override
  public JSONObject threatPlotCount(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String threatType) {
    JSONObject jsonObject = new JSONObject();
    //根据传入时间过滤出对应的index
    String[] indexExist = {commonBaseService.getThreatIndexName()};
    JSONArray jsonArray = new JSONArray();
    if (startTime > 0L) {
      List<String> indexs = es
          .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
      //indexExist.leng==0判断
      indexExist = es.washIndex(indexs);
      if (indexExist.length == 0) {
        jsonObject.put("datalist", jsonArray);
        return jsonObject;
      }
    }
    List<String> listPlotTypes = new ArrayList<>();
    listPlotTypes.add("msg");
    listPlotTypes.add("msgquit");
    listPlotTypes.add("quit");
    listPlotTypes.add("white");
    List<ProtectStrategy> listProtectStrategy = protectStrategyRepo.findByAppId(appId);
    for (ProtectStrategy protectStrategy : listProtectStrategy) {
      JSONObject data = new JSONObject();
      BoolQueryBuilder boolQueryBuilder = commonBaseService
          .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, appVersionList,
              startTime, endTime, null);
      boolQueryBuilder
          .must(QueryBuilders.termQuery(EsFieldModel.PROTOL_TYPE, protectStrategy.getThreatType()));
      long longThreatCount = getTotalCount(boolQueryBuilder, indexExist);
      boolQueryBuilder.must(QueryBuilders.termsQuery(EsFieldModel.PLOT_TYPE, listPlotTypes));
      long longPlotCount = getTotalCount(boolQueryBuilder, indexExist);
      data.put("rate", commonBaseService.getPercentRateStr(longPlotCount, longThreatCount));
      data.put("risk_plot_count", longPlotCount);
      data.put("risk_count", longThreatCount);
      data.put("risk_type", protolToData(protectStrategy.getThreatType()));
      data.put("plot_type", protectStrategy.getStrategy());
      data.put("status", protectStrategy.getStatus());
      jsonArray.add(data);
    }
    jsonObject.put("datalist", jsonArray);
    return jsonObject;
  }

  /**
   * protol_type转data_type.
   */
  private String protolToData(String strProtol) {
    String strDataType = "";
    switch (strProtol) {
      case "location":
        strDataType = "e_location";
        break;
      case "host_fraud":
        strDataType = "e_hostfraud";
        break;
      case "devices_reuse":
        strDataType = "e_devicesreuse";
        break;
      case "inject":
        strDataType = "e_inject";
        break;
      case "debug":
        strDataType = "e_debug";
        break;
      case "game_plugin":
        strDataType = "e_gameplugin";
        break;
      case "speed":
        strDataType = "e_speed";
        break;
      case "emulator":
        strDataType = "e_emulator";
        break;
      default:
        strDataType = "-";
        break;
    }
    return strDataType;
  }

  /**
   * 获取一定条件下的总次数.
   */
  public long getTotalCount(BoolQueryBuilder boolQueryBuilder, String[] strsIndexs) {
    SearchResponse searchResponse = es.client.prepareSearch(strsIndexs)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .execute()
        .actionGet();
    SearchHits searchHits = searchResponse.getHits();
    long longCount = searchHits.getTotalHits();
    return longCount;
  }

  /**
   * 威胁趋势，统计威胁数据放到一个map里.
   */
  private Map<String, Map<String, Long>> getThreatMapByDate(String dateHistogramName,
      String udidCardinalityName, SearchResponse threatSearchResponse, Boolean sameDay) {
    Map<String, Map<String, Long>> threatMap = new HashMap<>();
    Histogram threatHistogram = threatSearchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entry : threatHistogram.getBuckets()) {
      long thCount = entry.getDocCount();
      //log.info("========= 威胁数目是: {}", thCount);
      Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
      long longDevCount = cardinality.getValue();
      // log.info("========= 威胁设备数目是: {}", longDevCount);
      //Histogram histogram = entry.getAggregations().get(dateHistogramName);
      // 这里的key需要再处理一下，按照格式
      String historgramKey = TimeParse.timeSplit(sameDay, entry.getKeyAsString());
      //log.info("========= 时间: {}", historgramKey);
      Map<String, Long> mapCount = new HashMap<>();
      mapCount.put("count", thCount);
      mapCount.put("dev_count", longDevCount);
      threatMap.put(historgramKey, mapCount);
    }
    return threatMap;
  }

  /**
   * 威胁趋势，统计活跃数据放到一个map里.
   */
  private Map<String, Map<String, Long>> getActiveMapByDate(String dateHistogramName,
      String udidCardinalityName, SearchResponse activeSearchResponse, Boolean sameDay) {
    Map<String, Map<String, Long>> activeMap = new HashMap<>();
    Histogram threatHistogram = activeSearchResponse.getAggregations().get(dateHistogramName);
    for (Histogram.Bucket entry : threatHistogram.getBuckets()) {
      long longCount = entry.getDocCount();
      //log.info("========= 活跃数目是: {}", longCount);
      Cardinality cardinality = entry.getAggregations().get(udidCardinalityName);
      long longDevCount = cardinality.getValue();
      //log.info("========= 活跃设备数目是: {}", longDevCount);
      //Histogram histogram = entry.getAggregations().get(dateHistogramName);
      // 这里的key需要再处理一下，按照格式
      String historgramKey = "";

      if (sameDay) {
        if (entry.getKeyAsString().split(":")[0].split("T")[1].startsWith("0")) {
          historgramKey =
              entry.getKeyAsString().split(":")[0].split("T")[1].substring(1, 2) + ":00";
        } else {
          historgramKey = entry.getKeyAsString().split(":")[0].split("T")[1] + ":00";
        }
      } else {
        historgramKey = entry.getKeyAsString().split("T")[0];
      }
      //log.info("========= 时间: {}", historgramKey);
      Map<String, Long> mapCount = new HashMap<>();
      mapCount.put("count", longCount);
      mapCount.put("dev_count", longDevCount);
      activeMap.put(historgramKey, mapCount);
    }
    return activeMap;
  }

  /**
   * 按termsAggField做汇聚，统计对应数量和对strCabField字段去重以后的数量统计.
   */
  private List<Map<String, String>> getDocDevCount(String threatType,
      BoolQueryBuilder boolQueryBuilder, String termsAggField, String strCabField, String keyFir,
      String keySec, String keyThir, Long startTime, Long endTime) {
    DecimalFormat df = new DecimalFormat("0.00");
    List<Map<String, String>> mapArrayList = new ArrayList<>();
    //按照条件汇聚设备数量
    CardinalityAggregationBuilder cab = AggregationBuilders
        .cardinality(strCabField + "s").field(strCabField);
    TermsAggregationBuilder tab = AggregationBuilders
        .terms(termsAggField + "s")
        .order(BucketOrder.compound(BucketOrder.aggregation(strCabField + "s", false),
            BucketOrder.count(false)))
        .field(termsAggField)
        .subAggregation(cab);
    List<String> indexs = es
        .getIndexs(commonBaseService.getThreatIndexName(), startTime, endTime, "yyyyMMdd");
    //indexExist.leng==0判断
    String[] indexExist = es.washIndex(indexs);
    SearchResponse sr = es.client.prepareSearch(indexExist)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(boolQueryBuilder)
        .addAggregation(tab)
        .execute()
        .actionGet();
    Terms termCount = sr.getAggregations().get(termsAggField + "s");

    for (Terms.Bucket entry : termCount.getBuckets()) {

      Map<String, String> mapRiskLocation = new HashMap<String, String>();

      mapRiskLocation.put(keyFir, String.valueOf(entry.getKey()));
      //log.info("key count{}", entry.getKey());      // Term

      mapRiskLocation.put(keySec, String.valueOf(entry.getDocCount()));
      //log.info("doc count{}", entry.getDocCount()); // Doc count

      Cardinality cardinality = entry.getAggregations().get(strCabField + "s");
      mapRiskLocation.put(keyThir, String.valueOf(cardinality.getValue()));
      //log.info("dev count{}", cardinality.getValue()); //Dev count

      mapArrayList.add(mapRiskLocation);
    }

    return mapArrayList;
  }

}
package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import com.bangcle.entity.User;
import com.bangcle.entity.enums.ErrorInfo;
import com.bangcle.repository.AppRepository;
import com.bangcle.repository.UserRepository;
import com.bangcle.service.UserService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.BCrypt;
import com.bangcle.util.PubString;
import com.bangcle.util.SelfCache;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * author email: xiang1.li@secneo.com version time: 2017年8月9日上午10:19:14.
 */
@Service
@Slf4j
public class UserServiceImpl implements UserService {

  @Autowired
  private UserRepository userRepo;

  @Autowired
  private AppRepository appRepo;

  @Autowired
  public HttpServletRequest request;

  @Autowired
  private UserService userService;

  @Override
  public User findByEmail(String email) {
    // TODO Auto-generated method stub
    return userRepo.findByEmail(email);
  }

  @Override
  public User findByName(String name) {
    // TODO Auto-generated method stub
    return userRepo.findByName(name);
  }

  @Override
  public User findById(Integer userId) {
    return userRepo.findById(userId);
  }

  @Override
  public JSONObject getUserList() {
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int groupId = Integer.parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    log.info("当前用户id{}", groupId);
    List<User> listAllUser = new ArrayList<>();
    User user = userRepo.findById(groupId);
    //listAllUser.add(user);
    JSONObject data = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    //判断如果是管理员账户就显示自己和所有子账户，如果不是就只显示自己
    if (userService.isSuperAdmin(user)) {
      listAllUser = userRepo.findAdminList(PubString.ADMIN_USER);
      for (User userSon : listAllUser) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("user_name", userSon.getName());
        jsonObject.put("email", userSon.getEmail());
        jsonObject.put("role", userSon.getRoleId());
        jsonObject.put("user_id", userSon.getId());
        jsonObject.put("created_at", TimeParse.dataFormat(userSon.getCreatedAt()));
        jsonArray.add(jsonObject);
      }
    } else if (userService.isAdmin(
        user)) {
      //管理员账户显示该应用下的操作员和审计员
      List<User> listAllUsers = userRepo.findByGroupIdNoSlef(user.getId());
      for (User demo : listAllUsers) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("user_name", demo.getName());
        jsonObject.put("email", demo.getEmail());
        jsonObject.put("role", demo.getRoleId());
        jsonObject.put("user_id", demo.getId());
        if (demo.getCreatedAt() != null) {
          jsonObject.put("created_at", TimeParse.dataFormat(demo.getCreatedAt()));
        }
        jsonArray.add(jsonObject);
      }
    }
    data.put("user_list", jsonArray);
    data.put("user_list_total", jsonArray.size());
    return data;
  }

  @Override
  public JSONObject getAppList(User user) {
    List<App> listApp = appRepo.findByUserId(user.getId());
    JSONObject data = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    for (App app : listApp) {
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("app_name", app.getName());
      jsonObject.put("agent_id", app.getId());
      jsonArray.add(jsonObject);
    }
    data.put("app_list", jsonArray);
    return data;
  }

  @Override
  public void add(User user) {
    userRepo.save(user);
  }

  @Override
  public JSONObject userCreate(List<Integer> listApps, String userName, String email,
      String password, Integer roleId) {
    JSONObject data = new JSONObject();
    //用户名判断
    User userNameExist = userService.findByName(userName.trim());
    //邮箱判断
    User userEmailExist = userService.findByEmail(email.trim());
    if (userEmailExist != null || userNameExist != null) {
      data.put("msg", ErrorInfo.ErrorUserExit.getInfo());
      data.put("code", 1);
      return data;
    }
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int currentUserId = Integer
        .parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    log.info("当前用户id{}", currentUserId);
    //判断传入参数是否合法
    if (listApps == null || email == null || password == null || roleId == null
        || userName == null) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    if (listApps.size() == 0 || email.isEmpty() || password.isEmpty() || userName.isEmpty()) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    if (!passwordCheck(password)) {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ErrorPasswordFormat.getInfo());
      return data;
    }
    //密码加密
    String salt = BCrypt.gensalt();
    password = BCrypt.hashpw(password.trim(), salt);
    User user = new User();
    user.setName(userName.trim());
    user.setEmail(email.trim());
    user.setEncryptedPassword(password.trim());
    user.setRoleId(roleId);
    user.setGroupId(currentUserId);
    JSONArray jsonArray = new JSONArray();
    for (int i : listApps) {
      jsonArray.add(i);
    }
    user.setOperableApps(jsonArray.toJSONString());
    user.setCreatedAt(new Date());
    userRepo.save(user);
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }

  @Override
  public JSONObject userUpdate(Integer userId, List<Integer> listApps, String userName,
      String userEmail,
      String strPassword, Integer roleId)
      throws ParseException {
    JSONObject data = new JSONObject();
    //用户名和邮箱不允许为空
    if ((userName == null) || (userEmail == null)) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    if (userName.isEmpty() || userEmail.isEmpty()) {
      data.put("msg", ErrorInfo.ParamMustExist.getInfo());
      data.put("code", 1);
      return data;
    }
    //用户名判断
    User userNameExist = userService.findByName(userName.trim());
    //邮箱判断
    User userEmailExist = userService.findByEmail(userEmail.trim());
    if (userEmailExist != null) {
      if (!userId.equals(userEmailExist.getId())) {
        data.put("msg", ErrorInfo.ErrorUserExit.getInfo());
        data.put("code", 1);
        return data;
      }
    }
    if (userNameExist != null) {
      if (!userId.equals(userNameExist.getId())) {
        data.put("msg", ErrorInfo.ErrorUserExit.getInfo());
        data.put("code", 1);
        return data;
      }
    }
    JSONArray jsonArray = new JSONArray();
    if (listApps != null && !listApps.isEmpty()) {
      for (int i : listApps) {
        jsonArray.add(i);
      }
    }
    String password = null;
    if (passwordCheck(strPassword)) {
      password = strPassword;
    } else {
      data.put("code", 1);
      data.put("msg", ErrorInfo.ErrorPasswordFormat.getInfo());
      return data;
    }
    //密码加密
    String salt = BCrypt.gensalt();
    if (password != null) {
      password = BCrypt.hashpw(password.trim(), salt);
    }
    Date updateAt = new Date();
    User user = userRepo.findById(userId);
    if (userEmail != null) {
      user.setEmail(userEmail.trim());
    }
    if (userName != null) {
      user.setName(userName.trim());
    }
    if (password != null) {
      user.setEncryptedPassword(password.trim());
    }
    if (roleId != null) {
      user.setRoleId(roleId);
    }
    if (!jsonArray.isEmpty()) {
      user.setOperableApps(jsonArray.toJSONString());
    }
    if (userEmail != null || userName != null || password != null || roleId != null
        || jsonArray != null) {
      user.setUpdatedAt(updateAt);
    }
    userRepo.save(user);
    data.put("code", 0);
    data.put("msg", "");
    return data;
  }

  @Override
  public void userDelete(Integer userId) throws ParseException {
    User deleteUser = userRepo.findById(userId);
    //如果要删除的账户是管理员，则同时删除该管理员账户下的操作员和审计员
    if (userService.isAdmin(deleteUser)) {
      userRepo.deleteByGroupId(userId);
      appRepo.delByUserId(userId);
    } else {
      userRepo.deleteById(userId);
    }
  }

  @Override
  public JSONObject getUserInfo(Integer userId) {
    User user = userRepo.findById(userId);
    JSONObject data = new JSONObject();
    Integer isShow = 1;
    //获取会话id
    String sessionId = request.getSession().getId();
    //获取当前会话的用户id
    int currentUserId = Integer
        .parseInt(SelfCache.get(SelfCache.uidSessionKey(sessionId)).toString());
    //获得账户可以操作的应用列表
    if (userId == currentUserId) {
      isShow = 0;
    }
    String apps = user.getOperableApps();
    JSONArray jsonArray = JSON.parseArray(apps);
    data.put("apps", jsonArray);
    data.put("email", user.getEmail());
    data.put("role_id", user.getRoleId());
    data.put("user_name", user.getName());
    data.put("is_show", isShow);
    return data;
  }

  @Override
  public boolean isSuperAdmin(User user) {
    return PubString.SUPER_USER == user.getRoleId();
  }

  @Override
  public boolean isAdmin(User user) {
    return PubString.ADMIN_USER == user.getRoleId();
  }

  @Override
  public boolean isOperator(User user) {
    return PubString.OPERATE_USER == user.getRoleId();
  }

  @Override
  public boolean isAuditor(User user) {
    return PubString.AUDITOR_USER == user.getRoleId();
  }

  /**
   * 密码格式检查，密码至少包含数字 大写字母 小写字母 特殊字符中的两种，且长度在8-16位之间.
   */
  public boolean passwordCheck(String strPassword) {
    int num = 0;
    if (strPassword != null && !strPassword.isEmpty()) {
      //数字匹配
      num = Pattern.compile("\\d").matcher(strPassword.trim()).find() ? num + 1 : num;
      //小写字母匹配
      num = Pattern.compile("[a-z]").matcher(strPassword.trim()).find() ? num + 1 : num;
      //大写字母匹配
      num = Pattern.compile("[A-Z]").matcher(strPassword.trim()).find() ? num + 1 : num;
      //特殊字符匹配
      num =
          Pattern.compile("[-.!@#$%^&*()+?><]").matcher(strPassword.trim()).find() ? num + 1
              : num;
      if (num < 2 || strPassword.trim().length() < 8 || strPassword.trim().length() > 16) {
        return false;
      }
    }
    return true;
  }
}
package com.bangcle.service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午9:29 17-11-27.
 */
public interface IndexService {

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;
import org.springframework.stereotype.Service;

/**
 * 策略配置-威胁自定义-注入攻击
 */
@Service
public interface InjectionAttacksConfigService {

  //------------------系统SO库函数防Hook定义列表-----------------

  /**
   * 添加 系统so库函数防hook定义
   *
   * @param name 名称
   * @param systemSoName 系统SO库名称
   * @param functionName 函数名称
   */
  JSONObject systemSoConfigSave(String name, String systemSoName, String functionName,
      Integer agentId);

  /**
   * 修改状态(启用/停用)  系统so库函数防hook定义
   *
   * @param status 状态
   * @Param id id号
   */
  JSONObject systemSoConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId);

  /***
   * 显示列表 系统so库函数防hook定义
   * @param agent_id
   * @return
   */
  JSONObject systemSoConfigSelect(Integer agent_id);

  /**
   * 删除列表 系统so库函数防hook定义
   */
  JSONObject systemSoConfigDelete(Integer[] ids, Integer agentId);

  //--------------------应用SO库防Hook定义列表--------------------

  /**
   * 添加 应用SO库防Hook定义
   *
   * @param name 名称
   * @param sourceName 调用源
   * @param functionName 被调用函数名称
   * @param appSoName 函数名称所在so库
   */
  JSONObject appSoConfigSave(String name, String sourceName, String functionName, String appSoName,
      Integer agentId);

  /**
   * 修改状态(启用/停用)  应用SO库防Hook定义
   *
   * @param status 状态
   * @Param id id号
   */
  JSONObject appSoConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId);

  /***
   * 显示列表 应用SO库防Hook定义
   * @param agent_id
   * @return
   */
  JSONObject appSoConfigSelect(Integer agent_id);

  /**
   * 删除列表 应用SO库防Hook定义
   */
  JSONObject appSoConfigDelete(Integer[] ids, Integer agentId);


  /**
   * 新增SO库 应用SO库防Hook定义
   *
   * @param name 名称
   * @param agentId appid
   */
  JSONObject soLibrarySave(String name, Integer agentId);

  /***
   * 显示新增SO库列表 应用SO库防Hook定义
   * @param agent_id
   * @return
   */
  JSONObject soLibrarySelect(Integer agent_id);

  //---------------------Xposed Hook定义列表----------------------

  /**
   * 添加 系统so库函数防hook定义
   *
   * @param name 名称
   * @param xposedFeature xposed特征
   * @param functionName 函数名
   * @param className 类名
   * @param agentId appid
   */
  JSONObject xPosedConfigSave(String name, String xposedFeature, String functionName,
      String className,
      Integer agentId);

  /**
   * 修改状态(启用/停用)  系统so库函数防hook定义
   *
   * @param status 状态
   * @Param id id号
   */
  JSONObject xPosedConfigStatusUpdate(Integer status, Integer[] ids, Integer agentId);

  /***
   * 显示列表 系统so库函数防hook定义
   * @param agent_id
   * @return
   */
  JSONObject xPosedConfigSelect(Integer agent_id);

  /**
   * 删除列表 系统so库函数防hook定义
   */
  JSONObject xPosedConfigDelete(Integer[] ids, Integer agentId);

  /**
   * iOS-Dylib库函数防Hook定义列表.
   */
  JSONObject dylibConfigSelect(Integer agentId);

  /**
   * iOS-Dylib库函数防Hook定义新增.
   */
  JSONObject dylibConfigSave(String name, String dylibName, String functionName, Integer agentId);

  /**
   * iOS-Dylib库函数防Hook定义状态修改.
   */
  JSONObject dylibConfigStatusUpdate(Integer[] ids, Integer status, Integer agentId);

  /**
   * iOS-Dylib库函数防Hook定义删除.
   */
  JSONObject dylibConfigDelete(Integer[] ids, Integer agentId);


}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.App;
import java.util.HashMap;
import java.util.List;
import org.springframework.web.multipart.MultipartFile;

public interface LicenseService {

  public HashMap decryptLicenseFile(MultipartFile licenseFile);

  /**
   * 创建或更新license.
   */
  JSONObject createOrUpdateLicense(HashMap licenseInfo);

  App findById(Integer id);

  JSONObject getRemainTime(Integer numAgentId);

  JSONObject getLicenseDetail(String userId);

  JSONObject findAllApplication();

//  JSONObject findByIdApplication(Integer id);

  JSONObject echo(Integer id);

  JSONObject update(Integer app_id,String app_name,String user_email,String user_name,String user_phone);

}
package com.bangcle.service.model;
/**
 * 枚举所有事件类型.
 */
public enum  DataType {
  DEVINFO("devinfo"),
  START("start"),
  APKINFO("apkinfo"),
  CRASH("crash"),
  USERDATA("userdata"),
  E_ROOT("e_root"),
  E_EMULATOR("e_emulator"),
  E_INJECT("e_inject"),
  E_INJECT_DLOPEN("dlopen"),
  E_INJECT_ATTACK_FRAME("attack_frame"),
  E_INJECT_HOOK("hook"),
  E_LOCATION("e_location"),
  E_LOCATION_GPS("gps"),
  E_LOCATION_HOOK("hook"),
  E_DEVICES_REUSE("e_devicesreuse"),
  E_DEBUG("e_debug"),
  E_GAME_PLUGIN("e_gameplugin"),
  E_SPEED("e_speed"),
  E_ENV_CHECK("e_env_check"),
  E_HOST_FRAUD("e_hostfraud"),
  RISK_APP("risk_app"),
  SYS_CONF("sys_conf"),
  RISK_PROCESS("risk_process"),
  RISK_FRAME("risk_frame");

  public String getType() {
    return type;
  }

  private String type;

  DataType(String type) {
    this.type = type;
  }
}
package com.bangcle.service.model;

/**
 * Created by zhusiwei on 2018/2/2.
 */
public enum DevicesReuseType {
  APP_DEVICE("app_device"),
  DEVICE("device");

  public String getType() {
    return type;
  }

  private String type;

  DevicesReuseType(String type) {
    this.type = type;
  }
}
package com.bangcle.service.model;

/**
 * 定义Es搜索字段的名称.
 */
public class EsFieldModel {

  // udid 设备标识.
  public static final String UDID = "udid";
  // 启动标识
  public static final String RUN_KEY = "run_key";
  // 设备型号.
  public static final String MODEL = "model";
  // 位置.
  public static final String LOCATION = "location";
  // agent_id 应用的唯一标识
  public static final String APP_ID = "agent_id";
  // 数据类型.
  public static final String DATA_TYPE = "data_type";
  //数据内容
  public static final String DATA_INFO = "data";
  // 系统版本.
  public static final String OS_VERSION = "os_version";
  // 系统版本platform+os_version
  public static final String OS_INFO = "os_info";
  // 应用版本.
  public static final String APP_VERSION = "app_version";
  // 应用版本platform+app_version
  public static final String APP_INFO = "app_info";
  // 应用名称.
  public static final String APP_NAME = "app_name";
  // 时间, 这以服务端时间统计，但可调整.
  public static final String TIME = "dt_server_time";
  //时间戳
  public static final String TIME_STAMP = "server_time";
  //崩溃类型
  public static final String CRASH_TYPE = "crash_type";
  // 平台.
  public static final String PLATFORM = "platform";
  //网络
  public static final String NETWORK = "net_type";
  //安全事件id
  public static final String EVENT_ID = "safe_event_id";
  //
  public static final String SELF_MD5 = "self_md5";
  //崩溃原因
  public static final String CRASH_REASON = "reason";
  //崩溃信息栈
  public static final String CRASH_STACK = "stack";
  //客户端ip
  public static final String CLIENT_IP = "client_ip";
  //内网ip
  //public static final String IP_LAN = "ip_lan";
  //es id
  public static final String ID = "_id";
  //事件名称
  public static final String RULE_NAME = "rule_name";
  //安全时间定义id
  public static final String EVENT_DEF_ID = "event_def_id";
  //客户端app版本
  public static final String VER_NAME = "ver_name";
  //protol_type
  public static final String PROTOL_TYPE = "protol_type";
  //策略类型
  public static final String PLOT_TYPE = "plot_type";
  //客户端app名称
  public static final String SOURCE_APP_NAME = "source_app_name";
  //厂商
  public static final String MANUFACTURER = "manufacturer";
  //app安装时间
  public static final String INSTALL_TIME = "install_time";
  // app md5
  public static final String MD5 = "md5";

  public static final String IS_ROOT = "is_root";

  public static final String UDID_FROM = "udid_from";

  public static final String UNAME = "uname";

  public static final String IMEI = "imei";

  public static final String START_ID = "start_id";
}
package com.bangcle.service.model;

/**
 * Created by zhusiwei on 2018/2/3.
 */
public enum EvnType {
  ROOT("root"),
  SYS_CONF("sys_conf"),
  RISK_FRAME("risk_frame"),
  RISK_APP("risk_app"),
  RISK_PROCESS("risk_process");

  public String getType() {
    return type;
  }

  private String type;

  EvnType(String type) {
    this.type = type;
  }
}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashAppVersionListModel {

  private String crashAppVersion;
  private Long crashNum;
  private String crashRate;

  public CrashAppVersionListModel() {

  }

  public CrashAppVersionListModel(String crashAppVersion, Long crashNum, String crashRate) {
    this.crashAppVersion = crashAppVersion;
    this.crashNum = crashNum;
    this.crashRate = crashRate;
  }
}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashCountTypeModel {

  private String crashType;
  private Long crashNum;

  public CrashCountTypeModel() {

  }

  public CrashCountTypeModel(String crashType, Long crashNum) {
    this.crashType = crashType;
    this.crashNum = crashNum;
  }

}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashDevTop10Model {

  private String crashTime;
  private String crashUdid;
  private Long crashNum;
  private Long crashTypeNum;
  private String crashDevType;
  private String crashOsInfo;
  private String crashAppInfo;

  public CrashDevTop10Model() {

  }

  public CrashDevTop10Model(String crashTime, String crashUdid, Long crashNum, Long crashTypeNum,
      String crashDevType, String crashOsInfo, String crashAppInfo) {
    this.crashTime = crashTime;
    this.crashUdid = crashUdid;
    this.crashNum = crashNum;
    this.crashTypeNum = crashTypeNum;
    this.crashDevType = crashDevType;
    this.crashOsInfo = crashOsInfo;
    this.crashAppInfo = crashAppInfo;
  }

}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashDevTypeListModel {

  private String devType;
  private Long crashNum;
  private String crashRate;

  public CrashDevTypeListModel() {

  }

  public CrashDevTypeListModel(String devType, Long crashNum, String crashRate) {
    this.devType = devType;
    this.crashNum = crashNum;
    this.crashRate = crashRate;
  }


}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashOsVersionListModel {

  private String crashOsVersion;
  private Long crashNum;
  private String crashRate;

  public CrashOsVersionListModel() {

  }

  public CrashOsVersionListModel(String crashOsVersion, Long crashNum, String crashRate) {
    this.crashOsVersion = crashOsVersion;
    this.crashNum = crashNum;
    this.crashRate = crashRate;
  }

}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashTrendModel {

  private String time;
  private Long crashCountTotalNum;
  private Long crashDevNum;

  public CrashTrendModel() {

  }

  public CrashTrendModel(String time, Long crashCountTotalNum, Long crashDevNum) {
    this.time = time;
    this.crashCountTotalNum = crashCountTotalNum;
    this.crashDevNum = crashDevNum;
  }
}
package com.bangcle.service.model.report;

import lombok.Data;

/**
 * Created by zhusiwei on 2018/4/24.
 */
@Data
public class CrashTypeTop10Model {

  private String crashType;
  private Long crashNum;
  private Long crashDevNum;
  private String crashFirstTime;
  private String crashTime;

  public CrashTypeTop10Model() {

  }

  public CrashTypeTop10Model(String crashType, Long crashNum, Long crashDevNum,
      String crashFirstTime, String crashTime) {
    this.crashType = crashType;
    this.crashNum = crashNum;
    this.crashDevNum = crashDevNum;
    this.crashFirstTime = crashFirstTime;
    this.crashTime = crashTime;
  }
}
package com.bangcle.service.model.report;
/**
 * 报表综合态势中崩溃统计数据类.
 * */

public class IndexCrashModel {
  private String time;

  private Long countNum;

  private Long devCountNum;

  /**
   * 构造方法.
   *
   */
  public IndexCrashModel(String time, Long countNum, Long devCountNum) {
    this.time = time;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getCountNum() {
    return countNum;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;
/**
 * 报表综合态势中安全事件统计数据类.
 * */

public class IndexEventModel {
  private String time;

  private Long countNum;

  private Long devCountNum;

  /**
   * 构造方法.
   *
   */
  public IndexEventModel(String time, Long countNum, Long devCountNum) {
    this.time = time;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getCountNum() {
    return countNum;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;
/**
 * 报表综合态势中位置分布统计数据类.
 * */

public class IndexLocationModel {
  private String location;

  private Long threatCountNum;

  private Long eventCountNum;

  private Long envCountNum;

  private Long crashCountNum;

  private Long crashDevCountNum;

  private Long threatDevCountNum;

  private Long runDevCountNum;

  /**
   * 构造方法.
   * */
  public IndexLocationModel(String location, Long threatCountNum, Long eventCountNum,
      Long envCountNum, Long crashCountNum, Long crashDevCountNum, Long threatDevCountNum,
      Long runDevCountNum) {
    this.location = location;
    this.threatCountNum = threatCountNum;
    this.eventCountNum = eventCountNum;
    this.envCountNum = envCountNum;
    this.crashCountNum = crashCountNum;
    this.crashDevCountNum = crashDevCountNum;
    this.threatDevCountNum = threatDevCountNum;
    this.runDevCountNum = runDevCountNum;
  }

  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public Long getThreatCountNum() {
    return threatCountNum;
  }

  public void setThreatCountNum(Long threatCountNum) {
    this.threatCountNum = threatCountNum;
  }

  public Long getEventCountNum() {
    return eventCountNum;
  }

  public void setEventCountNum(Long eventCountNum) {
    this.eventCountNum = eventCountNum;
  }

  public Long getEnvCountNum() {
    return envCountNum;
  }

  public void setEnvCountNum(Long envCountNum) {
    this.envCountNum = envCountNum;
  }

  public Long getCrashCountNum() {
    return crashCountNum;
  }

  public void setCrashCountNum(Long crashCountNum) {
    this.crashCountNum = crashCountNum;
  }

  public Long getCrashDevCountNum() {
    return crashDevCountNum;
  }

  public void setCrashDevCountNum(Long crashDevCountNum) {
    this.crashDevCountNum = crashDevCountNum;
  }

  public Long getThreatDevCountNum() {
    return threatDevCountNum;
  }

  public void setThreatDevCountNum(Long threatDevCountNum) {
    this.threatDevCountNum = threatDevCountNum;
  }

  public Long getRunDevCountNum() {
    return runDevCountNum;
  }

  public void setRunDevCountNum(Long runDevCountNum) {
    this.runDevCountNum = runDevCountNum;
  }
}
package com.bangcle.service.model.report;
/**
 * 报表综合态势中运行统计数据类.
 * */

public class IndexRunModel {
  private String time;

  private Long countNum;

  private Long devCountNum;

  /**
   * 构造方法.
   *
   */
  public IndexRunModel(String time, Long countNum, Long devCountNum) {
    this.time = time;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getCountNum() {
    return countNum;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;
/**
 * 报表综合态势中威胁统计数据类.
 * */

public class IndexThreatModel {
  private String type;

  private Long devCountNum;

  /**
   * 构造方法.
   * */
  public IndexThreatModel(String type, Long devCountNum) {
    this.type = type;
    this.devCountNum = devCountNum;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;

public class RunActiveMapModel {
  private String time;
  private Long runActiveEquipment;

  public RunActiveMapModel(String time, Long runActiveEquipment) {
    this.time = time;
    this.runActiveEquipment = runActiveEquipment;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getRunActiveEquipment() {
    return runActiveEquipment;
  }

  public void setRunActiveEquipment(Long runActiveEquipment) {
    this.runActiveEquipment = runActiveEquipment;
  }
}
package com.bangcle.service.model.report;

public class RunAddEquipmentMapModel {
private String time;
private Long runaddEquipment;

  public RunAddEquipmentMapModel(String time, Long runaddEquipment) {
    this.time = time;
    this.runaddEquipment = runaddEquipment;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getRunaddEquipment() {
    return runaddEquipment;
  }

  public void setRunaddEquipment(Long runaddEquipment) {
    this.runaddEquipment = runaddEquipment;
  }
}
package com.bangcle.service.model.report;

public class RunAppLicationVersionModel {

  private String applicationEdition;
  private Long runCountNum;
  private String runPer;

  public RunAppLicationVersionModel(String applicationEdition, Long runCountNum, String runPer) {
    this.applicationEdition = applicationEdition;
    this.runCountNum = runCountNum;
    this.runPer = runPer;
  }

  public String getApplicationEdition() {
    return applicationEdition;
  }

  public void setApplicationEdition(String applicationEdition) {
    this.applicationEdition = applicationEdition;
  }

  public Long getRunCountNum() {
    return runCountNum;
  }

  public void setRunCountNum(Long runCountNum) {
    this.runCountNum = runCountNum;
  }

  public String getRunPer() {
    return runPer;
  }

  public void setRunPer(String runPer) {
    this.runPer = runPer;
  }
}
package com.bangcle.service.model.report;

public class RunAppVersionModel {

  private String appVersion;
  private Long number;
  private String numPer;

  public RunAppVersionModel(String appVersion, Long number, String numPer) {
    this.appVersion = appVersion;
    this.number = number;
    this.numPer = numPer;
  }

  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }

  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }

  public String getNumPer() {
    return numPer;
  }

  public void setNumPer(String numPer) {
    this.numPer = numPer;
  }
}
package com.bangcle.service.model.report;

public class RunDevCountMapModel {

  private String time;
  private Long runEquipmentTotal;

  public RunDevCountMapModel(String time, Long runEquipmentTotal) {
    this.time = time;
    this.runEquipmentTotal = runEquipmentTotal;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getRunEquipmentTotal() {
    return runEquipmentTotal;
  }

  public void setRunEquipmentTotal(Long runEquipmentTotal) {
    this.runEquipmentTotal = runEquipmentTotal;
  }
}
package com.bangcle.service.model.report;

public class RunEquipmentVersionModel {

  private String equipmentType;
  private Long number;
  private String numPer;

  public RunEquipmentVersionModel(String equipmentType, Long number, String numPer) {
    this.equipmentType = equipmentType;
    this.number = number;
    this.numPer = numPer;
  }

  public String getEquipmentType() {
    return equipmentType;
  }

  public void setEquipmentType(String equipmentType) {
    this.equipmentType = equipmentType;
  }

  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }

  public String getNumPer() {
    return numPer;
  }

  public void setNumPer(String numPer) {
    this.numPer = numPer;
  }
}

package com.bangcle.service.model.report;

public class RunLocationModel {

  private String location;
  private Long runCountNum;
  private String runPer;

  public RunLocationModel() {
  }

  public RunLocationModel(String location, Long runCountNum, String runPer) {
    this.location = location;
    this.runCountNum = runCountNum;
    this.runPer = runPer;
  }

  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public Long getRunCountNum() {
    return runCountNum;
  }

  public void setRunCountNum(Long runCountNum) {
    this.runCountNum = runCountNum;
  }

  public String getRunPer() {
    return runPer;
  }

  public void setRunPer(String runPer) {
    this.runPer = runPer;
  }
}
package com.bangcle.service.model.report;

public class RunSystemModel {

  private String sysVersion;
//  private String sysType;
  private Long number;
  private String numPer;

  public RunSystemModel(String sysVersion, Long number, String numPer) {
    this.sysVersion = sysVersion;
//    this.sysType = sysType;
    this.number = number;
    this.numPer = numPer;
  }

  public String getSysVersion() {
    return sysVersion;
  }

  public void setSysVersion(String sysVersion) {
    this.sysVersion = sysVersion;
  }

  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }

  public String getNumPer() {
    return numPer;
  }

  public void setNumPer(String numPer) {
    this.numPer = numPer;
  }
}
package com.bangcle.service.model.report;

public class RunTerminalModel {

  private String appName;
  private String appPer;
  private Long number;

  public RunTerminalModel(String appName, String appPer, Long number) {
    this.appName = appName;
    this.appPer = appPer;
    this.number = number;
  }

  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }

  public String getAppPer() {
    return appPer;
  }

  public void setAppPer(String appPer) {
    this.appPer = appPer;
  }

  public Long getNumber() {
    return number;
  }

  public void setNumber(Long number) {
    this.number = number;
  }
}

package com.bangcle.service.model.report;

public class RunTrendMapModel {

  private String time;
  private Long runCountTotalNum;

  public RunTrendMapModel(String time, Long runCountTotalNum) {
    this.time = time;
    this.runCountTotalNum = runCountTotalNum;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Long getRunCountTotalNum() {
    return runCountTotalNum;
  }

  public void setRunCountTotalNum(Long runCountTotalNum) {
    this.runCountTotalNum = runCountTotalNum;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势环境应用版本分布数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午11:43 18-4-26.
 */
public class ThreatEnvAppInfoDistributedModel {

  private String appInfo;

  private Long countNum;

  private Long devCountNum;

  private Long activeDevCountNum;

  private String devCountPlot;

  /**
   * 构造方法.
   * @param appInfo
   * @param countNum
   * @param devCountNum
   * @param activeDevCountNum
   * @param devCountPlot
   */
  public ThreatEnvAppInfoDistributedModel(String appInfo, Long countNum, Long devCountNum,
      Long activeDevCountNum, String devCountPlot) {
    this.appInfo = appInfo;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
    this.activeDevCountNum = activeDevCountNum;
    this.devCountPlot = devCountPlot;
  }

  public String getAppInfo() {
    return appInfo;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public Long getActiveDevCountNum() {
    return activeDevCountNum;
  }

  public String getDevCountPlot() {
    return devCountPlot;
  }

  public void setAppInfo(String appInfo) {
    this.appInfo = appInfo;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setActiveDevCountNum(Long activeDevCountNum) {
    this.activeDevCountNum = activeDevCountNum;
  }

  public void setDevCountPlot(String devCountPlot) {
    this.devCountPlot = devCountPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势环境风险影响设备数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午3:31 18-4-26.
 */
public class ThreatEnvDevModel {

  private String udid;

  private Long countNum;

  private Long typeCountNum;

  private String appInfo;

  private String osInfo;

  private String lastTime;

  /**
   * 构造方法.
   * @param udid
   * @param countNum
   * @param typeCountNum
   * @param appInfo
   * @param osInfo
   * @param lastTime
   */
  public ThreatEnvDevModel(String udid, Long countNum, Long typeCountNum, String appInfo,
      String osInfo, String lastTime) {
    this.udid = udid;
    this.countNum = countNum;
    this.typeCountNum = typeCountNum;
    this.appInfo = appInfo;
    this.osInfo = osInfo;
    this.lastTime = lastTime;
  }

  public String getUdid() {
    return udid;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getTypeCountNum() {
    return typeCountNum;
  }

  public String getAppInfo() {
    return appInfo;
  }

  public String getOsInfo() {
    return osInfo;
  }

  public String getLastTime() {
    return lastTime;
  }

  public void setUdid(String udid) {
    this.udid = udid;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setTypeCountNum(Long typeCountNum) {
    this.typeCountNum = typeCountNum;
  }

  public void setAppInfo(String appInfo) {
    this.appInfo = appInfo;
  }

  public void setOsInfo(String osInfo) {
    this.osInfo = osInfo;
  }

  public void setLastTime(String lastTime) {
    this.lastTime = lastTime;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势环境影响设备数趋势图数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午9:46 18-4-26.
 */
public class ThreatEnvDevTrendModel {

  private String time;

  private Long devCountNum;

  /**
   * 构造方法.
   * @param time
   * @param devCountNum
   */
  public ThreatEnvDevTrendModel(String time, Long devCountNum) {
    this.time = time;
    this.devCountNum = devCountNum;
  }

  public String getTime() {
    return time;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势环境地域分布数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午11:04 18-4-26.
 */
public class ThreatEnvLocationDistributedModel {

  private String location;

  private Long countNum;

  private Long devCountNum;

  private Long activeDevCountNum;

  private String devCountPlot;

  /**
   * 构造方法.
   * @param location
   * @param countNum
   * @param devCountNum
   * @param activeDevCountNum
   * @param devCountPlot
   */
  public ThreatEnvLocationDistributedModel(String location, Long countNum, Long devCountNum,
      Long activeDevCountNum, String devCountPlot) {
    this.location = location;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
    this.activeDevCountNum = activeDevCountNum;
    this.devCountPlot = devCountPlot;
  }

  public String getLocation() {
    return location;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public Long getActiveDevCountNum() {
    return activeDevCountNum;
  }

  public String getDevCountPlot() {
    return devCountPlot;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setActiveDevCountNum(Long activeDevCountNum) {
    this.activeDevCountNum = activeDevCountNum;
  }

  public void setDevCountPlot(String devCountPlot) {
    this.devCountPlot = devCountPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势环境系统版本分布数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午11:36 18-4-26.
 */
public class ThreatEnvOsInfoDistributedModel {

  private String sysType;

  private Long countNum;

  private Long devCountNum;

  private Long activeDevCountNum;

  private String devCountPlot;

  /**
   * 构造方法.
   * @param sysType
   * @param countNum
   * @param devCountNum
   * @param activeDevCountNum
   * @param devCountPlot
   */
  public ThreatEnvOsInfoDistributedModel(String sysType, Long countNum, Long devCountNum,
      Long activeDevCountNum, String devCountPlot) {
    this.sysType = sysType;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
    this.activeDevCountNum = activeDevCountNum;
    this.devCountPlot = devCountPlot;
  }

  public String getSysType() {
    return sysType;
  }

  public void setSysType(String sysType) {
    this.sysType = sysType;
  }

  public Long getCountNum() {
    return countNum;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public Long getActiveDevCountNum() {
    return activeDevCountNum;
  }

  public void setActiveDevCountNum(Long activeDevCountNum) {
    this.activeDevCountNum = activeDevCountNum;
  }

  public String getDevCountPlot() {
    return devCountPlot;
  }

  public void setDevCountPlot(String devCountPlot) {
    this.devCountPlot = devCountPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 环境类型影响设备数分布数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午9:54 18-4-26.
 */
public class ThreatEnvTypeModel {

  private String type;

  private Long devCountNum;

  /**
   * 构造方法.
   * @param type
   * @param devCountNum
   */
  public ThreatEnvTypeModel(String type, Long devCountNum) {
    this.type = type;
    this.devCountNum = devCountNum;
  }

  public String getType() {
    return type;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势安全事件攻击源数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午11:42 18-4-25.
 */
public class ThreatEventAttackSourceModel {

  private String ip;

  private String location;

  private Long countNum;

  private String countNumPlot;

  private Long devCountNum;

  private String devCountNumPlot;

  /**
   * 构造方法.
   * @param ip
   * @param location
   * @param countNum
   * @param countNumPlot
   * @param devCountNum
   * @param devCountNumPlot
   */
  public ThreatEventAttackSourceModel(String ip, String location, Long countNum,
      String countNumPlot, Long devCountNum, String devCountNumPlot) {
    this.ip = ip;
    this.location = location;
    this.countNum = countNum;
    this.countNumPlot = countNumPlot;
    this.devCountNum = devCountNum;
    this.devCountNumPlot = devCountNumPlot;
  }

  public String getIp() {
    return ip;
  }

  public String getLocation() {
    return location;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getCountNumPlot() {
    return countNumPlot;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public String getDevCountNumPlot() {
    return devCountNumPlot;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setCountNumPlot(String countNumPlot) {
    this.countNumPlot = countNumPlot;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setDevCountNumPlot(String devCountNumPlot) {
    this.devCountNumPlot = devCountNumPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 安全事件设备数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午2:09 18-4-25.
 */
public class ThreatEventDevModel {

  private String udid;

  private Long countNum;

  private String manufacturer;

  private String osInfo;

  private String lastTime;

  /**
   * 构造方法.
   * @param udid
   * @param countNum
   * @param manufacturer
   * @param osInfo
   * @param lastTime
   */
  public ThreatEventDevModel(String udid, Long countNum, String manufacturer,
      String osInfo, String lastTime) {
    this.udid = udid;
    this.countNum = countNum;
    this.manufacturer = manufacturer;
    this.osInfo = osInfo;
    this.lastTime = lastTime;
  }

  public String getUdid() {
    return udid;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getManufacturer() {
    return manufacturer;
  }

  public String getOsInfo() {
    return osInfo;
  }

  public String getLastTime() {
    return lastTime;
  }

  public void setUdid(String udid) {
    this.udid = udid;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }

  public void setOsInfo(String osInfo) {
    this.osInfo = osInfo;
  }

  public void setLastTime(String lastTime) {
    this.lastTime = lastTime;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势安全事件地域数据类.
 * author email: yongjin.pan@bangcle.com version time: 上午11:03 18-4-25.
 */
public class ThreatEventLocationModel {

  private String location;

  private Long countNum;

  private String countNumPlot;

  private Long devCountNum;

  private String devCountNumPlot;

  private Long sourceIpCountNum;

  public void setLocation(String location) {
    this.location = location;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setCountNumPlot(String countNumPlot) {
    this.countNumPlot = countNumPlot;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setDevCountNumPlot(String devCountNumPlot) {

    this.devCountNumPlot = devCountNumPlot;
  }

  public void setSourceIpCountNum(Long sourceIpCountNum) {
    this.sourceIpCountNum = sourceIpCountNum;
  }

  public String getLocation() {

    return location;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getCountNumPlot() {
    return countNumPlot;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public String getDevCountNumPlot() {
    return devCountNumPlot;
  }

  public Long getSourceIpCountNum() {
    return sourceIpCountNum;
  }

  /**
   * 构造方法.
   * @param location
   * @param countNum
   * @param countNumPlot
   * @param devCountNum
   * @param devCountNumPlot
   * @param sourceIpCountNum
   */
  public ThreatEventLocationModel(String location, Long countNum, String countNumPlot,
      Long devCountNum, String devCountNumPlot, Long sourceIpCountNum) {
    this.location = location;
    this.countNum = countNum;
    this.countNumPlot = countNumPlot;
    this.devCountNum = devCountNum;
    this.devCountNumPlot = devCountNumPlot;
    this.sourceIpCountNum = sourceIpCountNum;
  }

}
package com.bangcle.service.model.report;

/**
 * 威胁策略实施详情统计数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午8:08 18-4-25.
 */
public class ThreatTacticsModel {

  private String riskType;

  private String status;

  private String type;

  private Long countNum;

  private Long threatPlotCount;

  private String rate;

  /**
   * 构造方法.
   * @param riskType
   * @param status
   * @param type
   * @param countNum
   * @param threatPlotCount
   * @param rate
   */
  public ThreatTacticsModel(String riskType, String status, String type, Long countNum,
      Long threatPlotCount, String rate) {
    this.riskType = riskType;
    this.status = status;
    this.type = type;
    this.countNum = countNum;
    this.threatPlotCount = threatPlotCount;
    this.rate = rate;
  }

  public String getRiskType() {
    return riskType;
  }

  public String getStatus() {
    return status;
  }

  public String getType() {
    return type;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getThreatPlotCount() {
    return threatPlotCount;
  }

  public String getRate() {
    return rate;
  }

  public void setRiskType(String riskType) {
    this.riskType = riskType;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setThreatPlotCount(Long threatPlotCount) {
    this.threatPlotCount = threatPlotCount;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势威胁应用版本数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午4:26 18-4-25.
 */
public class ThreatThreatAppInfoModel {

  private String appInfo;

  private Long countNum;

  private String countNumPlot;

  private Long devCountNum;

  private String devCountNumPlot;

  /**
   * 构造方法.
   * @param appInfo
   * @param countNum
   * @param countNumPlot
   * @param devCountNum
   * @param devCountNumPlot
   */
  public ThreatThreatAppInfoModel(String appInfo, Long countNum, String countNumPlot,
      Long devCountNum, String devCountNumPlot) {
    this.appInfo = appInfo;
    this.countNum = countNum;
    this.countNumPlot = countNumPlot;
    this.devCountNum = devCountNum;
    this.devCountNumPlot = devCountNumPlot;
  }

  public String getAppInfo() {
    return appInfo;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getCountNumPlot() {
    return countNumPlot;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public String getDevCountNumPlot() {
    return devCountNumPlot;
  }

  public void setAppInfo(String appInfo) {
    this.appInfo = appInfo;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setCountNumPlot(String countNumPlot) {
    this.countNumPlot = countNumPlot;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setDevCountNumPlot(String devCountNumPlot) {
    this.devCountNumPlot = devCountNumPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势威胁类型分类统计数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午3:44 18-4-25.
 */
public class ThreatThreatClassifyModel {

  private String type;

  private Long countNum;

  private Long devCountNum;

  /**
   * 构造方法.
   * @param type
   * @param countNum
   * @param devCountNum
   */
  public ThreatThreatClassifyModel(String type, Long countNum, Long devCountNum) {
    this.type = type;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
  }

  public String getType() {
    return type;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势威胁影响设备数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午4:34 18-4-25.
 */
public class threatThreatDevModel {

  private String udid;

  private Long countNum;

  private Long typeCountNum;

  private String osInfo;

  private String lastTime;

  /**
   * 构造方法.
   * @param udid
   * @param countNum
   * @param typeCountNum
   * @param osInfo
   * @param lastTime
   */
  public threatThreatDevModel(String udid, Long countNum, Long typeCountNum, String osInfo,
      String lastTime) {
    this.udid = udid;
    this.countNum = countNum;
    this.typeCountNum = typeCountNum;
    this.osInfo = osInfo;
    this.lastTime = lastTime;
  }

  public String getUdid() {
    return udid;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getTypeCountNum() {
    return typeCountNum;
  }

  public String getOsInfo() {
    return osInfo;
  }

  public String getLastTime() {
    return lastTime;
  }

  public void setUdid(String udid) {
    this.udid = udid;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setTypeCountNum(Long typeCountNum) {
    this.typeCountNum = typeCountNum;
  }

  public void setOsInfo(String osInfo) {
    this.osInfo = osInfo;
  }

  public void setLastTime(String lastTime) {
    this.lastTime = lastTime;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁地域数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午3:53 18-4-25.
 */
public class ThreatThreatLocationModel {

  private String location;

  private Long countNum;

  private String countNumPlot;

  private Long devCountNum;

  private String devCountNumPlot;

  /**
   * 构造方法.
   * @param location
   * @param countNum
   * @param countNumPlot
   * @param devCountNum
   * @param devCountNumPlot
   */
  public ThreatThreatLocationModel(String location, Long countNum, String countNumPlot,
      Long devCountNum, String devCountNumPlot) {
    this.location = location;
    this.countNum = countNum;
    this.countNumPlot = countNumPlot;
    this.devCountNum = devCountNum;
    this.devCountNumPlot = devCountNumPlot;
  }

  public String getLocation() {
    return location;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getCountNumPlot() {
    return countNumPlot;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public String getDevCountNumPlot() {
    return devCountNumPlot;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setCountNumPlot(String countNumPlot) {
    this.countNumPlot = countNumPlot;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setDevCountNumPlot(String devCountNumPlot) {
    this.devCountNumPlot = devCountNumPlot;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势威胁趋势数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午3:21 18-4-25.
 */
public class ThreatThreatModel {

  private String time;

  private Long countNum;

  private Long devCountNum;

  /**
   * 构造方法.
   * @param time
   * @param countNum
   * @param devCountNum
   */
  public ThreatThreatModel(String time, Long countNum, Long devCountNum) {
    this.time = time;
    this.countNum = countNum;
    this.devCountNum = devCountNum;
  }

  public String getTime() {
    return time;
  }

  public Long getCountNum() {
    return countNum;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }
}
package com.bangcle.service.model.report;

/**
 * 威胁态势威胁系统数据类.
 * author email: yongjin.pan@bangcle.com version time: 下午4:20 18-4-25.
 */
public class ThreatThreatOsInfoModel {

  private String osInfo;

  private Long countNum;

  private String countNumPlot;

  private Long devCountNum;

  private String devCountNumPlot;

  /**
   * 构造方法.
   * @param osInfo
   * @param countNum
   * @param countNumPlot
   * @param devCountNum
   * @param devCountNumPlot
   */
  public ThreatThreatOsInfoModel(String osInfo, Long countNum, String countNumPlot,
      Long devCountNum, String devCountNumPlot) {
    this.osInfo = osInfo;
    this.countNum = countNum;
    this.countNumPlot = countNumPlot;
    this.devCountNum = devCountNum;
    this.devCountNumPlot = devCountNumPlot;
  }

  public String getOsInfo() {
    return osInfo;
  }

  public Long getCountNum() {
    return countNum;
  }

  public String getCountNumPlot() {
    return countNumPlot;
  }

  public Long getDevCountNum() {
    return devCountNum;
  }

  public String getDevCountNumPlot() {
    return devCountNumPlot;
  }

  public void setOsInfo(String osInfo) {
    this.osInfo = osInfo;
  }

  public void setCountNum(Long countNum) {
    this.countNum = countNum;
  }

  public void setCountNumPlot(String countNumPlot) {
    this.countNumPlot = countNumPlot;
  }

  public void setDevCountNum(Long devCountNum) {
    this.devCountNum = devCountNum;
  }

  public void setDevCountNumPlot(String devCountNumPlot) {
    this.devCountNumPlot = devCountNumPlot;
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;

/**
 * Created by zhusiwei on 2018/4/13.
 */
public interface MsspApiService {

  public JSONObject heartbeat(JSONObject dataJsonObject);

  public JSONObject register(JSONObject dataJsonObject);

  public JSONObject registerOperator(JSONObject dataJsonObject);

  public JSONObject getLoginKey(JSONObject dataJsonObject);

  public JSONObject login(JSONObject dataJsonObject);

  public JSONObject getRiskInfo(JSONObject dataJsonObject);

  public JSONObject getListInfos(JSONObject dataJsonObject);

  public JSONObject editAppInfo(JSONObject dataJsonObject);

  public String genEncryptData(JSONObject result);

  public JSONObject checkParamFormat(String data);

  public JSONObject getMonitorInfo(JSONObject dataJsonObject);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;
import javax.persistence.criteria.CriteriaBuilder.In;

public interface ProtectStrategyService {

  /**
   * 查询所有策略.
   */
  public JSONObject findAll(String appId);

  /**
   * 更新保护策略.
   */
  public JSONObject updateStrategy(Integer strategy, Integer status, Integer id, String appId,String message);


  /**
   * 查询策略命中的威胁.
   */
  public JSONObject findThreatByStrategy(String appId, List<String> manufacturerList,
      List<String> threatTypeList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, long page, long size);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.text.ParseException;
import java.util.List;
import org.springframework.web.servlet.ModelAndView;

/**
 * Created by zhusiwei on 2018/3/7.
 */
public interface ReportFormsService {

  /**
   * 获取报表任务数据.
   */
  public void getReportFormsData(JSONObject reportTaskInfo, JSONObject modelAndView,
      String taskReportDir);

  /**
   * 获取报表任务参数.
   */
  public JSONObject getReportFormsInfo(int agentId, int reportTaskId);

}
package com.bangcle.service;


import java.io.IOException;
import org.jxls.common.Context;


public interface ReportGenerateService {

  /**
   * 根据模板、数据生成excel报表.
   */
  public Boolean genTargetFromSource(Context context, String templatePath, String destPath);

  /**
   * 根据报表id，生成报表，不包含数据生成.
   */
  public Boolean genReportFromId(Integer id);

  /**
   * 根据报表id，生成报表数据.
   */
  public void genDataFromId(Integer id);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.text.ParseException;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午3:25 18-4-9.
 */
@Service
public interface ReportListService {

  /**
   * 报表列表.
   */
  public JSONObject getReportList(Integer numAgentId, Integer numTaskId, String strBeginTime,
      String strEndTime, Integer numPage, Integer numSize) throws ParseException;

  /**
   * 报表任务下拉列表.
   */
  public JSONObject getReportTaskNames(Integer numAgentId);

  /**
   * 根据报表id 获取报表信息.
   */
  public JSONObject getReportListById(Integer reportId);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.ReportTaskManage;
import java.text.ParseException;
import java.util.List;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午6:26 18-3-11.
 */
@Service
public interface ReportTaskManageService {

  /**
   * 创建报表任务.
   * @param numTaskCycle 0 一次性，1 每天，2 每周，3 每两周，4 一个月，5 一季度
   * @param listReportTypes home 综合态势，threat 威胁态势，run 运行分析，crash 崩溃分析 报表任务创建.
   */
  public JSONObject reportTaskCreate(Integer numAgentId, JSONArray listAppInfos,
      JSONArray listLocations, JSONArray listOsInfos, JSONArray listReportTypes,
      String strTaskName, Integer numTaskCycle, String strBeginTime, String strEndTime);

  /**
   * 报表任务删除.
   */
  public JSONObject reportTaskDelete(Integer numAgentId, Integer numId);

  /**
   * 报表任务状态修改.
   */
  public JSONObject reportTaskStatus(Integer numAgentId, Integer numId, Integer numStatus)
      throws ParseException;

  /**
   * 报表任务信息回显.
   */
  public JSONObject reportTaskInfo(Integer numAgentId, Integer numId);

  /**
   * 报表任务列表.
   */
  public JSONObject reportTaskList(Integer numAgentId, Integer numPage, Integer numSize)
      throws ParseException;

  /**
   * 报表任务修改.
   */
  public JSONObject reportTaskUpdate(Integer numAgentId, JSONArray listAppInfos,
      JSONArray listLocations, JSONArray listOsInfos,
      JSONArray listReportTypes, String strTaskName, Integer numTaskCycle, String strBeginTime,
      String strEndTime, Integer numId);

  /**
   * 创建所有报表.
   */
  public boolean createSubReport(ReportTaskManage reportTaskManage);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * Created by zhusiwei on 2018/1/15.
 */
public interface RiskAppDefService {

  /**
   * 新增风险应用
   */
  public String addRiskApp(Integer appId, String appName, String appMd5, String pkgName,
      String platform);

  /**
   * 风险应用列表
   */
  public JSONObject riskAppList(Integer appId);

  /**
   * 删除风险应用
   */
  public boolean deleteRiskApp(Integer appId, List<Integer> riskAppIds);

  /**
   * 启用／关闭风险应用
   */
  public boolean switchRiskApp(Integer appId, Integer onOff, List<Integer> riskAppIds);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:20 17-11-30.
 */
public interface RunningInfoService {

  /**
   * sort_by:区分升序还是降序 desc asc 启动列表.
   */
  public JSONObject startSort(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      String strUdid, Long startTime, Long endTime, long page, long size, String sort_by);

  /**
   * 单台设备启动次数趋势.
   */
  public JSONObject startCountTrend(String agentId, String udid, Long startTime, Long endTime);

  /**
   * 通过id获取对应记录.
   */
  public JSONObject getStartSummary(String appId, String udid, Integer page, Integer size, long startTime, long endTime);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午7:45 17-11-30.
 */
public interface RunningStatService {

  /**
   * 运行分析总数统计.
   */
  public JSONObject runningCount(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime);

  /**
   * 启动趋势.
   */
  public JSONObject runningTrend(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime);

  /**
   * 启动次数排名前十城市/活跃设备排名前十城市
   */
  public JSONObject runningRank(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, String type);

  /**
   * 启动分布.
   */
  public JSONObject runningStat(String appId,
      List<String> manufacturerList, List<String> locationList, List<String> osVersionList,
      List<String> appVersionList, Long startTime, Long endTime, String type, String distType);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.SafeEvent;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:14 17-12-28.
 */
public interface SafeEventService {

  /**
   * param numEventType:0威胁次数； 1 威胁种类数； 2 威胁组合
   * param numOrder:0 按照固定的威胁发生顺序； 1 不按照威胁发生顺序
   * param strTimeType:s 秒；m 分钟；h 小时；d 天
   * return.
   */
  public JSONObject safeEventCreate(String strEventName, String strDeacrip, Integer numEventType,
      Long numTime, String strTimeType, Integer numCount, String strThreatType,
      Integer numSpecies, List<String> listThreatType, Integer numOrder, Integer agentId);

  public JSONArray safeEventList(Integer agentId);

  public JSONObject safeEventInfo(Integer eventId);

  /**
   * param numEventType:0威胁次数； 1 威胁种类数； 2 威胁组合
   * param numOrder:0 按照固定的威胁发生顺序； 1 不按照威胁发生顺序
   * param strTimeType:s 秒；m 分钟；h 小时；d 天
   * return.
   */
  public JSONObject safeEventUpdate(String strEventName, String strDeacrip, Integer numEventType,
      Long numTime, String strTimeType, Integer numCount, String strThreatType,
      Integer numSpecies, List<String> listThreatType, Integer numOrder, Integer numEventId, Integer numAgentId);

  public JSONObject safeEventStatus(Integer numEventId, Integer status);

  public JSONObject deleteById(Integer numEventId);

  public JSONObject safeEventChange(Integer eventIdUp, Integer eventIdDown, Integer levelIdUp, Integer levelIdDown);

  public SafeEvent getSafeEventByName(Integer agentId, String strEventName);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;
import org.springframework.web.bind.annotation.RequestParam;

public interface SearchService {

  public JSONObject search(String appId, List<String> manufacturerList,
      List<String> locationList, List<String> osVersionList, List<String> appVersionList,
      Long startTime, Long endTime, String type, String value, List<String> fieldList, long page, long perPageNum, String isRoot);

  public List<String> filterDuckCondition(String value);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.text.ParseException;
import java.util.List;
import java.util.Map;

/**
 * 汇总操作接口.
 */
public interface StatService {

  public JSONObject getStartTrend(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getCrashTrend(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getDetection(String strAgentId);

  public JSONObject getSafeEvent(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getRiskInfo(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getRiskDev(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getRiskFrequency(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getLocationMap(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getLocationDistribution(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getRiskDevSort(long startTime, long endTime, String strAgentId)
      throws ParseException;

  public JSONObject getFilterCondition(String strMsgType, String strAppId);

  public JSONObject getActiveDevCount(String strAgentId);

  public JSONObject realTimeMonitor(String strAgentId, List<String> listMonitorTypes, List<String> listModels,
      List<String> listLocations, List<String> listOsVersions, List<String> listAppVersions,
      Integer numMonitor);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.CheatHostConfig;
import java.util.List;
import org.springframework.stereotype.Service;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:56 18-2-8.
 */
@Service
public interface ThreatHostFraudService {

  /**
   * 配置策略-威胁自定义-域名欺诈 新增
   *
   * @param strHost 域名
   * @param agentId 应用id
   * @param strIp ip.
   */
  JSONObject cheatHostConfigInsert(Integer agentId, String strHost, String strIp);

  /**
   * 配置策略-威胁自定义-域名欺诈 列表
   *
   * @param agentId 应用id.
   */
  JSONObject cheatHostConfigList(Integer agentId);

  /**
   * 配置策略-威胁自定义-域名欺诈 删除
   *
   * @param agentId 应用id.
   */
  JSONObject cheatHostConfigDelete(Integer agentId, Integer[] listIds);
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.List;
import java.util.Map;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:21 17-11-30.
 */
public interface ThreatInfoService {

  /**
   * param sort_by 判断是升序还是降序（asc desc） param stat_type 统计维度 包括location device os_version
   * app_version四种 description: 地域/设备/系统版本/应用版本排行
   */
  public JSONObject threatSort(String appId, List<String> listAppVersion, String listThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      long startTime, long endTime, String strStatType);

  /**
   * param strStatKey 统计维度 包括location device os_version app_version四种 description:
   * 地域/设备/系统版本/应用版本排行.
   */
  public JSONObject getThreatList(String appId, List<String> listAppVersion, String listThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String strStatType, String strSortBy, String strSortFiled, Long page, Long size,
      Long startTime, Long endTime);

  /**
   * description: 时间链.
   * @return
   */
  public JSONObject getTimeLine(String appId, List<String> listAppVersion, String listThreatType,
      List<String> listLocation, List<String> listManufacturer, List<String> listOsVersion,
      String udid, Long startTime, Long endTime);

  /**
   * description: 通过id查询出对应的记录
   * @return
   */
  public JSONObject getThreatAnalyze(String strThreatId, String appId);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.Date;
import org.springframework.stereotype.Service;

/**
 * 位置欺诈接口
 */
@Service
public interface ThreatLocationFraudService {


  /**
   * 配置策略-威胁自定义-位置欺诈 插入数据
   *
   * @param addressOffset 位置飘移量
   * @param detectionCycle 检测周期(秒)
   * @param agentId 应用id
   * @param updatedAt 更新时间
   */
  void cheatAddrConfigInsert(Double addressOffset, Integer detectionCycle, Integer agentId,
      Date updatedAt);

  /***
   * 威胁自定义-位置欺诈 页面回显
   * @param appId
   * @return
   */
  JSONObject cheatAddrConfigSelect(Integer appId);

  /***
   * 威胁自定义-位置欺诈 修改内容
   *
   * @param addressOffset 位置飘移量
   * @param detectionCycle 检测周期(秒)
   * @param id 递增序列。唯一标示
   */
  JSONObject cheatAddrConfigUpdate(Double addressOffset, Integer detectionCycle, Integer id, Integer agentId);

  


}


package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import java.util.List;

public interface ThreatStatService {

  /**
   * 威胁总数统计.
   */
  public JSONObject threatCount(String appId, List<String> manufacturer, List<String> location,
      List<String> osVersion,
      List<String> appVersion, Long startTime, Long endTime, String threatType);

  /**
   * 威胁趋势.
   */
  public JSONObject threatTrend(String appId, List<String> manufacturer, List<String> location,
      List<String> osVersion,
      List<String> appVersion, Long startTime, Long endTime, String threatType);

  /**
   * 按照威胁类型统计分布，对于单个威胁以特有字段统计.
   */
  public JSONObject threatStatCount(String appId, List<String> manufacturer, List<String> location,
      List<String> osVersion,
      List<String> appVersion, Long startTime, Long endTime, String threatType);

  /**
   * 按照地域、设备、系统、应用版本统计次数和设备数目.cd
   */
  public JSONObject threatStat(String appId, List<String> manufacturer, List<String> location,
      List<String> osVersion,
      List<String> appVersion, Long startTime, Long endTime, String threatType, String count_type, String dist_type);

  /**
   * 威胁策略统计.
   */
  public JSONObject threatPlotCount(String appId, List<String> manufacturer, List<String> location,
      List<String> osVersion,
      List<String> appVersion, Long startTime, Long endTime, String threatType);

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.entity.User;
import java.text.ParseException;
import java.util.List;

/**
 * author email: yongjin.pan@bangcle.com
 *
 * @version time: 下午3:39 17-11-10.
 */
public interface UserService {

  public User findByEmail(String email);

  public User findByName(String name);

  public User findById(Integer userId);

  public JSONObject getUserList();

  public JSONObject getAppList(User user);

  public void add(User user);

  public JSONObject userCreate(List<Integer> listApps, String userName, String email,
      String password, Integer roleId);

  public JSONObject userUpdate(Integer userId, List<Integer> listApps, String userName,
      String email, String password, Integer roleId)
      throws ParseException;

  public void userDelete(Integer userId) throws ParseException;

  public JSONObject getUserInfo(Integer userId) throws ParseException;

  public boolean isSuperAdmin(User user);

  public boolean isAdmin(User user);

  public boolean isOperator(User user);

  public boolean isAuditor(User user);

}
package com.bangcle.thread;

import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonBaseService;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import javafx.util.Pair;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.reindex.BulkByScrollResponse;
import org.elasticsearch.index.reindex.DeleteByQueryAction;
import org.elasticsearch.index.reindex.DeleteByQueryRequestBuilder;

/**
 * Created by zhusiwei on 2018/1/30.
 */
@Slf4j
public class CleanESDocThread implements Runnable {

  public static LinkedBlockingQueue<Pair<String, Map<String, Object>>> cleanDoc = new LinkedBlockingQueue(
      100);
  private EsRepository es = null;
  private CommonBaseService commonBaseService = null;

  public CleanESDocThread(EsRepository es, CommonBaseService commonBaseService) {
    this.es = es;
    this.commonBaseService = commonBaseService;
  }

  @Override
  public void run() {
    log.info("CleanESDocThread start ...");
    while (true) {
      try {
        Pair<String, Map<String, Object>> info = cleanDoc.take();
        String index = info.getKey();
        Map<String, Object> filterMap = info.getValue();
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        commonBaseService.filterQueryBuilder(filterMap, boolQueryBuilder);
        DeleteByQueryRequestBuilder deleteByQueryRequestBuilder = DeleteByQueryAction.INSTANCE
            .newRequestBuilder(es.client)
            .filter(boolQueryBuilder)
            .source(index);
        BulkByScrollResponse response = deleteByQueryRequestBuilder.get();
        long del = response.getDeleted();
        log.info("del from index [{}] total = {} , filter by {}", index, del, boolQueryBuilder);
      } catch (InterruptedException e) {
        log.error("error", e);
      }
    }
  }
}
package com.bangcle.thread;

import static java.lang.Thread.sleep;

import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.ReportSubtaskManageRepository;
import com.bangcle.service.ReportGenerateService;
import com.bangcle.util.ParaUtils;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.LinkedBlockingQueue;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/4/27.
 */
@Service
@Slf4j
public class CreatReportThread {

  @Autowired
  private ReportGenerateService reportGenerateService;

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;

  @Autowired
  private EsRepository es;

  public static LinkedBlockingQueue<Integer> subTaskId = new LinkedBlockingQueue(100);

  public void doJob() {
    new Thread() {
      @Override
      public void run() {
        while (true) {
          creatReport();
        }
      }
    }.start();
  }

  public void creatReport() {
    try {
      Integer subTaskId = this.subTaskId.take();
      if (ParaUtils.ES_STATUS_GREEN) {
        reportGenerateService.genDataFromId(subTaskId);
        boolean isSucceed = reportGenerateService.genReportFromId(subTaskId);
        ReportSubTaskManage reportSubTaskManage = reportSubtaskManageRepository.findById(subTaskId);
        if (isSucceed) {
          reportSubTaskManage.setNumStatus(1);
        } else {
          reportSubTaskManage.setNumStatus(0);
        }
        reportSubtaskManageRepository.save(reportSubTaskManage);
      } else {
        sleep(1000);
      }

    } catch (Exception e) {
      log.error("error",e);
    }
  }
}
package com.bangcle.thread;

import com.bangcle.entity.ReportSubTaskManage;
import com.bangcle.repository.ReportSubtaskManageRepository;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by zhusiwei on 2018/4/27.
 */
@Service
@Slf4j
public class PushSubReportTaskThread {

  @Autowired
  private ReportSubtaskManageRepository reportSubtaskManageRepository;
  SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  boolean needScan = true;

  public void doJob() {
    new Thread() {
      @Override
      public void run() {
        Calendar calendar = Calendar.getInstance();
        String newDate = simpleDateFormat.format(calendar.getTime());
        pushSubTaskId(newDate, new Integer[]{0});
        while (true) {
          calendar = Calendar.getInstance();
          log.info("calendar.HOUR_OF_DAY = {}  needScan = {}", calendar.get(Calendar.HOUR_OF_DAY),
              needScan);
          if (calendar.get(Calendar.HOUR_OF_DAY) == 0 && needScan) {
            newDate = simpleDateFormat.format(calendar.getTime());
            pushSubTaskId(newDate, new Integer[]{0});
            needScan = false;
          } else if (calendar.get(Calendar.HOUR_OF_DAY) != 0) {
            needScan = true;
          }
          log.info("CreatReportThread.subTaskId = {}", CreatReportThread.subTaskId);
          try {
            Thread.sleep(1000 * 60 * 60);
          } catch (InterruptedException e) {
            log.error("error", e);
          }
        }
      }
    }.start();
  }

  public void pushSubTaskOnce() {
    new Thread() {
      @Override
      public void run() {
        Calendar calendar = Calendar.getInstance();
        String newDate = simpleDateFormat.format(calendar.getTime());
        Integer[] subTastIds = {0};
        pushSubTaskId(newDate, subTastIds);
        log.info("CreatReportThread.subTaskId = {}", CreatReportThread.subTaskId.toString());
      }
    }.start();
  }

  public void pushSubTaskId(String newDate, Integer[] subTaskIds) {
    List<ReportSubTaskManage> subTasks = reportSubtaskManageRepository
        .findSubTaskId(newDate, subTaskIds);
    for (ReportSubTaskManage subTask : subTasks) {
      try {
        if (CreatReportThread.subTaskId.contains(subTask.getId())) {
          continue;
        }
        CreatReportThread.subTaskId.put(subTask.getId());
      } catch (InterruptedException e) {
        log.error("error", e);
      }
    }
  }
}package com.bangcle.util;

import java.security.Key;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;

@Slf4j
public class AESUtils {

  private static Cipher cipher;
  private static final String algorithmStr = "AES/ECB/PKCS5Padding";
  private static String keyStr = "2Emo9G+XrLw2yJvT9OtCAg==";

  static {
    try {
      //初始化cipher
      cipher = Cipher.getInstance(algorithmStr);
    } catch (Exception e) {
      log.error("error", e);
    }
  }


  public static String Encrypt(String content) {
    byte[] encryptedBytes = null;

    Key key = new SecretKeySpec(Base64.getDecoder().decode(keyStr), "AES");
    try {
      cipher.init(Cipher.ENCRYPT_MODE, key);
      encryptedBytes = cipher.doFinal(PubFunc.StringToBytes(content));
    } catch (Exception e) {
      log.error("error", e);
    }
    return PubFunc.BytesToString(Base64.getEncoder().encode(encryptedBytes));
  }

  public static String Decrypt(String content) {
    byte[] originBytes = null;

    Key key = new SecretKeySpec(Base64.getDecoder().decode(keyStr), "AES");
    try {
      cipher.init(Cipher.DECRYPT_MODE, key);
      originBytes = cipher.doFinal(Base64.getDecoder().decode(content));
    } catch (Exception e) {
      log.error("error", e);
    }
    return PubFunc.BytesToString(originBytes);
  }

  // 和mssp的解密，采取16位长度的key，解密算法采用 AES/ECB/NoPadding
  // 加密后转为字符串的方式为把字节数组转换成16进制的字符串
  public static String msspDecrypt(String content, String key) {
    Key key2 = new SecretKeySpec(key.getBytes(), "AES");
    byte[] originBytes = null;
    try {
      Cipher cipher1 = Cipher.getInstance("AES/ECB/NoPadding");
      cipher1.init(Cipher.DECRYPT_MODE, key2);
      byte[] decryptBytes = DatatypeConverter.parseHexBinary(content);
      originBytes = cipher1.doFinal(decryptBytes);
    } catch (Exception e) {
      log.error("error", e);
    }
    return originBytes == null ? "" : PubFunc.BytesToString(originBytes);
  }

  // mssp数据加密
  public static String msspEncrypt(String content, String key) {
    Key key2 = new SecretKeySpec(key.getBytes(), "AES");
    byte[] encryptedBytes = null;
    byte[] contentBytes = content.getBytes();
    char[] chars = {};
    try {
      Cipher cipher1 = Cipher.getInstance("AES/ECB/NoPadding");
      cipher1.init(Cipher.ENCRYPT_MODE, key2);
      // 字节数组，数组的长度必须补充到为16的的整数倍
      int len = content.getBytes().length % 16;
      byte[] addBytes = null;
      if (len > 0) {
        addBytes = new byte[16 - len];
        int aLen = addBytes.length;
        for (int i = 0; i < aLen; i++) {
          addBytes[i] = 0;
        }
        int cLen = contentBytes.length;
        byte[] allBytes = new byte[cLen + aLen];
        System.arraycopy(contentBytes, 0, allBytes, 0, cLen);
        System.arraycopy(addBytes, 0, allBytes, cLen, aLen);
        contentBytes = allBytes;
      }
      encryptedBytes = cipher1.doFinal(contentBytes);
      chars = Hex.encodeHex(encryptedBytes);
    } catch (Exception e) {
      log.error("error", e);
    }
    return new String(chars);
  }

  public static byte[] parseHexStr2Byte(String hexStr) {
    if (hexStr.length() < 1) {
      return null;
    }
    byte[] result = new byte[hexStr.length() / 2];
    for (int i = 0; i < hexStr.length() / 2; i++) {
      int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
      int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2), 16);
      result[i] = (byte) (high * 16 + low);
    }
    return result;
  }
}
// Copyright (c) 2006 Damien Miller <djm@mindrot.org>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// jbcrypt 直接从官网那个获得，这里直接引入代码使用


package com.bangcle.util;

import java.io.UnsupportedEncodingException;
import java.security.SecureRandom;

public class BCrypt {

  // BCrypt parameters
  private static final int GENSALT_DEFAULT_LOG2_ROUNDS = 10;
  private static final int BCRYPT_SALT_LEN = 16;

  // Blowfish parameters
  private static final int BLOWFISH_NUM_ROUNDS = 16;

  // Initial contents of key schedule
  private static final int[] P_orig = {
      0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
      0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
      0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
      0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
      0x9216d5d9, 0x8979fb1b
  };
  private static final int[] S_orig = {
      0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,
      0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
      0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
      0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
      0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
      0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
      0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,
      0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
      0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
      0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
      0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,
      0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
      0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,
      0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
      0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
      0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
      0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,
      0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
      0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,
      0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
      0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
      0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
      0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,
      0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
      0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
      0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
      0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
      0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
      0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,
      0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
      0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,
      0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
      0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
      0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
      0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
      0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
      0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,
      0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
      0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
      0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
      0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,
      0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
      0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,
      0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
      0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
      0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
      0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,
      0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
      0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,
      0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
      0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
      0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
      0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,
      0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
      0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,
      0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
      0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
      0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
      0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,
      0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
      0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,
      0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
      0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
      0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,
      0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,
      0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
      0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
      0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
      0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
      0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
      0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,
      0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
      0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
      0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
      0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
      0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
      0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,
      0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
      0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
      0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
      0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,
      0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
      0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,
      0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
      0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
      0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
      0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,
      0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
      0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,
      0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
      0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
      0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
      0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,
      0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
      0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,
      0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
      0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
      0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
      0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
      0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
      0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,
      0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
      0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
      0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
      0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
      0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
      0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,
      0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
      0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
      0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
      0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,
      0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
      0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,
      0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
      0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
      0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
      0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,
      0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
      0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,
      0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
      0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
      0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
      0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,
      0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
      0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,
      0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
      0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
      0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,
      0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
      0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
      0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
      0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
      0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,
      0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
      0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
      0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,
      0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
      0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
      0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,
      0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
      0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,
      0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,
      0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
      0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
      0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,
      0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
      0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,
      0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,
      0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
      0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
      0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,
      0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
      0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,
      0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
      0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
      0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
      0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,
      0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
      0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
      0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
      0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
      0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
      0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,
      0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
      0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
      0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,
      0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
      0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
      0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,
      0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
      0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,
      0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,
      0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
      0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
      0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,
      0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
      0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,
      0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,
      0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
      0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
      0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,
      0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
      0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,
      0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,
      0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
      0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
      0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,
      0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
      0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,
      0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
      0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
      0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,
      0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,
      0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,
      0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
      0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,
      0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,
      0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
      0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,
      0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
      0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
      0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,
      0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,
      0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
      0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,
      0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,
      0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
      0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
      0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,
      0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
      0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,
      0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,
      0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
      0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,
      0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,
      0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
      0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,
      0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
      0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
      0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
      0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,
      0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
      0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,
      0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,
      0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
      0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,
      0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,
      0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
      0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,
      0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
      0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
      0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
      0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,
      0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
      0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,
      0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,
      0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
      0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,
      0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,
      0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
      0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,
      0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,
      0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
      0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,
      0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,
      0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
      0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,
      0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,
      0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
      0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
      0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,
      0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
      0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,
      0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,
      0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
      0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
  };

  // bcrypt IV: "OrpheanBeholderScryDoubt". The C implementation calls
  // this "ciphertext", but it is really plaintext or an IV. We keep
  // the name to make code comparison easier.
  private static final int[] bf_crypt_ciphertext = {
      0x4f727068, 0x65616e42, 0x65686f6c,
      0x64657253, 0x63727944, 0x6f756274
  };

  // Table for Base64 encoding
  private static final char[] base64_code = {
      '.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
      'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
      'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
      'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
      'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',
      '6', '7', '8', '9'
  };

  // Table for Base64 decoding
  private static final byte[] index_64 = {
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,
      56, 57, 58, 59, 60, 61, 62, 63, -1, -1,
      -1, -1, -1, -1, -1, 2, 3, 4, 5, 6,
      7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
      -1, -1, -1, -1, -1, -1, 28, 29, 30,
      31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
      41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
      51, 52, 53, -1, -1, -1, -1, -1
  };

  // Expanded Blowfish key
  private int[] numsP;
  private int[] numsS;

  /**
   * Encode a byte array using bcrypt's slightly-modified base64 encoding scheme. Note that this is
   * *not* compatible with the standard MIME-base64 encoding.
   *
   * @param d the byte array to encode
   * @param len the number of bytes to encode
   * @return base64-encoded string
   * @throws IllegalArgumentException if the length is invalid
   */
  private static String encode_base64(byte[] d, int len)
      throws IllegalArgumentException {
    int off = 0;
    StringBuffer rs = new StringBuffer();
    int c1;
    int c2;

    if (len <= 0 || len > d.length) {
      throw new IllegalArgumentException("Invalid len");
    }

    while (off < len) {
      c1 = d[off++] & 0xff;
      rs.append(base64_code[(c1 >> 2) & 0x3f]);
      c1 = (c1 & 0x03) << 4;
      if (off >= len) {
        rs.append(base64_code[c1 & 0x3f]);
        break;
      }
      c2 = d[off++] & 0xff;
      c1 |= (c2 >> 4) & 0x0f;
      rs.append(base64_code[c1 & 0x3f]);
      c1 = (c2 & 0x0f) << 2;
      if (off >= len) {
        rs.append(base64_code[c1 & 0x3f]);
        break;
      }
      c2 = d[off++] & 0xff;
      c1 |= (c2 >> 6) & 0x03;
      rs.append(base64_code[c1 & 0x3f]);
      rs.append(base64_code[c2 & 0x3f]);
    }
    return rs.toString();
  }

  /**
   * Look up the 3 bits base64-encoded by the specified character, range-checking againt conversion
   * table
   * param x the base64-encoded value
   * return the decoded value of x.
   */
  private static byte char64(char x) {
    if ((int) x < 0 || (int) x > index_64.length) {
      return -1;
    }
    return index_64[(int) x];
  }

  /**
   * Decode a string encoded using bcrypt's base64 scheme to a byte array. Note that this is *not*
   * compatible with the standard MIME-base64 encoding.
   *
   * @param s the string to decode
   * @param maxolen the maximum number of bytes to decode
   * @return an array containing the decoded bytes
   * @throws IllegalArgumentException if maxolen is invalid
   */
  private static byte[] decode_base64(String s, int maxolen)
      throws IllegalArgumentException {
    StringBuffer rs = new StringBuffer();
    int off = 0;
    int slen = s.length();
    int olen = 0;
    byte[] ret;
    byte c1;
    byte c2;
    byte c3;
    byte c4;
    byte o;

    if (maxolen <= 0) {
      throw new IllegalArgumentException("Invalid maxolen");
    }

    while (off < slen - 1 && olen < maxolen) {
      c1 = char64(s.charAt(off++));
      c2 = char64(s.charAt(off++));
      if (c1 == -1 || c2 == -1) {
        break;
      }
      o = (byte) (c1 << 2);
      o |= (c2 & 0x30) >> 4;
      rs.append((char) o);
      if (++olen >= maxolen || off >= slen) {
        break;
      }
      c3 = char64(s.charAt(off++));
      if (c3 == -1) {
        break;
      }
      o = (byte) ((c2 & 0x0f) << 4);
      o |= (c3 & 0x3c) >> 2;
      rs.append((char) o);
      if (++olen >= maxolen || off >= slen) {
        break;
      }
      c4 = char64(s.charAt(off++));
      o = (byte) ((c3 & 0x03) << 6);
      o |= c4;
      rs.append((char) o);
      ++olen;
    }

    ret = new byte[olen];
    for (off = 0; off < olen; off++) {
      ret[off] = (byte) rs.charAt(off);
    }
    return ret;
  }

  /**
   * Blowfish encipher a single 64-bit block encoded as two 32-bit halves
   * param lr an array containing the two 32-bit half blocks
   * param off the position in the array of the blocks.
   */
  private final void encipher(int[] lr, int off) {
    int i;
    int n;
    int l = lr[off];
    int r = lr[off + 1];

    l ^= numsP[0];
    for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {
      // Feistel substitution on left word
      n = numsS[(l >> 24) & 0xff];
      n += numsS[0x100 | ((l >> 16) & 0xff)];
      n ^= numsS[0x200 | ((l >> 8) & 0xff)];
      n += numsS[0x300 | (l & 0xff)];
      r ^= n ^ numsP[++i];

      // Feistel substitution on right word
      n = numsS[(r >> 24) & 0xff];
      n += numsS[0x100 | ((r >> 16) & 0xff)];
      n ^= numsS[0x200 | ((r >> 8) & 0xff)];
      n += numsS[0x300 | (r & 0xff)];
      l ^= n ^ numsP[++i];
    }
    lr[off] = r ^ numsP[BLOWFISH_NUM_ROUNDS + 1];
    lr[off + 1] = l;
  }

  /**
   * Cycically extract a word of key material
   * param data the string to extract the data from
   * param offp a "pointer" (as a one-entry array) to the current offset into data
   * return the next word of material from data.
   */
  private static int streamtoword(byte[] data, int[] offp) {
    int i;
    int word = 0;
    int off = offp[0];

    for (i = 0; i < 4; i++) {
      word = (word << 8) | (data[off] & 0xff);
      off = (off + 1) % data.length;
    }

    offp[0] = off;
    return word;
  }

  /**
   * Initialise the Blowfish key schedule.
   */
  private void init_key() {
    numsP = (int[]) P_orig.clone();
    numsS = (int[]) S_orig.clone();
  }

  /**
   * Key the Blowfish cipher
   * param key an array containing the key.
   */
  private void key(byte[] key) {
    int i;
    int[] koffp = {0};
    int[] lr = {0, 0};
    int plen = numsP.length;
    int slen = numsS.length;

    for (i = 0; i < plen; i++) {
      numsP[i] = numsP[i] ^ streamtoword(key, koffp);
    }

    for (i = 0; i < plen; i += 2) {
      encipher(lr, 0);
      numsP[i] = lr[0];
      numsP[i + 1] = lr[1];
    }

    for (i = 0; i < slen; i += 2) {
      encipher(lr, 0);
      numsS[i] = lr[0];
      numsS[i + 1] = lr[1];
    }
  }

  /**
   * Perform the "enhanced key schedule" step described by Provos and Mazieres in "A
   * Future-Adaptable Password Scheme" http://www.openbsd.org/papers/bcrypt-paper.ps
   *
   * @param data salt information
   * @param key password information
   */
  private void ekskey(byte[] data, byte[] key) {
    int i;
    int[] koffp = {0};
    int[] doffp = {0};
    int[] lr = {0, 0};
    int plen = numsP.length;
    int slen = numsS.length;

    for (i = 0; i < plen; i++) {
      numsP[i] = numsP[i] ^ streamtoword(key, koffp);
    }

    for (i = 0; i < plen; i += 2) {
      lr[0] ^= streamtoword(data, doffp);
      lr[1] ^= streamtoword(data, doffp);
      encipher(lr, 0);
      numsP[i] = lr[0];
      numsP[i + 1] = lr[1];
    }

    for (i = 0; i < slen; i += 2) {
      lr[0] ^= streamtoword(data, doffp);
      lr[1] ^= streamtoword(data, doffp);
      encipher(lr, 0);
      numsS[i] = lr[0];
      numsS[i + 1] = lr[1];
    }
  }

  /**
   * Perform the central password hashing step in the bcrypt scheme
   * param password the password to hash
   * param salt the binary salt to hash with the password
   * param log_rounds the binary logarithm of the number of rounds of hashing to apply
   * param cdata the plaintext to encrypt
   * return an array containing the binary hashed password.
   */
  public byte[] crypt_raw(byte[] password, byte[] salt, int logRounds,
      int[] cdata) {
    int rounds;
    int j;
    int clen = cdata.length;

    if (logRounds < 4 || logRounds > 30) {
      throw new IllegalArgumentException("Bad number of rounds");
    }
    rounds = 1 << logRounds;
    if (salt.length != BCRYPT_SALT_LEN) {
      throw new IllegalArgumentException("Bad salt length");
    }

    int i;
    init_key();
    ekskey(salt, password);
    for (i = 0; i != rounds; i++) {
      key(password);
      key(salt);
    }

    for (i = 0; i < 64; i++) {
      for (j = 0; j < (clen >> 1); j++) {
        encipher(cdata, j << 1);
      }
    }

    byte[] ret;
    ret = new byte[clen * 4];
    for (i = 0, j = 0; i < clen; i++) {
      ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);
      ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);
      ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);
      ret[j++] = (byte) (cdata[i] & 0xff);
    }
    return ret;
  }

  /**
   * Hash a password using the OpenBSD bcrypt scheme
   * param password the password to hash
   * param salt the salt to hash with (perhaps generated using BCrypt.gensalt)
   * return the hashed password.
   */
  public static String hashpw(String password, String salt) {
    byte[] passwordb;

    char minor = (char) 0;
    int off = 0;

    if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {
      throw new IllegalArgumentException("Invalid salt version");
    }
    if (salt.charAt(2) == '$') {
      off = 3;
    } else {
      minor = salt.charAt(2);
      if (minor != 'a' || salt.charAt(3) != '$') {
        throw new IllegalArgumentException("Invalid salt revision");
      }
      off = 4;
    }

    // Extract number of rounds
    if (salt.charAt(off + 2) > '$') {
      throw new IllegalArgumentException("Missing salt rounds");
    }

    try {
      passwordb = (password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");
    } catch (UnsupportedEncodingException uee) {
      throw new AssertionError("UTF-8 is not supported");
    }

    StringBuffer rs = new StringBuffer();

    rs.append("$2");
    int rounds = Integer.parseInt(salt.substring(off, off + 2));
    if (minor >= 'a') {
      rs.append(minor);
    }
    rs.append("$");
    if (rounds < 10) {
      rs.append("0");
    }
    if (rounds > 30) {
      throw new IllegalArgumentException(
          "rounds exceeds maximum (30)");
    }
    BCrypt bcRypt = new BCrypt();
    String strRealSalt = salt.substring(off + 3, off + 25);
    byte[] saltb = decode_base64(strRealSalt, BCRYPT_SALT_LEN);
    byte[] hashed = bcRypt.crypt_raw(passwordb, saltb, rounds,
        (int[]) bf_crypt_ciphertext.clone());
    rs.append(Integer.toString(rounds));
    rs.append("$");
    rs.append(encode_base64(saltb, saltb.length));
    rs.append(encode_base64(hashed,
        bf_crypt_ciphertext.length * 4 - 1));
    return rs.toString();
  }

  /**
   * Generate a salt for use with the BCrypt.hashpw() method
   * param log_rounds the log2 of the number of rounds of hashing to apply - the work factor
   * therefore increases as 2**log_rounds.
   * param random an instance of SecureRandom to use
   * return an encoded salt value.
   */
  public static String gensalt(int logRounds, SecureRandom random) {
    StringBuffer rs = new StringBuffer();
    byte[] rnd = new byte[BCRYPT_SALT_LEN];

    random.nextBytes(rnd);

    rs.append("$2a$");
    if (logRounds < 10) {
      rs.append("0");
    }
    if (logRounds > 30) {
      throw new IllegalArgumentException(
          "log_rounds exceeds maximum (30)");
    }
    rs.append(Integer.toString(logRounds));
    rs.append("$");
    rs.append(encode_base64(rnd, rnd.length));
    return rs.toString();
  }

  /**
   * Generate a salt for use with the BCrypt.hashpw() method
   * param log_rounds the log2 of the number of rounds of hashing to apply - the work factor
   * therefore increases as 2**log_rounds
   * return an encoded salt value.
   */
  public static String gensalt(int logRounds) {
    return gensalt(logRounds, new SecureRandom());
  }

  /**
   * Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable default for the
   * number of hashing rounds to apply
   *
   * @return an encoded salt value
   */
  public static String gensalt() {
    return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);
  }

  /**
   * Check that a plaintext password matches a previously hashed one
   * param plaintext the plaintext password to verify
   * param hashed the previously-hashed password
   * return true if the passwords match, false otherwise.
   */
  public static boolean checkpw(String plaintext, String hashed) {
    byte[] bytesHashed;
    byte[] bytesTry;
    try {
      String strTrypw = hashpw(plaintext, hashed);
      bytesHashed = hashed.getBytes("UTF-8");
      bytesTry = strTrypw.getBytes("UTF-8");
    } catch (UnsupportedEncodingException uee) {
      return false;
    }
    if (bytesHashed.length != bytesTry.length) {
      return false;
    }
    byte ret = 0;
    for (int i = 0; i < bytesTry.length; i++) {
      ret |= bytesHashed[i] ^ bytesTry[i];
    }
    return ret == 0;
  }
}
package com.bangcle.util;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午6:08 17-10-25
 * description: 根据前端返回参数判断所选时间.
 */
public class DateParam {

  public static final String TODAY = "0";
  public static final String YESTERDAY = "1";


}
package com.bangcle.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class HuaweiLoginUtil
{
    
    public enum Module
    {
        STORM("StormClient"), KAFKA("KafkaClient"), ZOOKEEPER("Client");
        
        private String name;
        
        private Module(String name)
        {
            this.name = name;
        }
        
        public String getName()
        {
            return name;
        }
    }
    
    /**
     * line operator string
     */
    private static final String LINE_SEPARATOR = System.getProperty("line.separator");
    
    /**
     * jaas file postfix
     */
    private static final String JAAS_POSTFIX = ".jaas.conf";
    
    /**
     * is IBM jdk or not
     */
    private static final boolean IS_IBM_JDK = System.getProperty("java.vendor").contains("IBM");
    
    /**
     * IBM jdk login module
     */
    private static final String IBM_LOGIN_MODULE = "com.ibm.security.auth.module.Krb5LoginModule required";
    
    /**
     * oracle jdk login module
     */
    private static final String SUN_LOGIN_MODULE = "com.sun.security.auth.module.Krb5LoginModule required";
    
    /**
     * Zookeeper quorum principal.
     */
    public static final String ZOOKEEPER_AUTH_PRINCIPAL = "zookeeper.server.principal";
    
    /**
     * java security krb5 file path
     */
    public static final String JAVA_SECURITY_KRB5_CONF = "java.security.krb5.conf";
    
    /**
     * java security login file path
     */
    public static final String JAVA_SECURITY_LOGIN_CONF = "java.security.auth.login.config";
    
    /**
     * 设置jaas.conf文件
     * 
     * @param principal
     * @param keytabPath
     * @throws IOException
     */
    public static void setJaasFile(String principal, String keytabPath)
        throws IOException
    {
        String jaasPath =
            new File(System.getProperty("java.io.tmpdir")) + File.separator + System.getProperty("user.name")
                + JAAS_POSTFIX;

        // windows路径下分隔符替换
        jaasPath = jaasPath.replace("\\", "\\\\");
        // 删除jaas文件
        deleteJaasFile(jaasPath);
        writeJaasFile(jaasPath, principal, keytabPath);
        System.setProperty(JAVA_SECURITY_LOGIN_CONF, jaasPath);
    }
    
    /**
     * 设置zookeeper服务端principal
     * 
     * @param zkServerPrincipal
     * @throws IOException
     */
    public static void setZookeeperServerPrincipal(String zkServerPrincipal)
        throws IOException
    {
        System.setProperty(ZOOKEEPER_AUTH_PRINCIPAL, zkServerPrincipal);
        String ret = System.getProperty(ZOOKEEPER_AUTH_PRINCIPAL);
        if (ret == null)
        {
            throw new IOException(ZOOKEEPER_AUTH_PRINCIPAL + " is null.");
        }
        if (!ret.equals(zkServerPrincipal))
        {
            throw new IOException(ZOOKEEPER_AUTH_PRINCIPAL + " is " + ret + " is not " + zkServerPrincipal + ".");
        }
    }
    
    /**
     * 设置krb5文件
     * 
     * @param krb5ConfFile
     * @throws IOException
     */
    public static void setKrb5Config(String krb5ConfFile)
        throws IOException
    {
        System.setProperty(JAVA_SECURITY_KRB5_CONF, krb5ConfFile);
        String ret = System.getProperty(JAVA_SECURITY_KRB5_CONF);
        if (ret == null)
        {
            throw new IOException(JAVA_SECURITY_KRB5_CONF + " is null.");
        }
        if (!ret.equals(krb5ConfFile))
        {
            throw new IOException(JAVA_SECURITY_KRB5_CONF + " is " + ret + " is not " + krb5ConfFile + ".");
        }
    }
    
    /**
     * 写入jaas文件
     * 
     * @throws IOException
     *             写文件异常
     */
    private static void writeJaasFile(String jaasPath, String principal, String keytabPath)
        throws IOException
    {
        FileWriter writer = new FileWriter(new File(jaasPath));
        try
        {
            writer.write(getJaasConfContext(principal, keytabPath));
            writer.flush();
        }
        catch (IOException e)
        {
            throw new IOException("Failed to create jaas.conf File");
        }
        finally
        {
            writer.close();
        }
    }
    
    private static void deleteJaasFile(String jaasPath)
        throws IOException
    {
        File jaasFile = new File(jaasPath);
        if (jaasFile.exists())
        {
            if (!jaasFile.delete())
            {
                throw new IOException("Failed to delete exists jaas file.");
            }
        }
    }
    
    private static String getJaasConfContext(String principal, String keytabPath)
    {
        Module[] allModule = Module.values();
        StringBuilder builder = new StringBuilder();
        for (Module modlue : allModule)
        {
            builder.append(getModuleContext(principal, keytabPath, modlue));
        }
        return builder.toString();
    }
    
    private static String getModuleContext(String userPrincipal, String keyTabPath, Module module)
    {
        StringBuilder builder = new StringBuilder();
        if (IS_IBM_JDK)
        {
            builder.append(module.getName()).append(" {").append(LINE_SEPARATOR);
            builder.append(IBM_LOGIN_MODULE).append(LINE_SEPARATOR);
            builder.append("credsType=both").append(LINE_SEPARATOR);
            builder.append("principal=\"" + userPrincipal + "\"").append(LINE_SEPARATOR);
            builder.append("useKeytab=\"" + keyTabPath + "\"").append(LINE_SEPARATOR);
            builder.append("debug=true;").append(LINE_SEPARATOR);
            builder.append("};").append(LINE_SEPARATOR);
        }
        else
        {
            builder.append(module.getName()).append(" {").append(LINE_SEPARATOR);
            builder.append(SUN_LOGIN_MODULE).append(LINE_SEPARATOR);
            builder.append("useKeyTab=true").append(LINE_SEPARATOR);
            builder.append("keyTab=\"" + keyTabPath + "\"").append(LINE_SEPARATOR);
            builder.append("principal=\"" + userPrincipal + "\"").append(LINE_SEPARATOR);
            builder.append("useTicketCache=false").append(LINE_SEPARATOR);
            builder.append("storeKey=true").append(LINE_SEPARATOR);
            builder.append("debug=true;").append(LINE_SEPARATOR);
            builder.append("};").append(LINE_SEPARATOR);
        }
        
        return builder.toString();
    }
    
    public static void main(String[] args)
    {
        System.out.println(getJaasConfContext("123", "456"));
    }
}
package com.bangcle.util;

import com.bangcle.util.HuaweiLoginUtil.Module;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.security.authentication.util.KerberosUtil;

@Slf4j
public class LoginUtil
{

    /**
     * line operator string
     */
    private static final String LINE_SEPARATOR = System.getProperty("line.separator");

    /**
     * jaas file postfix
     */
    private static final String JAAS_POSTFIX = ".jaas.conf";

    /**
     * is IBM jdk or not
     */
    private static final boolean IS_IBM_JDK = System.getProperty("java.vendor").contains("IBM");

    /**
     * IBM jdk login module
     */
    private static final String IBM_LOGIN_MODULE = "com.ibm.security.auth.module.Krb5LoginModule required";

    /**
     * oracle jdk login module
     */
    private static final String SUN_LOGIN_MODULE = "com.sun.security.auth.module.Krb5LoginModule required";

    /**
     * Zookeeper quorum principal.
     */
    public static final String ZOOKEEPER_AUTH_PRINCIPAL = "zookeeper.server.principal";

    /**
     * java security krb5 file path
     */
    public static final String JAVA_SECURITY_KRB5_CONF = "java.security.krb5.conf";

    /**
     * java security login file path
     */
    public static final String JAVA_SECURITY_LOGIN_CONF = "java.security.auth.login.config";

    private static final String JAVA_SECURITY_KRB5_CONF_KEY = "java.security.krb5.conf";

    private static final String LOGIN_FAILED_CAUSE_PASSWORD_WRONG =
        "(wrong password) keytab file and user not match, you can kinit -k -t keytab user in client server to check";

    private static final String LOGIN_FAILED_CAUSE_TIME_WRONG =
        "(clock skew) time of local server and remote server not match, please check ntp to remote server";

    private static final String LOGIN_FAILED_CAUSE_AES256_WRONG =
        "(aes256 not support) aes256 not support by default jdk/jre, need copy local_policy.jar and US_export_policy.jar from remote server in path /opt/huawei/Bigdata/jdk/jre/lib/security";

    private static final String LOGIN_FAILED_CAUSE_PRINCIPAL_WRONG =
        "(no rule) principal format not support by default, need add property hadoop.security.auth_to_local(in core-site.xml) value RULE:[1:$1] RULE:[2:$1]";

    private static final String LOGIN_FAILED_CAUSE_TIME_OUT =
        "(time out) can not connect to kdc server or there is fire wall in the network";

    public synchronized static void login(String userPrincipal, String userKeytabPath, String krb5ConfPath, Configuration conf)
        throws IOException
    {
        // 1.check input parameters
        if ((userPrincipal == null) || (userPrincipal.length() <= 0))
        {
            log.error("input userPrincipal is invalid.");
            throw new IOException("input userPrincipal is invalid.");
        }

        if ((userKeytabPath == null) || (userKeytabPath.length() <= 0))
        {
            log.error("input userKeytabPath is invalid.");
            throw new IOException("input userKeytabPath is invalid.");
        }

        if ((krb5ConfPath == null) || (krb5ConfPath.length() <= 0))
        {
            log.error("input krb5ConfPath is invalid.");
            throw new IOException("input krb5ConfPath is invalid.");
        }

        if ((conf == null))
        {
            log.error("input conf is invalid.");
            throw new IOException("input conf is invalid.");
        }

        // 2.check file exsits
        File userKeytabFile = new File(userKeytabPath);
        if (!userKeytabFile.exists())
        {
            log.error("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") does not exsit.");
            throw new IOException("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") does not exsit.");
        }
        if (!userKeytabFile.isFile())
        {
            log.error("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") is not a file.");
            throw new IOException("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") is not a file.");
        }

        File krb5ConfFile = new File(krb5ConfPath);
        if (!krb5ConfFile.exists())
        {
            log.error("krb5ConfFile(" + krb5ConfFile.getAbsolutePath() + ") does not exsit.");
            throw new IOException("krb5ConfFile(" + krb5ConfFile.getAbsolutePath() + ") does not exsit.");
        }
        if (!krb5ConfFile.isFile())
        {
            log.error("krb5ConfFile(" + krb5ConfFile.getAbsolutePath() + ") is not a file.");
            throw new IOException("krb5ConfFile(" + krb5ConfFile.getAbsolutePath() + ") is not a file.");
        }

        // 3.set and check krb5config
        setKrb5Config(krb5ConfFile.getAbsolutePath());
        setConfiguration(conf);

        // 4.login and check for hadoop
        loginHadoop(userPrincipal, userKeytabFile.getAbsolutePath());
    }

    private static void setConfiguration(Configuration conf) throws IOException {
	    UserGroupInformation.setConfiguration(conf);
    }

    private static boolean checkNeedLogin(String principal)
        throws IOException
    {
        if (!UserGroupInformation.isSecurityEnabled())
        {
            log.error("UserGroupInformation is not SecurityEnabled, please check if core-site.xml exists in classpath.");
            throw new IOException(
                "UserGroupInformation is not SecurityEnabled, please check if core-site.xml exists in classpath.");
        }
        UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
        if ((currentUser != null) && (currentUser.hasKerberosCredentials()))
        {
            if (checkCurrentUserCorrect(principal))
            {
                log.info("current user is " + currentUser + "has logined.");
                if (!currentUser.isFromKeytab())
                {
                    log.error("current user is not from keytab.");
                    throw new IOException("current user is not from keytab.");
                }
                return false;
            }
            else
            {
                log.error("current user is " + currentUser + "has logined. please check your enviroment , especially when it used IBM JDK or kerberos for OS count login!!");
                throw new IOException("current user is " + currentUser + " has logined. And please check your enviroment!!");
            }
        }

        return true;
    }

    public static void setKrb5Config(String krb5ConfFile)
        throws IOException
    {
        System.setProperty(JAVA_SECURITY_KRB5_CONF_KEY, krb5ConfFile);
        String ret = System.getProperty(JAVA_SECURITY_KRB5_CONF_KEY);
        if (ret == null)
        {
            log.error(JAVA_SECURITY_KRB5_CONF_KEY + " is null.");
            throw new IOException(JAVA_SECURITY_KRB5_CONF_KEY + " is null.");
        }
        if (!ret.equals(krb5ConfFile))
        {
            log.error(JAVA_SECURITY_KRB5_CONF_KEY + " is " + ret + " is not " + krb5ConfFile + ".");
            throw new IOException(JAVA_SECURITY_KRB5_CONF_KEY + " is " + ret + " is not " + krb5ConfFile + ".");
        }
    }

    public static void setJaasConf(String loginContextName, String principal, String keytabFile)
        throws IOException
    {
        if ((loginContextName == null) || (loginContextName.length() <= 0))
        {
            log.error("input loginContextName is invalid.");
            throw new IOException("input loginContextName is invalid.");
        }

        if ((principal == null) || (principal.length() <= 0))
        {
            log.error("input principal is invalid.");
            throw new IOException("input principal is invalid.");
        }

        if ((keytabFile == null) || (keytabFile.length() <= 0))
        {
            log.error("input keytabFile is invalid.");
            throw new IOException("input keytabFile is invalid.");
        }

        File userKeytabFile = new File(keytabFile);
        if (!userKeytabFile.exists())
        {
            log.error("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") does not exsit.");
            throw new IOException("userKeytabFile(" + userKeytabFile.getAbsolutePath() + ") does not exsit.");
        }

        javax.security.auth.login.Configuration.setConfiguration(new JaasConfiguration(loginContextName, principal,
        		userKeytabFile.getAbsolutePath()));

        javax.security.auth.login.Configuration conf = javax.security.auth.login.Configuration.getConfiguration();
        if (!(conf instanceof JaasConfiguration))
        {
            log.error("javax.security.auth.login.Configuration is not JaasConfiguration.");
            throw new IOException("javax.security.auth.login.Configuration is not JaasConfiguration.");
        }

    	AppConfigurationEntry[] entrys = conf.getAppConfigurationEntry(loginContextName);
        if (entrys == null)
        {
            log.error("javax.security.auth.login.Configuration has no AppConfigurationEntry named " + loginContextName
                + ".");
            throw new IOException("javax.security.auth.login.Configuration has no AppConfigurationEntry named "
                + loginContextName + ".");
        }

        boolean checkPrincipal = false;
        boolean checkKeytab = false;
        for (int i = 0; i < entrys.length; i++)
        {
            if (entrys[i].getOptions().get("principal").equals(principal))
            {
                checkPrincipal = true;
            }

            if (IS_IBM_JDK)
            {
                if (entrys[i].getOptions().get("useKeytab").equals(keytabFile))
                {
                    checkKeytab = true;
                }
            }
            else
            {
                if (entrys[i].getOptions().get("keyTab").equals(keytabFile))
                {
                    checkKeytab = true;
                }
            }

        }

        if (!checkPrincipal)
        {
            log.error("AppConfigurationEntry named " + loginContextName + " does not have principal value of "
                + principal + ".");
            throw new IOException("AppConfigurationEntry named " + loginContextName
                + " does not have principal value of " + principal + ".");
        }

        if (!checkKeytab)
        {
            log.error("AppConfigurationEntry named " + loginContextName + " does not have keyTab value of "
                + keytabFile + ".");
            throw new IOException("AppConfigurationEntry named " + loginContextName + " does not have keyTab value of "
                + keytabFile + ".");
        }

    }

    /**
     * 设置zookeeper服务端principal
     *
     * @param zkServerPrincipal
     * @throws IOException
     */
    public static void setZookeeperServerPrincipal(String zkServerPrincipal)
        throws IOException
    {
        System.setProperty(ZOOKEEPER_AUTH_PRINCIPAL, zkServerPrincipal);
        String ret = System.getProperty(ZOOKEEPER_AUTH_PRINCIPAL);
        if (ret == null)
        {
            throw new IOException(ZOOKEEPER_AUTH_PRINCIPAL + " is null.");
        }
        if (!ret.equals(zkServerPrincipal))
        {
            throw new IOException(ZOOKEEPER_AUTH_PRINCIPAL + " is " + ret + " is not " + zkServerPrincipal + ".");
        }
    }

    private static void loginHadoop(String principal, String keytabFile)
        throws IOException
    {
        try
        {
            UserGroupInformation.loginUserFromKeytab(principal, keytabFile);
        }
        catch (IOException e)
        {
            log.error("login failed with " + principal + " and " + keytabFile + ".");
            log.error("perhaps cause 1 is " + LOGIN_FAILED_CAUSE_PASSWORD_WRONG + ".");
            log.error("perhaps cause 2 is " + LOGIN_FAILED_CAUSE_TIME_WRONG + ".");
            log.error("perhaps cause 3 is " + LOGIN_FAILED_CAUSE_AES256_WRONG + ".");
            log.error("perhaps cause 4 is " + LOGIN_FAILED_CAUSE_PRINCIPAL_WRONG + ".");
            log.error("perhaps cause 5 is " + LOGIN_FAILED_CAUSE_TIME_OUT + ".");

            throw e;
        }
    }

    private static void checkAuthenticateOverKrb()
        throws IOException
    {
        UserGroupInformation loginUser = UserGroupInformation.getLoginUser();
        UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
        if (loginUser == null)
        {
            log.error("current user is " + currentUser + ", but loginUser is null.");
            throw new IOException("current user is " + currentUser + ", but loginUser is null.");
        }
        if (!loginUser.equals(currentUser))
        {
            log.error("current user is " + currentUser + ", but loginUser is " + loginUser + ".");
            throw new IOException("current user is " + currentUser + ", but loginUser is " + loginUser + ".");
        }
        if (!loginUser.hasKerberosCredentials())
        {
            log.error("current user is " + currentUser + " has no Kerberos Credentials.");
            throw new IOException("current user is " + currentUser + " has no Kerberos Credentials.");
        }
        if (!UserGroupInformation.isLoginKeytabBased())
        {
            log.error("current user is " + currentUser + " is not Login Keytab Based.");
            throw new IOException("current user is " + currentUser + " is not Login Keytab Based.");
        }
    }

    private static boolean checkCurrentUserCorrect(String principal)
        throws IOException
    {
        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
        if (ugi == null)
        {
            log.error("current user still null.");
            throw new IOException("current user still null.");
        }

        String defaultRealm = null;
		try {
			defaultRealm = KerberosUtil.getDefaultRealm();
		} catch (Exception e) {
			log.warn("getDefaultRealm failed.");
			throw new IOException(e);
		}

        if ((defaultRealm != null) && (defaultRealm.length() > 0))
        {
            StringBuilder realm = new StringBuilder();
            StringBuilder principalWithRealm = new StringBuilder();
            realm.append("@").append(defaultRealm);
            if (!principal.endsWith(realm.toString()))
            {
                principalWithRealm.append(principal).append(realm);
                principal = principalWithRealm.toString();
            }
        }

        return principal.equals(ugi.getUserName());
    }




    /**
     * copy from hbase zkutil 0.94&0.98 A JAAS configuration that defines the login modules that we want to use for
     * login.
     */
    private static class JaasConfiguration extends javax.security.auth.login.Configuration
    {
        private static final Map<String, String> BASIC_JAAS_OPTIONS = new HashMap<String, String>();
        static
        {
            String jaasEnvVar = System.getenv("HBASE_JAAS_DEBUG");
            if (jaasEnvVar != null && "true".equalsIgnoreCase(jaasEnvVar))
            {
                BASIC_JAAS_OPTIONS.put("debug", "true");
            }
        }

        private static final Map<String, String> KEYTAB_KERBEROS_OPTIONS = new HashMap<String, String>();
        static
        {
            if (IS_IBM_JDK)
            {
            	KEYTAB_KERBEROS_OPTIONS.put("credsType", "both");
            }
            else {
            	KEYTAB_KERBEROS_OPTIONS.put("useKeyTab", "true");
            	KEYTAB_KERBEROS_OPTIONS.put("useTicketCache", "false");
            	KEYTAB_KERBEROS_OPTIONS.put("doNotPrompt", "true");
            	KEYTAB_KERBEROS_OPTIONS.put("storeKey", "true");
            }

            KEYTAB_KERBEROS_OPTIONS.putAll(BASIC_JAAS_OPTIONS);
        }



        private static final AppConfigurationEntry KEYTAB_KERBEROS_LOGIN = new AppConfigurationEntry(
            KerberosUtil.getKrb5LoginModuleName(), LoginModuleControlFlag.REQUIRED, KEYTAB_KERBEROS_OPTIONS);

        private static final AppConfigurationEntry[] KEYTAB_KERBEROS_CONF =
            new AppConfigurationEntry[] {KEYTAB_KERBEROS_LOGIN};

        private javax.security.auth.login.Configuration baseConfig;

        private final String loginContextName;

        private final boolean useTicketCache;

        private final String keytabFile;

        private final String principal;


        public JaasConfiguration(String loginContextName, String principal, String keytabFile) throws IOException
        {
            this(loginContextName, principal, keytabFile, keytabFile == null || keytabFile.length() == 0);
        }

        private JaasConfiguration(String loginContextName, String principal, String keytabFile, boolean useTicketCache) throws IOException
        {
            try
            {
                this.baseConfig = javax.security.auth.login.Configuration.getConfiguration();
            }
            catch (SecurityException e)
            {
                this.baseConfig = null;
            }
            this.loginContextName = loginContextName;
            this.useTicketCache = useTicketCache;
            this.keytabFile = keytabFile;
            this.principal = principal;

            initKerberosOption();
            log.info("JaasConfiguration loginContextName=" + loginContextName + " principal=" + principal
                + " useTicketCache=" + useTicketCache + " keytabFile=" + keytabFile);
        }
        
        private void initKerberosOption() throws IOException
        {
            if (!useTicketCache)
            {
            	if(IS_IBM_JDK)
            	{                		
            		KEYTAB_KERBEROS_OPTIONS.put("useKeytab", keytabFile);
            	}
            	else
            	{
                    KEYTAB_KERBEROS_OPTIONS.put("keyTab", keytabFile);
                    KEYTAB_KERBEROS_OPTIONS.put("useKeyTab", "true");
                    KEYTAB_KERBEROS_OPTIONS.put("useTicketCache", useTicketCache ? "true" : "false");
            	}
            }
            KEYTAB_KERBEROS_OPTIONS.put("principal", principal);            
        }
        
        public AppConfigurationEntry[] getAppConfigurationEntry(String appName)
        {
            if (loginContextName.equals(appName))
            {
                return KEYTAB_KERBEROS_CONF;
            }
            if (baseConfig != null)
                return baseConfig.getAppConfigurationEntry(appName);
            return (null);
        }

    }

    //-------------一下为kafka配置
    /**
     * 设置jaas.conf文件
     *
     * @param principal
     * @param keytabPath
     * @throws IOException
     */
    public static void setJaasFile(String principal, String keytabPath)
        throws IOException
    {
        String jaasPath =
            new File(System.getProperty("java.io.tmpdir")) + File.separator + System.getProperty("user.name")
                + JAAS_POSTFIX;

        // windows路径下分隔符替换
        jaasPath = jaasPath.replace("\\", "\\\\");
        // 删除jaas文件
        deleteJaasFile(jaasPath);
        writeJaasFile(jaasPath, principal, keytabPath);
        System.setProperty(JAVA_SECURITY_LOGIN_CONF, jaasPath);
    }

    private static void deleteJaasFile(String jaasPath)
        throws IOException
    {
        File jaasFile = new File(jaasPath);
        if (jaasFile.exists())
        {
            if (!jaasFile.delete())
            {
                throw new IOException("Failed to delete exists jaas file.");
            }
        }
    }

    /**
     * 写入jaas文件
     *
     * @throws IOException
     *             写文件异常
     */
    private static void writeJaasFile(String jaasPath, String principal, String keytabPath)
        throws IOException
    {
        FileWriter writer = new FileWriter(new File(jaasPath));
        try
        {
            writer.write(getJaasConfContext(principal, keytabPath));
            writer.flush();
        }
        catch (IOException e)
        {
            throw new IOException("Failed to create jaas.conf File");
        }
        finally
        {
            writer.close();
        }
    }

    private static String getJaasConfContext(String principal, String keytabPath)
    {
        Module[] allModule = Module.values();
        StringBuilder builder = new StringBuilder();
        for (Module modlue : allModule)
        {
            builder.append(getModuleContext(principal, keytabPath, modlue));
        }
        return builder.toString();
    }

    private static String getModuleContext(String userPrincipal, String keyTabPath, Module module)
    {
        StringBuilder builder = new StringBuilder();
        if (IS_IBM_JDK)
        {
            builder.append(module.getName()).append(" {").append(LINE_SEPARATOR);
            builder.append(IBM_LOGIN_MODULE).append(LINE_SEPARATOR);
            builder.append("credsType=both").append(LINE_SEPARATOR);
            builder.append("principal=\"" + userPrincipal + "\"").append(LINE_SEPARATOR);
            builder.append("useKeytab=\"" + keyTabPath + "\"").append(LINE_SEPARATOR);
            builder.append("debug=true;").append(LINE_SEPARATOR);
            builder.append("};").append(LINE_SEPARATOR);
        }
        else
        {
            builder.append(module.getName()).append(" {").append(LINE_SEPARATOR);
            builder.append(SUN_LOGIN_MODULE).append(LINE_SEPARATOR);
            builder.append("useKeyTab=true").append(LINE_SEPARATOR);
            builder.append("keyTab=\"" + keyTabPath + "\"").append(LINE_SEPARATOR);
            builder.append("principal=\"" + userPrincipal + "\"").append(LINE_SEPARATOR);
            builder.append("useTicketCache=false").append(LINE_SEPARATOR);
            builder.append("storeKey=true").append(LINE_SEPARATOR);
            builder.append("debug=true;").append(LINE_SEPARATOR);
            builder.append("};").append(LINE_SEPARATOR);
        }

        return builder.toString();
    }
}
package com.bangcle.util;

/**
 * Created by zhaogj on 23/09/2017.
 */
public class ParaUtils {

  public static boolean TESTING = true;//是否正在单元测试
  public static boolean ES_STATUS_GREEN;

}
package com.bangcle.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import java.io.UnsupportedEncodingException;
import java.util.Random;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.RandomStringUtils;

/**
 * Created by zhusiwei on 2018/4/8.
 */
@Slf4j
public class PubFunc {

  public static String jsonArray2String(String strInfo) {
    StringBuffer bufferResult = new StringBuffer();
    String strResult = "NoPermission";
    try {
      String[] strsInfo = strInfo.substring(1, strInfo.length() - 1).split(",");
      for (int i = 0; i < strsInfo.length; i++) {
        bufferResult.append(strsInfo[i]);
        bufferResult.append(",");
      }
    } catch (JSONException e) {
      log.error("error", e);
      return strResult;
    }
    String strTransition = bufferResult.toString()
        .substring(0, bufferResult.toString().length() - 1);
    if (strTransition.contains("\"")) {
      // 去除imei中包含的双引号
      strResult = strTransition.substring(1, strTransition.length() - 1);
    } else if ("null".equals(strTransition) || strTransition.isEmpty() || "No Permission"
        .equals(strTransition) || "exception".equals(strTransition)) {
      // 如果imei存的字符串null则返回未授权
      strResult = "NoPermission";
    } else {
      strResult = strTransition;
    }
    return strResult;
  }

  public static String jsonArray2Str(String strInfo) {
    StringBuffer strResult = new StringBuffer();
    try {
      JSONArray jsonArray = JSON.parseArray(strInfo);
      for (int i = 0; i < jsonArray.size() - 1; i++) {
        strResult.append(jsonArray.get(i));
        strResult.append(",");
      }
      strResult.append(jsonArray.get(jsonArray.size() - 1));
    } catch (JSONException e) {
      log.error("error", e);
      return strInfo;
    }
    return strResult.toString();
  }

  public static byte[] StringToBytes(String str) {
    return str.getBytes();
  }

  public static String BytesToString(byte[] bytes) {
    String string = null;
    try {
      string = new String(bytes, "utf-8");
    } catch (UnsupportedEncodingException e) {
      log.error("error", e);
    }
    return string;
  }

  // 生成随机key
  public static String getRandomKey() {
    Random random = new Random();
    int keyLen = random.nextInt(17) + 48; // 产生一个随机key 48~64之间
    String randomKey = RandomStringUtils.randomAlphabetic(keyLen);
    return randomKey;
  }
}
package com.bangcle.util;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.util.HashMap;
import java.util.Map;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

/**
 * Created by zhusiwei on 2017/12/28.
 */
@Configuration
public class PubString {

  //用户权限
  public final static int SUPER_USER = 0; //超级用户
  public final static int ADMIN_USER = 1; //管理员用户
  public final static int OPERATE_USER = 2; //操作员用户
  public final static int AUDITOR_USER = 3; //审计用户


  //策略配置-威胁自定义-注入攻击 状态
  public final static int STOP_STATUS = 0;//停用
  public final static int START_STATUS = 1;//启用
  public final static int DELETE_STATUS = 2;//删除

  public final static int lsize = 1000;   //汇聚top总数
  public final static int shardSize = lsize * 3;

  public final static int leventTimeLine = 500;//事件详情时间链中展示的威胁条数

  public final static int numTimeLineSize = 500;   //汇聚top总数

  public static final JSONArray msgTypeArray = new JSONArray();
  public static final Map<String, String> cacheAppleEquipment = new HashMap<String, String>();//苹果设备设备编号与设备型号对应关系

  public static final JSONObject msgTypes = new JSONObject();
  public static final String[] locations = {"未知", "山西", "内蒙古", "辽宁", "吉林", "黑龙江", "上海", "江苏", "浙江",
      "安徽", "福建", "江西", "山东", "河南", "湖北", "湖南", "广东", "广西", "海南", "重庆", "四川", "贵州", "云南", "西藏",
      "陕西", "甘肃", "青海", "宁夏", "新疆", "台湾", "香港", "澳门", "北京", "天津", "江苏"};

  public static boolean showUserData = false;

  @Value("${show_user_data}")
  public void setShowUserData(String isShow) {
    this.showUserData = Boolean.valueOf(isShow);
  }

  public static boolean NEED_MSSP = false;

  @Value("${need_mssp}")
  public void setNeedMssp(String needMssp) {
    this.NEED_MSSP = Boolean.valueOf(needMssp);
  }

  public static String PRNCIPAL_NAME;

  @Value("${huawei.userprincipal}")
  public void setPrncipalName(String prncipalName) {
    this.PRNCIPAL_NAME = prncipalName;
  }

  public static final String HBASE_DEV_STATUS = "bangcle_dev_status";

  static {
//    msgTypes.put("devinfo", "设备信息");
//    msgTypes.put("start", "启动信息");
//    msgTypes.put("apkinfo", "应用信息");
//    msgTypes.put("crash", "崩溃信息");
//    msgTypes.put("emulator", "模拟器信息");
//    msgTypes.put("location", "位置欺诈信息");
//    msgTypes.put("host_fraud", "域名欺诈信息");
//    msgTypes.put("devices_reuse", "设备复用信息");
//    msgTypes.put("inject", "注入攻击信息");
//    msgTypes.put("userdata", "用户数据绑定信息");
//    msgTypes.put("debug", "调试行为信息");
//    msgTypes.put("game_plugin", "程序外挂信息");
//    msgTypes.put("speed", "系统加速信息");
//    msgTypes.put("env_check", "环境检测信息");

    JSONObject msgTypes = new JSONObject();
    msgTypes.put("name", "设备信息");
    msgTypes.put("type", "devinfo");
    msgTypeArray.add(msgTypes);
    msgTypes = new JSONObject();
    msgTypes.put("name", "启动信息");
    msgTypes.put("type", "start");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "应用信息");
    msgTypes.put("type", "apkinfo");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "崩溃信息");
    msgTypes.put("type", "crash");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "模拟器信息");
    msgTypes.put("type", "emulator");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "位置欺诈信息");
    msgTypes.put("type", "location");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "域名欺诈信息");
    msgTypes.put("type", "host_fraud");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "设备复用信息");
    msgTypes.put("type", "devices_reuse");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "注入攻击信息");
    msgTypes.put("type", "inject");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "用户数据绑定信息");
    msgTypes.put("type", "userdata");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "调试行为信息");
    msgTypes.put("type", "debug");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "程序外挂信息");
    msgTypes.put("type", "game_plugin");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "系统加速信息");
    msgTypes.put("type", "speed");
    msgTypeArray.add(msgTypes);

    msgTypes = new JSONObject();
    msgTypes.put("name", "环境检测信息");
    msgTypes.put("type", "env_check");
    msgTypeArray.add(msgTypes);


  }

}
package com.bangcle.util;

/***
 * 报表导出功能常量参数
 * 
 * @author zhangdi
 *
 */
public class ReportsExportBaseParam {
	/**
	 * 任务周期task_cycle参数 0:一次性。 1:每天。 2:每周。 3:每2周。 4:每月。 5:每季度。
	 */
	public static final int TASK_CYCLE_TYPE_ONCE = 0;// 一次性
	public static final int TASK_CYCLE_TYPE_EVERY_DAY = 1;// 每天
	public static final int TASK_CYCLE_TYPE_WEEKLY = 2;// 每周
	public static final int TASK_CYCLE_TYPE_EVERY_MONTH = 3;// 每月
	public static final int TASK_CYCLE_TYPE_EACH_QUARTER = 4;// 每季度

	/**
	 * 任务运行时间running_type参数 0:停止。 1:现在。 2:设定。此时start_run_time参数才有效。
	 */
	public static final int RUNNING_TYPE_STOP = 0;// 停止
	public static final int RUNNING_TYPE_NOW = 1;// 现在
	public static final int RUNNING_TYPE_SETUP = 2;// 设定

	/**
	 * 任务当前状态start_stop参数 0:停止。1:启动
	 */
	public static final int START_STOP_TYPE_STOP = 0;// 停止
	public static final int START_STOP_TYPE_START = 1;// 启动

	/**
	 * 报表状态 report_status 参数 0:未完成 1:已完成
	 */
	public static final int REPORT_STATUS_TYPE_UNDONE = 0;// 未完成
	public static final int REPORT_STATUS_TYPE_FINISH = 1;// 已完成

}
package com.bangcle.util;

import java.io.ByteArrayOutputStream;
import java.security.Key;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.util.Map;

import javax.crypto.Cipher;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class RSAUtils {
  public static  Map<String,Object> keyMap = null;
  public static final String KEY_ALGORITHM = "RSA";
  public static final String SIGNATURE_ALGORITHM = "MD5withRSA";
  private static final int MAX_DECRYPT_BLOCK = 256;
  public static String RSAPublicKey = null;

  /**
   * RSA通过公钥解密.
   * */
  public static byte[] decryptByPublicKey(byte[] encryptedData, String publicKey)
      throws Exception {
    byte[] keyBytes = decryptBASE64(publicKey);
    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
    Key publicK = keyFactory.generatePublic(x509KeySpec);
    Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
    cipher.init(Cipher.DECRYPT_MODE, publicK);
    int inputLen = encryptedData.length;
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    int offSet = 0;
    byte[] cache;
    int i = 0;

    while (inputLen - offSet > 0) {
      if (inputLen - offSet > MAX_DECRYPT_BLOCK) {
        cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);
      } else {
        cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);
      }
      out.write(cache, 0, cache.length);
      i++;
      offSet = i * MAX_DECRYPT_BLOCK;
    }
    byte[] decryptedData = out.toByteArray();
    out.close();
    return decryptedData;
  }


  public static byte[] decryptBASE64(String key) throws Exception {
    return (new BASE64Decoder()).decodeBuffer(key);
  }

  public static String encryptBASE64(byte[] key) throws Exception {
    return (new BASE64Encoder()).encodeBuffer(key);
  }

}
package com.bangcle.util;

import java.util.HashMap;
import java.util.Map;

/**
 * author email: yongjin.pan@bangcle.com
 * version time: 下午9:45 17-10-24.
 */
public class SelfCache {

  private static Map<String, Object> mapCache = new HashMap<>();

  // 需要缓存的key的名称，和cookie中的值组成一个唯一的key
  public static final String strAppId = "app_id";
  public static final String strAppName = "app_name";
  public static final String strUid = "uid";
  public static final String strUname = "uname";
  public static final String strRoleId = "role_id";

  public static void set(String key, Object value) {
    mapCache.put(key, value);
  }

  public static Object get(String key) {
    return mapCache.get(key);
  }

  public static void remove(String key) {
    mapCache.remove(key);
  }

  // 当前app的id的session的key
  public static String appIdSessionKey(String sessionId) {
    return strAppId + sessionId;
  }

  // 当前app的名字的session的key
  public static String appNameSessionKey(String sessionId) {
    return strAppName + sessionId;
  }

  // 当前用户的id的session的key
  public static String uidSessionKey(String sessionId) {
    return strUid + sessionId;
  }

  // 当前用户的名字的session的key
  public static String unameSessionKey(String sessionId) {
    return strUname + sessionId;
  }

  // 当前用户的role_id的session的key
  public static String roleIdSessionKey(String sessionId) {
    return strRoleId + sessionId;
  }
}
package com.bangcle.util;

public class Time {

}
package com.bangcle.util;

//import com.bangcle.entity.App;

import com.bangcle.entity.App;
import com.bangcle.service.AppService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午2:39 17-10-25.
 */
@Slf4j
public class TimeParse {

  @Autowired
  private static AppService appService;

  /**
   * param strParam return 获取起始和结束时间.
   */
  public static String[] getTimeRange(String strParam) {
    String[] range = new String[2];

    Calendar calendar = Calendar.getInstance();
    Date date = calendar.getTime();

    switch (strParam) {

      // 今天
      case DateParam.TODAY:
        range[0] = format(date);
        range[1] = format(date);
        break;
      // 昨天
      case DateParam.YESTERDAY:
        calendar.add(Calendar.DAY_OF_MONTH, -1);
        date = calendar.getTime();
        range[0] = format(date);
        range[1] = format(date);
        break;

      default:
        if (strParam == null || "".equals(strParam) || "*".equals(strParam)) {
          // 全部
          range[1] = format(date);
          //  标记0，在action中计算起始时间
          range[0] = "0";
        } else {
          // 判断向前推迟多少天
          try {
            int day = Integer.parseInt(strParam);
            range[1] = format(date);
            calendar.add(Calendar.DAY_OF_MONTH, 1 - day);
            range[0] = format(calendar.getTime());
          } catch (NumberFormatException e) {
            // TODO Auto-generated catch block.
            e.printStackTrace();
          }
        }

        break;
    }
    return range;
  }

  /**
   * param time param appId return 根据app注册时间来获得起始和结束时间.
   */
  public static String[] getTimeRange(String strTime, Long appId) {
    String[] timeRange = getTimeRange(strTime);
    if ("0".equals(timeRange[0])) {
      App app = appService.findById(Integer.parseInt(String.valueOf(appId)));
      Date date = app.getCreatedAt();
      //Date date = new Date(timestamp.getTime());
      timeRange[0] = TimeParse.format(date);
    }
    return timeRange;
  }

  // 格式化时间
  public static String format(Date date) {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    return simpleDateFormat.format(date);
  }


  /**
   * param strTime param lAppId return 根据传入时间和应用获取起始和结束时间时间戳.
   */
  public static long[] getRangeTime(String strTime, String appId) throws ParseException {
    String[] timeRange = TimeParse.getTimeRange(strTime, Long.parseLong(appId));
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    // 和今天对比，大于今天的，只允许查询到当前时间
    Calendar calendar = Calendar.getInstance();
    Date dateNow = calendar.getTime();
    String today = simpleDateFormat.format(dateNow);
    Date dateStart = simpleDateFormat.parse(timeRange[0]);
    long[] times = new long[2];
    times[0] = dateStart.getTime();
    // 获取结束时间
    Date dateEnd = simpleDateFormat.parse(timeRange[1]);
    if (today != null && today.equals(timeRange[1])) {
      dateEnd = dateNow; // 为今天，等于当前时间
    } else {
      String strEnd = timeRange[1] + " 23:59:59";
      dateEnd = simpleDateFormat2.parse(strEnd);
      // 防止时间有大于当天的情况
      if (dateEnd.compareTo(dateNow) > 0) {
        dateEnd = dateNow;
      }
    }
    times[1] = dateEnd.getTime();

    return times;
  }

  /**
   * param strStart param strEnd return 根据传入时间获取起始和结束时间时间戳.
   */
  public static long[] getLongRangeTime(String strStart, String strEnd) throws ParseException {
    String[] timeRange = {strStart, strEnd};
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    // 和今天对比，大于今天的，只允许查询到当前时间
    Calendar calendar = Calendar.getInstance();
    Date dateNow = calendar.getTime();
    String today = simpleDateFormat.format(dateNow);
    Date dateStart = simpleDateFormat.parse(timeRange[0]);
    long[] times = new long[2];
    times[0] = dateStart.getTime();
    // 获取结束时间
    Date dateEnd = simpleDateFormat.parse(timeRange[1]);
    if (today != null && today.equals(timeRange[1])) {
      dateEnd = dateNow; // 为今天，等于当前时间
    } else {
      strEnd = timeRange[1] + " 23:59:59";
      dateEnd = simpleDateFormat2.parse(strEnd);
      // 防止时间有大于当天的情况
      if (dateEnd.compareTo(dateNow) > 0) {
        dateEnd = dateNow;
      }
    }
    times[1] = dateEnd.getTime();

    return times;
  }

  // 判断时间段是不是一天
  public static boolean isSameDay(long gte, long lte) {
    long oneDay = getSecondsOfOneDay();
    return (lte - gte) < oneDay;
  }

  public static long getSecondsOfOneDay() {
    return 3600 * 1000 * 24L;
  }

  public static long getSecondsOfOneHour() {
    return 3600 * 1000L;
  }

  /**
   * 根据起始和结束时间计算上一周期的时间范围
   */
  public static long[] getOldRangeTime(long startTime, long endTime) {
    long[] longRangeTime = new long[2];
    // 起始时间必是一天的开始，所以上一周期的结束时间减1s即可.
    long oldEndTime = startTime - 1000;
    longRangeTime[1] = oldEndTime;
    long oldTime = oldEndTime - (endTime - startTime);
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date date = new Date(oldTime);
    String strOldDate = simpleDateFormat.format(date);
    SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String strOldStartDate = strOldDate + " 00:00:00";
    try {
      Date oldStartDate = simpleDateFormat2.parse(strOldStartDate);
      longRangeTime[0] = oldStartDate.getTime();
    } catch (ParseException e) {
      e.printStackTrace();
    }
    return longRangeTime;
  }


  /**
   * param strStart param strEnd return 获得画曲线的横轴的时间数组[2016-06-07, 2016-06-08,.......].
   */
  public static List<String> getDateList(String strStart, String strEnd) {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    List<String> listDates = new ArrayList<>();
    try {
      Date dateStart = simpleDateFormat.parse(strStart);
      Date dateEnd = simpleDateFormat.parse(strEnd);
      listDates = getDateList(dateStart, dateEnd);
    } catch (ParseException e) {
      e.printStackTrace();
    }
    return listDates;
  }

  /**
   * 获取时间轴数组.
   */
  public static List<String> getDateList(Date dateStart, Date dateEnd) {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    List<String> listDates = new ArrayList<>();
    Calendar calendar = new GregorianCalendar();
    calendar.setTime(dateStart);
    while (!calendar.getTime().after(dateEnd)) {
      Date result = calendar.getTime();
      listDates.add(simpleDateFormat.format(result));
      calendar.add(Calendar.DATE, 1);
    }
    return listDates;
  }

  /**
   * 获取时间轴数组.
   */
  public static List<String> getDateList(long startTime, long endTime) {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date startDate = new Date(startTime);
    Date endDate = new Date(endTime);
    List<String> listDates = getDateList(startDate, endDate);
    return listDates;
  }

  // 获得小时列表
  public static List<String> getHourList() {
    List<String> hourList = new ArrayList<>();
    for (int i = 0; i < 24; i++) {
      hourList.add(i + ":00");
    }
    return hourList;
  }

  // 时间分割 传入2017-12-02T17:42:07+08:00 输出1：00
  public static String timeSplit(Boolean sameDay, String time) {
    String strTime = "";
    if (sameDay) {
      //对时间格式进行处理[01:00,02:00,03:00……]
      if (time.split(":")[0].split("T")[1].startsWith("0")) {
        strTime = time.split(":")[0].split("T")[1].substring(1, 2) + ":00";
      } else {
        strTime = time.split(":")[0].split("T")[1] + ":00";
      }
    } else {
      //当不是同一天时获取年月日
      strTime = time.split("T")[0];
    }
    return strTime;
  }

  /**
   * 格式化es的时间 2018-01-15T04:09:41.061Z 2018-01-15T15:26:01+08:00
   */
  public static String formatEsTime(String time) {
    if (time == null || "".equals(time)) {
      return "";
    }
    if (time.contains("T") && time.contains("+")) {
      int index = time.indexOf('+');
      time = time.substring(0, index);
      time = time.replace("T", " ");
      return time;
    }
    if (time.contains("T") && time.contains(".")) {
      int index = time.indexOf('.');
      time = time.substring(0, index);
      time = time.replace("T", " ");
      return time;
    }
    return time;
  }

  /**
   * param time param strAgentId description: 获取折线图座标轴横轴 throws ParseException.
   */
  public static List<String> getCoordList(String time, String strAgentId) throws ParseException {
    String[] strsRangeTime = TimeParse.getTimeRange(time);
    long[] longsRangeTime = TimeParse.getRangeTime(time, strAgentId);
    boolean sameDay = TimeParse.isSameDay(longsRangeTime[0], longsRangeTime[1]);
    //X轴默认返回年-月-日[2017-10-1,2017-10-2……]
    List<String> listCoord = getDateList(String.valueOf(strsRangeTime[0]),
        String.valueOf(strsRangeTime[1]));
    //判断是否是同一天，如果是X轴返回[1:00,2:00,3:00……]
    if (sameDay) {
      listCoord = getHourList();
    }
    return listCoord;
  }

  /**
   * 根据传入时间类型和时间值换算为秒返回
   */
  public static Long getPeriod(Long numTime, String strTimeType) {
    long longTime = 0L;
    switch (strTimeType) {
      case "s":
        longTime = numTime;
        break;
      case "m":
        longTime = numTime * 60;
        break;
      case "h":
        longTime = numTime * 60 * 60;
        break;
      case "d":
        longTime = numTime * 60 * 60 * 24;
        break;
      default:
        break;
    }
    return longTime;
  }

  // 时间转换，将long转为str
  public static String Long2StrTime(long lTime, String strFormater) {
    SimpleDateFormat df = new SimpleDateFormat(strFormater);
    Date date = new Date(lTime);
    return df.format(date);
  }

  // 时间转换，将long转为str
  public static Long str2LongTime(String date, String strFormater) {
    long miSecond = 0;
    SimpleDateFormat df = new SimpleDateFormat(strFormater);
    try {
      df.parse(date);
      Calendar cal = df.getCalendar();
      miSecond = cal.getTimeInMillis();
    } catch (ParseException e) {
      log.error("error", e);
    }
    return miSecond;
  }

  public static boolean isSameDayOfMillis(long ms1, long ms2) {
    int seconds = 60 * 60 * 24;
    long millis = 1000L * seconds;
    final long interval = ms1 - ms2;
    return interval < millis
        && interval > -1L * millis
        && toDay(ms1) == toDay(ms2);
  }

  public static long toDay(long millis) {
    return (millis + TimeZone.getDefault().getOffset(millis)) / (60 * 60 * 24 * 1000L);
  }

  public static String dataFormat(Date date) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    return sdf.format(date);
  }

  /**
   * 判断两个日期是否是同一周.
   */

  public static boolean isSameWeek(String date1, String date2) {
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    Date d1 = null;
    Date d2 = null;
    try {
      d1 = format.parse(date1);
      d2 = format.parse(date2);
    } catch (Exception e) {
      e.printStackTrace();
    }
    Calendar cal1 = Calendar.getInstance();
    Calendar cal2 = Calendar.getInstance();
    cal1.setFirstDayOfWeek(Calendar.MONDAY);//西方周日为一周的第一天，咱得将周一设为一周第一天
    cal2.setFirstDayOfWeek(Calendar.MONDAY);
    cal1.setTime(d1);
    cal2.setTime(d2);
    int subYear = cal1.get(Calendar.YEAR) - cal2.get(Calendar.YEAR);
    if (subYear == 0)// subYear==0,说明是同一年
    {
      if (cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR)) {
        return true;
      }
    } else if (subYear == 1
        && cal2.get(Calendar.MONTH) == 11) //subYear==1,说明cal比cal2大一年;java的一月用"0"标识，那么12月用"11"
    {
      if (cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR)) {
        return true;
      }
    } else if (subYear == -1 && cal1.get(Calendar.MONTH) == 11)//subYear==-1,说明cal比cal2小一年
    {
      if (cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR)) {
        return true;
      }
    }
    return false;
  }
}
package com.bangcle.util;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

public class WebUtils {

  /**
   * 传前端json格式定义
   * param code 返回代码
   * param msg  返回消息.
   */
  public static JSONObject doJsonObject(int code, String msg) {
    JSONObject result = new JSONObject();
    result.put("code", code);
    result.put("msg", msg);
    return result;
  }

  /**
   * 传前端json格式定义 param code 返回代码
   * param msg  返回消息
   * param datalist 返回内容.
   */
  public static JSONObject doJsonObject(int code, String msg, JSONArray datalist) {
    JSONObject result = new JSONObject();
    result.put("code", code);
    result.put("msg", msg);

    JSONObject data = new JSONObject();
    data.put("datalist", datalist);

    result.put("data", data);
    return result;
  }

  /**
   * 传前端json格式定义
   * param code 返回代码
   * param msg  返回消息
   * param data.
   */
  public static JSONObject doJsonObject(int code, String msg, JSONObject data) {
    JSONObject result = new JSONObject();
    result.put("code", code);
    result.put("msg", msg);

    result.put("data", data);
    return result;
  }


}
package test.com.bangcle.repository;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EsRepositoryTest {

  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  /**
   * Method: buildClient()
   */
  @Test
  public void testBuildClient() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: bulidBulkProcessor()
   */
  @Test
  public void testBulidBulkProcessor() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: closeClient()
   */
  @Test
  public void testCloseClient() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: closeBulkProcessor()
   */
  @Test
  public void testCloseBulkProcessor() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: buildTemplate(String strTemplateNamePrefixs)
   */
  @Test
  public void testPutTemplate() throws Exception {
    es.putTemplate();
  }

  /**
   * Method: exists(String strIndex)
   */
  @Test
  public void testExists() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: delete(String strIndex)
   */
  @Test
  public void testDelete() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: create(String strIndex, int nShards, int nReplicas)
   */
  @Test
  public void testCreate() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: putMapping(String strIndex, String strType, String strMapping)
   */
  @Test
  public void testPutMapping() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: keepAlive()
   */
  @Test
  public void testKeepAlive() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: esInit()
   */
  @Test
  public void testEsInit() throws Exception {
//TODO: Test goes here...
/*
try {
   Method method = EsRepository.getClass().getMethod("esInit");
   method.setAccessible(true);
   method.invoke(<Object>, <Parameters>);
} catch(NoSuchMethodException e) {
} catch(IllegalAccessException e) {
} catch(InvocationTargetException e) {
}
*/
  }

  @Test
  public void testDateToES() throws Exception {
    es.putTemplate();
    String strIndex = "index_zhaogj";
    es.delete(strIndex);
    String strType = "type_zhaogj";
    String strID = "i'm id";
    long lTime = 1234567890;
    JSONObject json = new JSONObject();
    //json.put("dtCreate", DateTimeUtils.getEsDateByLong(lTime));
    String[] arrstrTmp = {"abc", "bcd", "cde"};
    json.put("arrData", arrstrTmp);
    Map<String, Object> mapData01 = new HashMap<>();
    mapData01.put("name", "prog_list");
    mapData01.put("description", "programming list");
    Map<String, Object> mapData02 = new HashMap<>();
    mapData02.put("name", "prog_list2");
    mapData02.put("description", "programming list2");
    List<Map<String, Object>> mapData = new ArrayList<>();
    mapData.add(mapData01);
    mapData.add(mapData02);
    json.put("objmmValues", mapData);
    //Object[] objTmp = {};
    es.client.prepareIndex(strIndex, strType, strID).setSource(json).get();
    //es.delete(strIndex);
  }
}package com.bangcle.repository;

import static org.junit.Assert.*;

import com.bangcle.Application;
import com.bangcle.util.PubString;
import java.io.IOException;
import java.util.HashMap;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.Table;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Created by zhusiwei on 2018/4/4.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class HbaseRepositoryTest {
  @Autowired
  private HbaseRepository hbaseRepository;

  @Before
  public void before() throws Exception {
    hbaseRepository.init();
  }

  @After
  public void after() throws Exception {
    hbaseRepository.closeConnection();
  }

  @Test
  public void getHbaseData() throws Exception {
    Table table = null;
    try {
      Connection connection = hbaseRepository.getConnection();
      table = connection.getTable(TableName.valueOf("bangcle_all_apk_info"));
      HashMap dev = hbaseRepository.getHbaseData("1000000000000000000000000000000002", "value", table);
      log.info("{}",dev);
    } catch (IOException e) {
      log.error("error", e);
    } finally {
      try {
        if (table != null) {
          table.close();
        }
      } catch (IOException e) {
        log.error("", e);
      }
    }
  }

}package com.bangcle.service.common;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.AppInfoService;
import com.bangcle.service.AppStatService;
import com.bangcle.service.DevInfoService;
import com.bangcle.service.DevStatService;
import com.bangcle.service.RunningInfoService;
import com.bangcle.service.RunningStatService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class CommonAggServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private RunningStatService runningStatService;

  @Autowired
  private RunningInfoService runningInfoService;

  @Autowired
  private AppStatService appStatService;

  @Autowired
  private AppInfoService appInfoService;

  @Autowired
  private DevStatService devStatService;

  @Autowired
  private DevInfoService devInfoService;


  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testTotalCount() throws Exception {
    // 测试启动次数、设备数目
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.totalCount(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList, appVersionList
        , startTime, endTime, dataTypes, false);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testTrendCount() throws Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.trendCount(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList, appVersionList
        , startTime, endTime, dataTypes);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testStatCountByField() throws Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONArray result = commonAggService.statCountByField(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList, appVersionList
        , startTime, endTime, dataTypes, "model", 0l, false, false);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testSearchList() throws Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.searchList(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList, appVersionList
        , startTime, endTime, dataTypes, 0l, 0l, null, false);
    log.info(JSON.toJSONString(result));
    log.info("data_list size: {}", result.getJSONArray("data_list").size());
  }

  @Test
  public void testService() throws Exception {
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    //long startTime = 1512057600000L; // 12-01
    long startTime = 1512291600000L;
    // long endTime = 1515340800000L; // 01-05
    long endTime = 1512403200000L;
    List<String> dataTypes = null;
    JSONObject result = devInfoService.devSort(appId
        , manufacturerList, locationList, osVersionList, appVersionList
        , startTime, endTime, 1, 20, "", "all_dev");
    log.info(JSON.toJSONString(result));
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.AppInfoService;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class AppInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private AppInfoService appInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testAppSort() {
    String appId = "366";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long page = 1L;
    long size = 10L;
    long startTime = 1512057600000L;
    long endTime = 1517479046000L;
    String strSortBy = "";
    String strSortField = "";
    JSONObject jsonObject = appInfoService
        .appSort(appId, manufacturerList, locationList, osVersionList, startTime,
            endTime, page, size, "");
    log.info("result is {}", jsonObject.toJSONString());
  }

  @Test
  public void test() {
  }

}
package com.bangcle.service.common.java.com.bangcle;

import static com.bangcle.repository.EsRepository.client;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.CrashStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.Aggregations;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
import org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket;
import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.max.MaxAggregationBuilder;
import org.joda.time.DateTimeZone;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:02 17-12-6.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class CrashInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CrashInfoService crashInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testCrashType() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    int page = 1;
    int size = 10;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String strSortBy = "";
    String strSortField = "";
    JSONObject result = crashInfoService
        .crashTypeSort(appId, appVersionList, locationList, manufacturerList,
            osVersionList, strSortBy, strSortField, startTime, endTime, page, size);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testCrashDev() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long page = 1L;
    long size = 10L;
    long startTime = 1512057600000L;
    long endTime = 1513254494000L;
    String strSortBy = "";
    String strSortField = "last_time";
    JSONObject result = crashInfoService
        .crashDevSort(appId, appVersionList, locationList, manufacturerList, osVersionList,
            strSortBy, strSortField, page, size, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void getDocDevCount() {
    String strAgentId = "6";
    String strIndex = commonBaseService.getCrashIndexName();
    String termsAggField = EsFieldModel.UDID;
    String strCabField = EsFieldModel.CRASH_TYPE;
    long longStart = 1512057600000L;
    long longEnd = 1513334576000L;
    //int numSize
    BoolQueryBuilder bqb = QueryBuilders.boolQuery();
    List<Map<String, String>> mapArrayList = new ArrayList<Map<String, String>>();
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    //按照条件汇聚设备数量
    CardinalityAggregationBuilder cab = AggregationBuilders
        .cardinality(strCabField + "s").field(strCabField);
    TermsAggregationBuilder tab = AggregationBuilders
        .terms(termsAggField + "s")
        .field(termsAggField)
        .size(10000)
        .order(BucketOrder.count(false))
        //.order(Terms.Order.count(false))
        .subAggregation(cab);
    SearchResponse sr = es.client.prepareSearch(strIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(tab)
        .execute()
        .actionGet();
    Terms termCount = sr.getAggregations().get(termsAggField + "s");
    for (Terms.Bucket entry : termCount.getBuckets()) {

      Map<String, String> mapRiskLocation = new HashMap<String, String>();

      //mapRiskLocation.put(keyFir, String.valueOf(entry.getKey()));
      log.info("doc and dev count key{}", entry.getKey());      // Term

      //mapRiskLocation.put(keySec, String.valueOf(entry.getDocCount()));
      log.info("doc and dev count doc{}", entry.getDocCount()); // Doc count

      Cardinality cardinality = entry.getAggregations().get(strCabField + "s");
      //mapRiskLocation.put(keyThir, String.valueOf(cardinality.getValue()));
      log.info("doc and dev count dev{}", cardinality.getValue()); //Dev count

      mapArrayList.add(mapRiskLocation);
    }
  }

  @Test
  public void getCount() {
    String strAgentId = "6";
    String strIndex = commonBaseService.getAppIndexName();
    String termsAggField = EsFieldModel.UDID;
    String strCabField = EsFieldModel.CRASH_TYPE;
    long longStart = 1512057600000L;
    long longEnd = 1513254494000L;
    List<String> manufacturerList = new ArrayList<>();
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    //manufacturerList.add("Redmi 4A7");
    BoolQueryBuilder bqb = commonBaseService
        .filterQueryBuilder(strAgentId, manufacturerList, locationList, osVersionList,
            appVersionList, longStart, longEnd, null);
    CardinalityAggregationBuilder cabUdid = AggregationBuilders
        .cardinality(EsFieldModel.UDID + "s").field(EsFieldModel.UDID);

    String strValue = "";
    //bqb.must(QueryBuilders.termQuery(strField, strLocation));
    bqb.must(QueryBuilders.termQuery(EsFieldModel.APP_ID, strAgentId));
    bqb.must(QueryBuilders.rangeQuery(EsFieldModel.TIME_STAMP).gte(longStart).lte(longEnd));
    //按bqb条件过滤
    SearchResponse sr = es.client.prepareSearch(strIndex)
        .setTypes(commonBaseService.getIndexTypeName())
        .setQuery(bqb)
        .addAggregation(cabUdid)
        .execute()
        .actionGet();
    Cardinality cna = sr.getAggregations().get(EsFieldModel.UDID + "s");
    strValue = String.valueOf(cna.getValue());
    log.info("去重后数量{}", strValue);
    //返回去重以后的统计数量
  }

  @Test
  public void statCountByField() throws ParseException {
    String indexName = commonBaseService.getEnvIndexName();
    String indexType = commonBaseService.getIndexTypeName();
    String appId = "367";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-09","2018-01-09");
    List<String> dataTypes = null;
    String fieldName = EsFieldModel.UDID;
    String cabName = EsFieldModel.DATA_TYPE;
    String strSortBy = "desc";
    String strSortField = "last_time";
    long topNum = 1000L;
    //构造过滤条件
    BoolQueryBuilder boolQueryBuilder = commonBaseService
        .filterQueryBuilder(appId, manufacturerList, locationList, osVersionList, appVersionList,
            longsTime[0], longsTime[1], dataTypes);
    //对传入字段去重
    String cardinalityName = "count_distinct";
    CardinalityAggregationBuilder udidCardinalityAggregationBuilder = AggregationBuilders
        .cardinality(cardinalityName).field(cabName);
    //判断升/降序
    Boolean isAsc = true;
    if ("desc".equals(strSortBy)) {
      isAsc = false;
    } else if ("asc".equals(strSortBy)) {
      isAsc = true;
    }
    String termsName = "count_by_field";
    // 按照单个字段分布统计，单个字段的可能值应该不会超过1000个。
    long size = topNum > 0L ? topNum : 100000L;
    long shardSize = size * 3;
    TermsAggregationBuilder termsAggregationBuilder = null;
    MaxAggregationBuilder aggregationBuilder = AggregationBuilders.max("times").field(EsFieldModel.TIME);
    //判断排序字段
    if ("data_type_count".equals(strSortField)) {
      termsAggregationBuilder = AggregationBuilders.terms(termsName)
          .subAggregation(aggregationBuilder)
          .subAggregation(udidCardinalityAggregationBuilder)
          .field(fieldName)
          .shardSize((int) shardSize)
          .size((int) size)
          .order(BucketOrder.compound(BucketOrder.aggregation(cardinalityName, isAsc)
              , BucketOrder.count(isAsc)));
    } else if ("count".equals(strSortField)) {
      termsAggregationBuilder = AggregationBuilders.terms(termsName)
          .subAggregation(aggregationBuilder)
          .subAggregation(udidCardinalityAggregationBuilder)
          .field(fieldName)
          .shardSize((int) shardSize)
          .size((int) size)
          .order(BucketOrder.count(isAsc));
    } else if ("last_time".equals(strSortField)){
      termsAggregationBuilder = AggregationBuilders.terms(termsName)
          .subAggregation(aggregationBuilder)
          .subAggregation(udidCardinalityAggregationBuilder)
          .field(fieldName)
          .shardSize((int) shardSize)
          .size((int) size);
    }
    SearchResponse searchResponse = es.client.prepareSearch(indexName)
        .setTypes(indexType)
        .setQuery(boolQueryBuilder)
        .addAggregation(termsAggregationBuilder)
        .execute()
        .actionGet();

    Terms terms = searchResponse.getAggregations().get(termsName);
    List<Map<String, Object>> mapList = new ArrayList<>();
    for (Terms.Bucket entry : terms.getBuckets()) {
      long count = entry.getDocCount();
      log.info("count{}",count);
      Cardinality cardinality = entry.getAggregations().get(cardinalityName);
      String field = entry.getKeyAsString();
      long uniqueCount = cardinality.getValue();
      log.info("uniqueCount{}",uniqueCount);
      log.info("field{}",field);
      Map<String, Object> map = new HashMap<>();
      map.put("count", count);
      map.put("unique_count", uniqueCount);
      map.put("field", field);
      mapList.add(map);
    }
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.CrashStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午9:43 17-12-6.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class CrashStatServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private CrashStatService crashStatService;

  @Autowired
  private CrashInfoService crashInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testCrashRank() throws Exception {
    // 测试启动次数、设备数目
    String appId = "366";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strCountType = "dev_count";
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-23", "2018-01-29");
    JSONObject result = crashStatService
        .crashRank(appId, appVersionList, strCountType, manufacturerList, locationList,
            osVersionList, longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testCrashDist() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strCountType = "count";
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-23", "2018-01-29");
    JSONObject result = crashStatService
        .crashDist(appId, appVersionList, strCountType, manufacturerList, locationList,
            osVersionList, longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testCrashStat() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strCountType = "crash_dev_count";
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String strDistType = "location";
    JSONObject result = crashStatService
        .crashStat(appId, appVersionList, strCountType, manufacturerList, strDistType,
            locationList, osVersionList, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testCrashTrend() throws Exception {
    // 测试启动次数、设备数目
    String appId = "366";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strCountType = "crash_dev_count";
    String starTime = "2018-01-26";
    String endTime = "2018-01-26";
    long[] longsTime = TimeParse.getLongRangeTime(starTime,endTime);
    String strDistType = "location";
    JSONObject result = crashStatService
        .crashTrend(appId, appVersionList, manufacturerList, locationList, osVersionList,
            longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.DataStrategyService;
import com.bangcle.service.RunningInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class DataStrategyServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private RunningInfoService runningInfoService;
  @Autowired
  private DataStrategyService dataStrategyService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }
  @Test
  public void testSave(){
    log.info("time is {}",new Date().getTime());
    List types= new ArrayList();
    types.add("env_check");
    types.add("inject");
    List locations=new ArrayList();
    locations.add("北京");
    locations.add("上海");
    locations.add("河南");
    dataStrategyService.save("367","test",types,locations);
  }
  @Test
  public void testUpdate(){
    List types= new ArrayList();
    types.add("env_check");
    types.add("inject");
    List locations=new ArrayList();
    locations.add("all");
//    locations.add("上哈");
    dataStrategyService.update("test1",types,locations,333,"367");
  }
  @Test
  public void testDelete(){
    dataStrategyService.delete(258,"367");
  }
  @Test
  public void testFindList(){
    JSONObject jsonObject=dataStrategyService.findList("366");
    log.info("result is {}",jsonObject.toString());
//    JSONArray jsonArray=jsonObject.getJSONObject("data").getJSONArray("datalist");
//    for (int i=0;i<jsonArray.size();i++){
//      JSONObject json=jsonArray.getJSONObject(i);
//      log.info("result is {}",json.toString());
//    }
  }
  @Test
  public void testFindById(){
    JSONObject jsonObject= dataStrategyService.findById(259);
    log.info("result is {}",jsonObject.toString());
  }
  @Test
  public void testUpdateStatus(){
    JSONObject jsonObject=dataStrategyService.updateStatus(282,1,"367");
    log.info("result is {}",jsonObject.toString());
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.DevStatService;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class DevStatServiceTest {
  @Autowired
  private DevStatService devStatService;
  @Autowired
  private EsRepository es;
  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }
  @Test
  public void testGetDevAnalyze(){
    JSONObject jsonObject=devStatService.getDevAnalyze("366","7861a0aa-4f21-3747-845a-eb1f0b48ebd2", 1, 10);
    log.info("result is {}",jsonObject.toString());
  }

}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EnvInfoService;
import com.bangcle.service.EnvStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午10:37 17-12-12.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EnvInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EnvInfoService envInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testEnvSort() throws Exception {
    // 测试启动次数、设备数目
    String appId = "100";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = "aa";
    String strSortBy = "desc";
    String strStatType = "location";
    long startTime = 1512057600000L;
    long endTime = 1513045561000L;
    JSONObject result = envInfoService
        .envSort(appId, appVersionList, strEnvType, locationList, manufacturerList, osVersionList,
            strStatType,
            startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEnvList() throws Exception {
    // 测试启动次数、设备数目
    String appId = "367";
    List<String> manufacturerList = null;
    List<String> locationList = new ArrayList<>();
    locationList.add("北京");
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = null;
    String strSortBy = "desc";
    String strSortField = "last_time";
    String strStatType = "location";
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-09", "2018-01-09");
    JSONObject result = envInfoService
        .getEnvList(appId, appVersionList, strEnvType, locationList, manufacturerList,
            osVersionList, strSortField, strSortBy, 1L, 10L,
            longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEnvAnalyze() throws Exception {
    // 测试启动次数、设备数目
    String appId = "369";
    List<String> manufacturerList = null;
    List<String> locationList = new ArrayList<>();
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = null;
    String runKey = "bb021bcd084b30a5ab01ed0aeb9b6cbe";
    String udid = "e7f2bce5-c823-335a-9c3f-f5b6f1579746";
    long[] longsTime = TimeParse.getLongRangeTime("2018-02-27", "2018-02-27");
    JSONObject result = envInfoService
        .getEnvAnalyze(appId, appVersionList, strEnvType, locationList, manufacturerList,
            osVersionList, udid,runKey, longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EnvStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:32 17-12-11.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EnvStatServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EnvStatService envStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testEnvCount() throws Exception {
    // 测试启动次数、设备数目
    String appId = "100";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = "aaa";
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject result = envStatService
        .envCount(appId, appVersionList, strEnvType, locationList, manufacturerList, osVersionList,
            startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEnvTrend() throws Exception {
    // 测试启动次数、设备数目
    String appId = "100";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = "";
    long startTime = 1512057600000L;
    long endTime = 1513045561000L;
    JSONObject result = envStatService
        .envTrend(appId, appVersionList, strEnvType, locationList, manufacturerList, osVersionList,
            startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEnvStat() throws Exception {
    // 测试启动次数、设备数目
    String appId = "100";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = "";
    String strDistType = "location";

    long startTime = 1512057600000L;
    long endTime = 1513045561000L;
    JSONObject result = envStatService
        .envStat(appId, appVersionList, locationList, manufacturerList, osVersionList, strDistType,
            strEnvType, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEnvDist() throws Exception {
    // 测试启动次数、设备数目
    String appId = "100";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strEnvType = null;

    long startTime = 1512057600000L;
    long endTime = 1513045561000L;
    JSONObject result = envStatService
        .envDist(appId, appVersionList, strEnvType, locationList, manufacturerList, osVersionList,
            startTime, endTime);
    log.info(JSON.toJSONString(result));
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EventInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:07 17-12-12.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EventInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EventInfoService eventInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testEventSort() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    int page = 1;
    int size = 10;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String strSortBy = "";
    String strSortField = "";
    String strStatType = "source";
    JSONObject result = eventInfoService.eventSort
        (appId, appVersionList, locationList, manufacturerList,
            osVersionList, page, size, strSortBy, strSortField, strStatType, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EventStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:17 17-12-12.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EventStatServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private EventStatService eventStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testEventCount() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = new ArrayList<>();
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1513152949000L;
    manufacturerList.add("Redmi 4A");
    JSONObject result = eventStatService
        .eventCount(appId, appVersionList,
            manufacturerList,
            locationList, osVersionList, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEventTrend() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject result = eventStatService
        .eventTrend(appId, appVersionList, locationList, manufacturerList,
            osVersionList, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEventLocalDist() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject result = eventStatService
        .eventLocalDist(appId, appVersionList, locationList, manufacturerList,
            osVersionList, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testEventSourceDist() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String startTime = "2017-12-26";
    String endTime = "2017-12-26";
    long[] longsTime = TimeParse.getLongRangeTime(startTime,endTime);
    log.info("longsTime[0]{}",longsTime[0]);
    log.info("longsTime[1]{}",longsTime[1]);
    JSONObject result = eventStatService
        .eventSourceDist(appId, appVersionList, locationList, manufacturerList,
            osVersionList, longsTime[0], longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.ProtectStrategyService;
import com.bangcle.service.RunningInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ProtectStrategyServiceTest {
  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private RunningInfoService runningInfoService;
  @Autowired
  private ProtectStrategyService protectStrategyService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }
  @Test
  public void testFindAll(){
    JSONObject jsonObject=protectStrategyService.findAll("367");
    log.info("result is {}",jsonObject.toString());
  }
  @Test
  public void testUpdateStrategy(){
    JSONObject jsonObject= protectStrategyService.updateStrategy(1,1,355,"373","");
    log.info("result is {}",jsonObject.toString());
  }
  @Test
  public void testFindThreatByStrategy(){
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    List<String> typeList=new ArrayList<>();
    typeList.add("e_location");
    int page = 1;
    int size = 10;
    long startTime = 1512057600000L;
    long endTime = 1517293274000L;
    String strSortBy = "";
    String strSortField = "";
    JSONObject jsonObject= protectStrategyService.findThreatByStrategy("373",manufacturerList,typeList,locationList,osVersionList,appVersionList,startTime,endTime,page,size);
    log.info("result is {}",jsonObject.toString());
  }


}
package com.bangcle.service.common.java.com.bangcle.repository;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EsRepositoryTest {

  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  /**
   * Method: buildClient()
   */
  @Test
  public void testBuildClient() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: bulidBulkProcessor()
   */
  @Test
  public void testBulidBulkProcessor() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: closeClient()
   */
  @Test
  public void testCloseClient() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: closeBulkProcessor()
   */
  @Test
  public void testCloseBulkProcessor() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: buildTemplate(String strTemplateNamePrefixs)
   */
  @Test
  public void testPutTemplate() throws Exception {
    es.putTemplate();
  }

  /**
   * Method: exists(String strIndex)
   */
  @Test
  public void testExists() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: delete(String strIndex)
   */
  @Test
  public void testDelete() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: create(String strIndex, int nShards, int nReplicas)
   */
  @Test
  public void testCreate() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: putMapping(String strIndex, String strType, String strMapping)
   */
  @Test
  public void testPutMapping() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: keepAlive()
   */
  @Test
  public void testKeepAlive() throws Exception {
//TODO: Test goes here...
  }

  /**
   * Method: esInit()
   */
  @Test
  public void testEsInit() throws Exception {
//TODO: Test goes here...
/*
try {
   Method method = EsRepository.getClass().getMethod("esInit");
   method.setAccessible(true);
   method.invoke(<Object>, <Parameters>);
} catch(NoSuchMethodException e) {
} catch(IllegalAccessException e) {
} catch(InvocationTargetException e) {
}
*/
  }

  @Test
  public void testDateToES() throws Exception {
    es.putTemplate();
    String strIndex = "index_zhaogj";
    es.delete(strIndex);
    String strType = "type_zhaogj";
    String strID = "i'm id";
    long lTime = 1234567890;
    JSONObject json = new JSONObject();
    //json.put("dtCreate", DateTimeUtils.getEsDateByLong(lTime));
    String[] arrstrTmp = {"abc", "bcd", "cde"};
    json.put("arrData", arrstrTmp);
    Map<String, Object> mapData01 = new HashMap<>();
    mapData01.put("name", "prog_list");
    mapData01.put("description", "programming list");
    Map<String, Object> mapData02 = new HashMap<>();
    mapData02.put("name", "prog_list2");
    mapData02.put("description", "programming list2");
    List<Map<String, Object>> mapData = new ArrayList<>();
    mapData.add(mapData01);
    mapData.add(mapData02);
    json.put("objmmValues", mapData);
    //Object[] objTmp = {};
    es.client.prepareIndex(strIndex, strType, strID).setSource(json).get();
    //es.delete(strIndex);
  }
}package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.RunningInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:52 17-12-12.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class RunningInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private RunningInfoService runningInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testStartSort() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = new ArrayList<>();
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    locationList.add("北京");
    long page = 1L;
    long size = 10L;
    String startTime = "2017-12-01";
    String endTime = "2017-12-13";
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    String strSortBy = "";
    String strSortField = "";
    JSONObject result = runningInfoService.startSort
        (appId, manufacturerList, locationList, osVersionList, appVersionList, "udid", longsTime[0],
            longsTime[1], page, size, "asc");
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testStartCountTrend() throws ParseException {
    String appId = "367";
    List<String> locationList = new ArrayList<>();
    locationList.add("北京");
    String startTime = "2018-01-01";
    String endTime = "2018-01-11";
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject result = runningInfoService
        .startCountTrend(appId, "8755-00000000-0000-0000-0000-000000008755", longsTime[0],
            longsTime[1]);
    log.info(result.toJSONString());
  }

  @Test
  public void testGetStartSummary() throws ParseException {
    String appId = "367";
    String startTime = "2018-01-01";
    String endTime = "2018-01-16";
    long[] longsTime = TimeParse.getLongRangeTime(startTime, endTime);
    JSONObject jsonObject = runningInfoService
        .getStartSummary(appId, "0ce60efa50e96cc2b210a1f4a263e1b7|367|7461", 1, 10, longsTime[0],
            longsTime[1]);
    log.info(jsonObject.toJSONString());

  }
}
package com.bangcle.service.common.java.com.bangcle.service.common;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class CommonAggServiceTest {

  @Autowired
  private EsRepository es;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testTotalCount() throws  Exception {
    // 测试启动次数、设备数目
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.totalCount(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList ,appVersionList
        , startTime ,endTime, dataTypes, false);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testTrendCount() throws  Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.trendCount(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList ,appVersionList
        , startTime ,endTime, dataTypes);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testStatCountByField() throws  Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONArray result = commonAggService.statCountByField(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList ,appVersionList
        , startTime ,endTime, dataTypes, "model", 0l, false, false);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testSearchList() throws  Exception {
    String indexName = commonBaseService.getStartIndexName();
    String indexTypeName = commonBaseService.getIndexTypeName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject result = commonAggService.searchList(indexName, indexTypeName, appId
        , manufacturerList, locationList, osVersionList ,appVersionList
        , startTime ,endTime, dataTypes, 0l, 0l, null, false);
    log.info(JSON.toJSONString(result));
    log.info("data_list size: {}", result.getJSONArray("data_list").size());
  }


  @Test
  public void testFilterCondition() {
    JSONArray jsonArray = new JSONArray();
    JSONObject jsonObject1 = new JSONObject();
    jsonObject1.put("field", "key1");
    jsonObject1.put("value", "value1");
    jsonArray.add(jsonObject1);

    JSONObject jsonObject2 = new JSONObject();
    jsonObject2.put("field", "key2");
    JSONArray array = new JSONArray();
    array.add("value2");
    jsonObject2.put("value", array);
    jsonArray.add(jsonObject2);

    JSONObject jsonObject3 = new JSONObject();
    jsonObject3.put("field", "key3");
    List<String> list = new ArrayList<>();
    list.add("value3");
    jsonObject3.put("value", list);
    jsonArray.add(jsonObject3);

    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    commonAggService.filterSearchCondition(jsonArray, boolQueryBuilder);
    log.info(boolQueryBuilder.toString());
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.CrashInfoService;
import com.bangcle.service.ThreatInfoService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.service.model.EsFieldModel;
import com.bangcle.util.PubFunc;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.BucketOrder;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 上午11:17 17-12-8.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ThreatInfoServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private ThreatInfoService threatInfoService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testThreatInfo() throws Exception {
    // 测试启动次数、设备数目
    String appId = "373";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = new ArrayList<>();
    List<String> appVersionList = null;
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-26", "2018-01-26");
    String listThreatType = "";
    String strStatType = "location";
    JSONObject result = threatInfoService
        .threatSort(appId, appVersionList, listThreatType, locationList, manufacturerList,
            osVersionList, longsTime[0], longsTime[1], strStatType);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatList() throws Exception {
    // 测试启动次数、设备数目
    String appId = "364";
    List<String> manufacturerList = new ArrayList<>();
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long page = 1;
    long size = 10;
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-08", "2018-01-08");
    String strSortBy = "desc";
    String strSortField = "last_time";
    String listThreatType = null;
    String strStatType = "devinfo";
    JSONObject result = threatInfoService
        .getThreatList(appId, appVersionList, listThreatType, locationList, manufacturerList,
            osVersionList, strStatType, strSortBy, strSortField, page, size, longsTime[0],
            longsTime[1]);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testTimeLine() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String udid = "5325-00000000-0000-0000-0000-000000005325";
    String listThreatType = "";
    JSONObject result = threatInfoService
        .getTimeLine(appId, appVersionList, listThreatType, locationList, manufacturerList,
            osVersionList, udid, startTime, endTime);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatAnalyze() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    String strThreatId = "a7ad59f74b4bba9a34d3ae6d6ed17255|6|7836";
    JSONObject result = threatInfoService.getThreatAnalyze(strThreatId, appId);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testJsonArray2String() {
    String strInfo = "[exception]";
    //strInfo = "[862255039428807, 00000000]";
    String strResult = PubFunc.jsonArray2String(strInfo);
    log.info("strResult:{}", strResult);
  }
}
package com.bangcle.service.common.java.com.bangcle;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.ThreatInfoService;
import com.bangcle.service.ThreatStatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午12:47 17-12-8.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ThreatStatServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private ThreatStatService threatStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testThreatStat() throws Exception {
    // 测试启动次数、设备数目
    String appId = "369";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    int page = 1;
    int size = 10;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String strSortBy = "";
    String strSortField = "";
    String listThreatType = "";
    String strStatType = "location";
    JSONObject result = threatStatService
        .threatStat(appId, manufacturerList, locationList, osVersionList, appVersionList, startTime,
            endTime, null, "risk_count", "location");
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatCount() throws Exception {
    // 测试启动次数、设备数目
    String appId = "369";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long[] longsTime = TimeParse.getLongRangeTime("2018-01-29", "2018-01-29");
    JSONObject result = threatStatService
        .threatCount(appId, manufacturerList, locationList, osVersionList, appVersionList, longsTime[0],
            longsTime[1], "");
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatStatCount() throws Exception {
    // 测试启动次数、设备数目
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    int page = 1;
    int size = 10;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    String strSortBy = "";
    String strSortField = "";
    String listThreatType = "";
    String strStatType = "location";
    JSONObject result = threatStatService
        .threatStatCount(appId, manufacturerList, locationList, osVersionList, appVersionList,
            startTime, endTime, null);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatTrend() throws Exception {
    // 测试启动次数、设备数目
    String appId = "369";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String startTime = "2018-01-29";
    String endTime = "2018-01-29";
    long[] longsTime = TimeParse.getLongRangeTime(startTime,endTime);
    JSONObject result = threatStatService
        .threatTrend(appId, manufacturerList, locationList, osVersionList, appVersionList,
            longsTime[0], longsTime[1], null);
    log.info(JSON.toJSONString(result));
  }

  @Test
  public void testThreatPlotCount() throws Exception {
    // 测试启动次数、设备数目
    String appId = "366";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String startTime = "2018-01-26";
    String endTime = "2018-01-26";
    long[] longsTime = TimeParse.getLongRangeTime(startTime,endTime);
    JSONObject result = threatStatService
        .threatPlotCount(appId, manufacturerList, locationList, osVersionList, appVersionList,
            longsTime[0], longsTime[1], null);
    log.info(JSON.toJSONString(result));
  }
}
package com.bangcle.service.common.java.com.bangcle;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:09 17-12-26.
 */
public class UserServiceTest {

}
package com.bangcle.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.entity.ConfigureBaseList;
import com.bangcle.entity.ConfigureDevList;
import com.bangcle.entity.ConfigureEmulatorList;
import com.bangcle.entity.ConfigureInjectList;
import com.bangcle.repository.ConfigureBaseListRepository;
import com.bangcle.repository.ConfigureDevListRepository;
import com.bangcle.repository.ConfigureEmulatorListRepository;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class configurePlotListServiceTest {
  @Autowired
  private ConfigureDevListService configureDevListService;
  @Autowired
  private ConfigureDevListRepository configureDevListRepository;
  @Autowired
  private  ConfigureEmulatorListService configureEmulatorListService;
  @Autowired
  private ConfigureEmulatorListRepository configureEmulatorListRepository;
  @Autowired
  private ConfigureInjectListService configureInjectListService;
  @Autowired
  private ConfigureBaseListRepository configureBaseListRepository;

  @Test
  public void testCreate() {
//    configureDevListService.create(367, "imei", "1111111111", "msg", "提示", 0, 0);
//    configureDevListService.create(367, "imei", "1111112111221", "msg", "提示", 0, 0);
////    List<Integer> ids = new ArrayList<>();
////    ids.add(164);
////    // ids.add(165);
//////    configureDevListService.delete(367,  ids);
////    configureDevListService.updateRule(367, 165, "quit", "测试退出");
//    JSONObject result = configureDevListService.search(367, null, null,  0);
//    log.info(JSON.toJSONString(result));
////    ConfigureEmulatorList configureEmulatorList = new ConfigureEmulatorList();
////    configureEmulatorList.setAgentId(367);
////    configureEmulatorList.setName("tiantian");
////    configureEmulatorList.setStatus(1);
////    configureEmulatorListRepository.save(configureEmulatorList);
////    log.info(JSON.toJSONString(configureEmulatorListService.list(367)));
//    configureInjectListService.create(367, "某某助手", "com.xx.xx", 1, 0);
//    configureInjectListService.create(367, "某某助手", "com.xx", 0, 1);
//    configureInjectListService.create(367, "某某助手", "com.xx", 1, 1);
//    log.info(JSON.toJSONString(configureInjectListService.list(367)));
//    configureInjectListService.deleteInIds(367, Arrays.asList(new Integer[]{224})); // .delete(367, Arrays.asList(new Integer[]{224}));
//    configureInjectListService.updateStatus(367, Arrays.asList(new Integer[]{223}), 0);
//    for (int i = 0; i < 100; i++) {
//      ConfigureBaseList configureBaseList = new ConfigureBaseList();
//      configureBaseList.setAgentId(11);
//      configureBaseList.setContent("wwww");
//      configureBaseListRepository.save(configureBaseList);
//      log.info("id: {}", configureBaseList.getId());
//    }
//    String string = configureDevListService.getInstruction(367);
//    log.info("---------------- {}", string);
//    configureDevListService.updateInstruction(367, "修改,请勿使用非法设备");
//    string = configureDevListService.getInstruction(367);
//    log.info("---------------- {}", string);
//    String value = "123456789012345 23333";
//    log.info("==== {}", configureDevListService.filterValue(value));
//    value = "123456789012345 1234567890123451234567890123451234567890123451234556";
//    log.info("==== {}", configureDevListService.filterValue(value));
//    configureDevListService.batchCreate(367, configureDevListService.filterValue(value), "msg", 1, 1);
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:05 18-1-11.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class DevStatServiceTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private DevStatService devStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testDevSummary(){
    String appId = "367";
    String udid = "4313-00000000-0000-0000-0000-000000004313";
    JSONObject jsonObject = devStatService.getDevSummary(appId, udid);
    log.info(JSONObject.toJSONString(jsonObject));
  }
}
package com.bangcle.service;

import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ESRelatedQueryServiceImplTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private ESRelatedQueryService esRelatedQueryService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void getTimeZoneFromStartMessageTest() throws Exception {
    String udid = "87a9789b-0426-3270-a441-2b137052001e";
    String agentid = "369";
    String content = esRelatedQueryService.getTimeZoneFromStartMessage(udid, agentid);

    log.info(content);
  }

  @Test
  public void getGyroFromGyroMessageTest() throws Exception {
    String udid = "41473768-2122-3577-b3a1-898ecd4551bf";
    String agentid = "369";
    String content = esRelatedQueryService.getGyroFromGyroMessage(udid, agentid);

    log.info(content);
  }


}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import com.bangcle.util.TimeParse;
import java.text.ParseException;
import java.util.Iterator;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EventInfoServiceTest {

  @Autowired
  private EsRepository es;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private EventInfoService eventStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void eventSortTest() {
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject jsonObject = eventStatService
        .eventSort(appId, appVersionList, locationList, manufacturerList, osVersionList, 1, 10,
            "desc", "event_dev_count", "source", startTime, endTime);
    JSONArray jsonArray = jsonObject.getJSONArray("dataList");
    Iterator it = jsonArray.iterator();
    while (it.hasNext()) {
      JSONObject json = (JSONObject) it.next();
      log.info("josn is {},{},{},{}", json.get("event_count"), json.get("event_dev_count"));
    }
  }

  @Test
  public void testGetEventList() {
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String strStatType = "devinfo";
    String strSortField = "count";
    String strSortBy = "desc";
    String strIp = "172.16.19.107";
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject jsonObject = eventStatService
        .getEventList(appId, appVersionList, locationList, manufacturerList, osVersionList, strIp,
            1L, 10L, strStatType, strSortField, strSortBy, startTime, endTime);
    log.info(JSONObject.toJSONString(jsonObject));
  }

  @Test
  public void testEventTimeLine() throws ParseException {
    String appId = "367";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    String udid = "7249-00000000-0000-0000-0000-000000007249";
    long[] longsTime = TimeParse.getLongRangeTime("2017-12-17", "2018-01-16");
    JSONObject jsonObject = eventStatService
        .eventTimeLine(appId, appVersionList, locationList, manufacturerList, osVersionList, udid,
            longsTime[0], longsTime[1]);
    log.info(JSONObject.toJSONString(jsonObject));
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EventStatServiceTest {

  @Autowired
  private EsRepository es;
  @Autowired
  private CommonAggService commonAggService;
  @Autowired
  private CommonBaseService commonBaseService;
  @Autowired
  private EventStatService eventStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testEventCount() {
    // 测试启动次数、设备数目
    String indexName = commonBaseService.getThreatIndexName();
    String indexTypeName = commonBaseService.getThreatIndexName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject jsonObject = eventStatService
        .eventCount(appId, appVersionList, locationList, manufacturerList, osVersionList, startTime,
            endTime);
    log.info("josn is {},{},{},{}", jsonObject.getLong("event_count"),
        jsonObject.getLong("event_dev_count"), jsonObject.getLong("event_source_count"),
        jsonObject.getLong("location_count"));
  }

  @Test
  public void testEventTrend() {
    // 测试启动次数、设备数目
    String indexName = commonBaseService.getThreatIndexName();
    String indexTypeName = commonBaseService.getThreatIndexName();
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    List<String> dataTypes = null;
    JSONObject jsonObject = eventStatService
        .eventTrend(appId, appVersionList, locationList, manufacturerList, osVersionList, startTime,
            endTime);
    log.info("josn is {},{},{},{}", jsonObject.get("coord_list"));
  }

  @Test
  public void testEventLocalDist() {
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject jsonObject = eventStatService
        .eventLocalDist(appId, appVersionList, manufacturerList, locationList, osVersionList,
            startTime, endTime);
    log.info("josn is {},{},{},{}", jsonObject.get("dataList"));
  }

  @Test
  public void testEventSourceDist() {
    String appId = "6";
    List<String> manufacturerList = null;
    List<String> locationList = null;
    List<String> osVersionList = null;
    List<String> appVersionList = null;
    long startTime = 1512057600000L;
    long endTime = 1515340800000L;
    JSONObject jsonObject = eventStatService
        .eventSourceDist(appId, appVersionList, manufacturerList, locationList, osVersionList,
            startTime, endTime);
    log.info("josn is {},{},{},{}", jsonObject.get("dataList"));
  }

}
package com.bangcle.service.impl;

import static org.junit.Assert.*;

import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.repository.HbaseRepository;
import com.bangcle.service.DevStatService;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Created by zhusiwei on 2018/4/4.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class DevStatServiceImplTest {
  @Autowired
  private EsRepository es;
  @Autowired
  private HbaseRepository hbaseRepository;
  @Autowired
  private DevStatService devStatService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
    hbaseRepository.init();
    //log.info("hbaseRepository.connection = {}",hbaseRepository.getConnection());
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
    hbaseRepository.closeConnection();
  }

  @Test
  public void getDevSummary() throws Exception {

    log.info("{}",devStatService.getDevSummary("1","1000-00000000-0000-0000-0000-000000001000"));
  }

}package com.bangcle.service.impl;

import static org.junit.Assert.*;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.EventInfoService;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Created by zhusiwei on 2018/2/28.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class EventInfoServiceImplTest {

  @Autowired
  private EventInfoService eventInfoService;

  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void getEventAnalyze() throws Exception {
    String strIndexName = "bangcle_event_safe_20180227";
    String strIndexType = "bangcle_type";
    String strEventId = "c79c6a0f10f09f6242ccde6ae6d00db5|1|6068|6180";
    String agentId = "1";
    try {
      JSONObject data = eventInfoService
          .getEventAnalyze(agentId, strIndexName, strIndexType, strEventId);
      System.out.println(data);
    } catch (Exception e) {
      log.error("error", e);
    }
  }

}package com.bangcle.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.MsspApiService;
import com.bangcle.service.common.CryptService;
import com.bangcle.util.AESUtils;
import com.google.common.io.Files;
import java.io.File;
import java.nio.charset.Charset;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Created by zhusiwei on 2018/4/17.
 */
@Slf4j
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
public class MsspApiServiceImplTest {

  @Autowired
  MsspApiService msspApiService;
  @Autowired
  private CryptService cryptService;
  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void heartbeat() throws Exception {
    JSONObject result = msspApiService.heartbeat(null);
    log.info("result = {}", result);
  }

  @Test
  public void register() throws Exception {

    File license = new File("/Users/zhusiwei/tmpfile/安控测试_b1cbc5e689b02d5c5190405372460253.lic");
    List<String> lines = Files.readLines(license, Charset.forName("UTF-8"));
    JSONObject dataJsonObject = new JSONObject();
    JSONArray appList = new JSONArray();
    for (String line : lines) {
      JSONObject json = JSON.parseObject(cryptService.decryptLicenseString(line));
      if (json.get("user_name") != null) {
        dataJsonObject.put("userLicense", line);
        Files.append(line, new File("/Users/zhusiwei/tmpfile/user.lic"), Charset.defaultCharset());
      } else if (json.get("app_id") != null) {
        appList.add(line);
      }
    }
    dataJsonObject.put("appLicense", appList);
    JSONObject result = msspApiService.register(dataJsonObject);
    log.info("result = {}", result);
  }

  @Test
  public void registerOperator() throws Exception {
    JSONObject dataJsonObject = new JSONObject();
    /*File license = new File("/Users/zhusiwei/tmpfile/user.lic");
    List<String> lines = Files.readLines(license, Charset.forName("UTF-8"));
    for (String line : lines) {
      dataJsonObject.put("userLicense", line);
      JSONObject json = JSON.parseObject(cryptService.decryptLicenseString(line));
      log.info("json = {}", json);
    }*/
    dataJsonObject.put("username", "mssptest");
    String line = "EMgwKVHq/u/2Te2yMrFx9pm17vLY2/Y0bPRKZDcxVu0DoJ8LTi9EW0u5277q4XwhJHGABQBkBblsH5QCrMqJCS7B0D026WamjitRyVPq7Tmvgp1E5wfk04dYb8MqEKIyAu8IorPrPsCaM953WGzpKhgvkhWKA1sU/FsVkX/5T0NF670aYRAux6uygVeg183P4qucMU25gCs8j90qJHOM0EnG9JB+UeWr2r1ZRfjbFYyi8gVYacXMycpif9OlLvPjMztJiVmoJ1hLvs5rYTEJxmuuz2melEWNhdvUo+sy5QFU4NZ3fHqOuGPmAOuW2Xx1aJyqeFKKqw34oTfq0Qf5kQ==";
    dataJsonObject.put("userLicense", line);
    dataJsonObject.put("app_id", 459);
    JSONObject result = msspApiService.registerOperator(dataJsonObject);
    log.info("result = {}", result);
  }

  @Test
  public void getLoginKey() throws Exception {
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("username", "mssptest");
    JSONObject result = msspApiService.getLoginKey(dataJsonObject);
    log.info("result = {}", result);
  }

  @Test
  public void login() throws Exception {
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("username", "mssptest");
    dataJsonObject.put("key", "PkwinJBmLTccOiIZEaCpSihXbnFYfxfnWVKnUeHhTtPDjAVdfrBweNmlThQLyenL");
    JSONObject result = msspApiService.login(dataJsonObject);
    log.info("result = {}", result);
  }

  @Test
  public void getRiskInfo() throws Exception {
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("start_date", "2018-04-20");
    dataJsonObject.put("end_date", "2018-04-20");
    JSONArray appIds = new JSONArray();
    appIds.add(459);
    dataJsonObject.put("app_ids", appIds);
    JSONObject result = msspApiService.getRiskInfo(dataJsonObject);
    File file = new File("/Users/zhusiwei/tmpfile/mssp_result.txt");
    Files.append(result.toString(), file, Charset.forName("UTF-8"));
    log.info("result = {}", result);
  }

  @Test
  public void getListInfos() throws Exception {
    JSONObject dataJsonObject = new JSONObject();
    dataJsonObject.put("start_date", 1524182400000L);
    dataJsonObject.put("end_date", 1524268800000L);
    dataJsonObject.put("end_date", 1524268800000L);
    dataJsonObject.put("limit", "10");
    JSONArray appIds = new JSONArray();
    appIds.add(460);
    dataJsonObject.put("app_ids", appIds);
    JSONObject result = msspApiService.getListInfos(dataJsonObject);
    File file = new File("/Users/zhusiwei/tmpfile/mssp_ListInfos.txt");
    Files.append(result.toString(), file, Charset.forName("UTF-8"));
    log.info("result = {}", result);
  }

  @Test
  public void data() {
    JSONObject data = new JSONObject();
    data.put("username", "mssptest");
    data.put("key", "xrjLlbsYhREHhwtjoJpVxsrwtMTIqLussqbIFFEZBMkeRTygQWl");
    String retData = JSON.toJSONString(data);
    String info = AESUtils.msspEncrypt(retData, "09cf2dd511ae7c1b");
    log.info("retData = {}", info);
  }

  @Test
  public void getMonitorInfo() {
    JSONObject data = new JSONObject();
    JSONArray appIds = new JSONArray();
    appIds.add(1);
    data.put("app_ids", appIds);
    JSONObject result = msspApiService.getMonitorInfo(data);
    log.info("result ==== {}", result);
  }
}package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.util.TimeParse;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.servlet.ModelAndView;

/**
 * Created by zhusiwei on 2018/3/8.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ReportFormsServiceImplTest {

  @Autowired
  ReportFormsServiceImpl reportFormsService;
  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void getReportFormsData() throws Exception {
//查数据库
    JSONObject overview = new JSONObject();
    overview.put("numAgentId", "369");


    overview.put("strOsInfos", "[]");

    JSONArray app_infos = new JSONArray();
    app_infos.add("测试数据");
    overview.put("strAppInfos", app_infos) ;
    long[] longsTime = TimeParse.getLongRangeTime("2018-03-12", "2018-03-13");
    overview.put("dateBeginTime", longsTime[0]);
    overview.put("dateEndTime", longsTime[1]);
    log.info("start_time = {}, end_time = {}", longsTime[0], longsTime[1]);

    JSONArray report_type = new JSONArray();
    report_type.add("home");
    report_type.add("threat");
    report_type.add("crash");
    report_type.add("run");

    //report_type.add("threat");
    //report_type.add("crash");
    //report_type.add("run");
    overview.put("strReportType", report_type);

    overview.put("app_version", "[]");
    overview.put("manufacturer", "[]");
    overview.put("strLocations", "[]");
    overview.put("os_version", "[]");

    overview.put("id",01);
    overview.put("reportId",01);

    try {
      reportFormsService.getReportFormsData(overview, overview,"");
    } catch (Exception e) {
      log.error("error", e);
    }
  }

}package com.bangcle.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.DevStatService;
import com.bangcle.service.StatService;
import com.bangcle.service.common.CommonAggService;
import com.bangcle.service.common.CommonBaseService;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午5:15 18-3-23.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class StatServiceImplTest {

  @Autowired
  private EsRepository es;

  @Autowired
  private CommonAggService commonAggService;

  @Autowired
  private CommonBaseService commonBaseService;

  @Autowired
  private StatService statService;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Test
  public void testActiveDevCount() {
    JSONObject jsonObject = statService.getActiveDevCount("1");
    log.info(JSONObject.toJSONString(jsonObject));
  }

  @Test
  public void testRealTimeMonitor() {
    String strAgentId = "1";
    List<String> listLocations = new ArrayList<>();
    List<String> listOsVersions = new ArrayList<>();
    List<String> listAppVersions = new ArrayList<>();
    List<String> listMonitorTypes = new ArrayList<>();
    /*listMonitorTypes.add("event");
    listMonitorTypes.add("threat");
    listMonitorTypes.add("start");*/
    listMonitorTypes.add("env");
    List<String> listModels = new ArrayList<>();
    JSONObject jsonObject = statService
        .realTimeMonitor(strAgentId, listMonitorTypes, listModels, listLocations, listOsVersions,
            listAppVersions, null);
    log.info("jsonObject.toJSONString():{}", jsonObject.toJSONString());
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.util.PubString;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class InjectionAttacksConfigServiceTest {

  @Autowired
  private InjectionAttacksConfigService injectionAttacksConfigService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }


  @Test
  public void systemSoConfigSaveTest() throws Exception {
    injectionAttacksConfigService.systemSoConfigSave("name2", "systemSoName2", "functionName2", 99);
  }

  @Test
  public void systemSoConfigStatusUpdateTest() throws Exception {
    Integer[] ids = {170};
    injectionAttacksConfigService.systemSoConfigStatusUpdate(PubString.START_STATUS, ids, 99);
  }

  @Test
  public void systemSoConfigSelectTest() throws Exception {
    JSONObject jsonObject = injectionAttacksConfigService.systemSoConfigSelect(99);
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void systemSoConfigDeleteTest() throws Exception {
    Integer[] ids = {170};
    injectionAttacksConfigService.systemSoConfigDelete(ids, 99);
  }


  @Test
  public void appSoConfigSaveTest() throws Exception{
    injectionAttacksConfigService.appSoConfigSave("name2","sourcename2","functionname2","appsoname2",99);
  }

  @Test
  public void appSoConfigStatusUpdateTest() throws Exception{
    Integer[] ids = {170};
    injectionAttacksConfigService.appSoConfigStatusUpdate(PubString.START_STATUS, ids, 99);
  }

  @Test
  public void appSoConfigSelectTest() throws Exception{
    JSONObject jsonObject = injectionAttacksConfigService.appSoConfigSelect(99);
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void appSoConfigDeleteTest() throws Exception{
    Integer[] ids = {170};
    injectionAttacksConfigService.appSoConfigDelete(ids, 99);
  }

  @Test
  public void soLibrarySaveTest() throws Exception{
    injectionAttacksConfigService.soLibrarySave("solibraryname",99);
  }

  @Test
  public void soLibrarySelectTest() throws Exception{
    JSONObject jsonObject = injectionAttacksConfigService.soLibrarySelect(100);

    if(jsonObject!=null){
      log.info(jsonObject.toJSONString());
    }else{
      log.info("is null............");
    }


  }

  @Test
  public void xPosedConfigSaveTest() throws Exception{
    injectionAttacksConfigService.xPosedConfigSave("name2","xposedfeature2","functionname2","className2",99);
  }

  @Test
  public void xPosedConfigStatusUpdateTest() throws Exception{
    Integer[] ids = {170};
    injectionAttacksConfigService.xPosedConfigStatusUpdate(PubString.START_STATUS,ids, 99);
  }

  @Test
  public void xPosedConfigSelectTest() throws Exception{
    JSONObject jsonObject =  injectionAttacksConfigService.xPosedConfigSelect(99);
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void xPosedConfigDeleteTest() throws Exception{
    Integer[] ids = {170};
    injectionAttacksConfigService.xPosedConfigDelete(ids, 99);
  }



}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午8:55 18-3-23.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class LicenseServiceTest {

  @Autowired
  private LicenseService licenseService;

  @Test
  public void testGetRemainTime(){
    JSONObject result = licenseService.getRemainTime(396);
    log.info(result.toJSONString());
  }

  @Test
  public void testGetLicenseDetail(){
    JSONObject result = licenseService.getLicenseDetail("");
    log.info(result.toJSONString());
  }
}
package com.bangcle.service;

import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.service.model.report.IndexEventModel;
import com.bangcle.service.model.report.IndexLocationModel;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.jxls.common.Context;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ReportGenerateServiceTest {
  @Autowired
  private ReportGenerateService reportGenerateService;

  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    es.closeBulkProcessor();
    es.closeClient();
  }
  @Test
  public void gen() throws  Exception {
    String templatePath = "/home/lixiang/tmp/report/standard_template.xls";
    String destPath = "/home/lixiang/tmp/report/综合态势.xls";
    List<IndexLocationModel> indexLocationModelList = new ArrayList<>();
    List<IndexEventModel> indexEventModelList = new ArrayList<>();
    for (int i = 0; i < 200; i++) {
      if (i < 30) {
        IndexLocationModel indexLocationModel = new IndexLocationModel("北京" + i,
            30L * i, 20L * i, 10L * i, 5L * i, 3L * i, 2L * i, 1L * i);
        indexLocationModelList.add(indexLocationModel);
      }
      IndexEventModel indexEventModel = new IndexEventModel("2017-04-0" + i + 1, 50L * i, 20L * i);
      indexEventModelList.add(indexEventModel);
    }
    Context context = new Context();
    context.putVar("indexLocations", indexLocationModelList);
    context.putVar("indexEvents", indexEventModelList);
    reportGenerateService.genTargetFromSource(context, templatePath, destPath);
  }

  @Test
  public void test(){
    //reportGenerateService.genDataFromId(2439);
    reportGenerateService.genReportFromId(1924);
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipOutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午2:33 18-4-10.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ReportListServiceTest {

  @Autowired
  private ReportListService reportListService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }

  @Test
  public void getReportListTest() throws ParseException {
    int numAgentId = 369;
    int numTaskId = 1;
    String strBeginTime = "2018-04-07";
    String strEndTime = "2018-04-10";
    int numPage = 1;
    int numSize = 10;
    JSONObject result = reportListService
        .getReportList(numAgentId, numTaskId, strBeginTime, strEndTime, numPage, numSize);
    log.info(result.toJSONString());
  }

  @Test
  public void getReportTaskNamesTest() throws Exception {
    int numAgentId = 369;
    JSONObject result = reportListService.getReportTaskNames(numAgentId);
    log.info(result.toJSONString());
  }

  public File getFiles(String path) throws Exception {
    File filePath = new File(path);
    File[] files = filePath.listFiles();
    for (File f:files){
      if (f.getName().endsWith(".xls")){
        return f;
      }
    }
    return null;
  }

  @Test
  public void downloadZipFile() throws IOException {

    List<String> fileNames = Arrays.asList("test report-20180408.xls","test report-20180409.xls");
    String strZipPath = "/home/panyj/report.zip";
    ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(strZipPath));

    for(String fileName : fileNames) {
      ZipEntry zipEntry = new ZipEntry(fileName);
      zipOutputStream.putNextEntry(zipEntry);
      FileInputStream inputStream = new FileInputStream("/home/panyj/webservice/report/369_1582_1596/data/"+fileName);
      IOUtils.copy(inputStream,zipOutputStream);
      inputStream.close();
    }

    zipOutputStream.closeEntry();
    zipOutputStream.close();
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.entity.ReportTaskManage;
import com.bangcle.repository.ReportTaskManageRepository;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午6:24 18-4-8.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ReportTaskManageServiceTest {

  @Autowired
  private ReportTaskManageService reportTaskManageService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }

  @Test
  public void reportTaskCreateTest() throws InterruptedException {
    int numAgentId = 369;
    JSONArray arrayAppInfos = new JSONArray();
    arrayAppInfos.add("android 3.0");
    JSONArray arrayLocations = new JSONArray();
    arrayLocations.add("北京");
    JSONArray arrayOsInfos = new JSONArray();
    arrayOsInfos.add("android 9.1");
    JSONArray arrayReportTypes = new JSONArray();
    arrayReportTypes.add("home");
    String strTaskName = "test report12";
    int numTaskCycle = 2;
    String strBeginTime = "2018-03-01";
    String strEndTime = "2019-03-01";
    JSONObject result = reportTaskManageService
        .reportTaskCreate(numAgentId, arrayAppInfos, arrayLocations, arrayOsInfos, arrayReportTypes,
            strTaskName, numTaskCycle, strBeginTime, strEndTime);
    log.info(result.toJSONString());
  }

  @Test
  public void reportTaskInfoTest() {
    int numAgentId = 369;
    int numId = 1582;
    JSONObject result = reportTaskManageService
        .reportTaskInfo(numAgentId, numId);
    log.info(result.toJSONString());
  }

  @Test
  public void reportTaskListTest() throws ParseException {
    int numAgentId = 369;
    int numPage = 1;
    int numSize = 10;
    JSONObject result = reportTaskManageService
        .reportTaskList(numAgentId, numPage, numSize);
    log.info(result.toJSONString());
  }

  @Test
  public void reportTaskUpdateTest() {
    int numAgentId = 369;
    JSONArray arrayAppInfos = new JSONArray();
    arrayAppInfos.add("android 3.0");
    JSONArray arrayLocations = new JSONArray();
    arrayLocations.add("西安");
    JSONArray arrayOsInfos = new JSONArray();
    arrayOsInfos.add("android 9.1");
    JSONArray arrayReportTypes = new JSONArray();
    arrayReportTypes.add("home");
    String strTaskName = "test report";
    int numTaskCycle = 2;
    String strBeginTime = "2018-03-01";
    String strEndTime = "2019-03-01";
    int numId = 1582;
    JSONObject result = reportTaskManageService
        .reportTaskUpdate(numAgentId, arrayAppInfos, arrayLocations, arrayOsInfos, arrayReportTypes,
            strTaskName, numTaskCycle, strBeginTime, strEndTime, numId);
    log.info(result.toJSONString());
  }

  @Test
  public void reportTaskDeleteTest() {
    int numAgentId = 369;
    int numId = 1593;
    JSONObject result = reportTaskManageService
        .reportTaskDelete(numAgentId, numId);
    log.info(result.toJSONString());
  }

  @Test
  public void reportTaskStatusTest() throws ParseException {
    int numAgentId = 369;
    int numId = 1591;
    int numStatus = 1;
    JSONObject result = reportTaskManageService
        .reportTaskStatus(numAgentId, numId, numStatus);
    log.info(result.toJSONString());
  }

  @Test
  public void testCreateSubReport() throws Exception {
//    ReportTaskManage reportTaskManage = reportTaskManageRepository.findById(1830);
//    reportTaskManageService.createSubReport(reportTaskManage);
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSONArray;
import com.bangcle.Application;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * author email: yongjin.pan@bangcle.com version time: 下午4:24 18-1-20.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class SafeEventServiceTest {

  @Autowired
  private SafeEventService safeEventService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }

  @Test
  public void safeEventListTest(){
    JSONArray jsonArray = safeEventService.safeEventList(367);
    log.info(jsonArray.toJSONString());
  }
}
package com.bangcle.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import java.util.ArrayList;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class SearchServiceTest {

  @Autowired
  private SearchService searchService;
  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @Test
  public void testSearch() {
    List<String> fieldList = new ArrayList<>();
    fieldList.add("4830-00000000-0000-0000-0000-000000004830");
    JSONObject jsonObject = searchService.search("367", null, null, null, null,
    0L, 1515576880000L, null, null, fieldList, 1L, 10L, null);
    JSONArray array = jsonObject.getJSONArray("data_list");
    for (Object object :  array) {
      JSONObject jsonObject1 = (JSONObject) object;
      log.info(JSON.toJSONString(jsonObject1));
    }
    log.info(JSON.toJSONString(jsonObject));
  }

  @Test
  public void testFilter() {
    String value = "sss   2222 \n sddd";
    List<String> list = searchService.filterDuckCondition(value);
    for (String str : list) {
      log.info(str + "|");
    }
  }
}
package com.bangcle.service;

import com.bangcle.Application;
import com.bangcle.repository.EsRepository;
import com.bangcle.thread.CreatReportThread;
import com.bangcle.thread.PushSubReportTaskThread;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Created by zhusiwei on 2018/4/27.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class SubReportTaskTest {

  @Autowired
  private EsRepository es;

  @Before
  public void before() throws Exception {
    es.buildClient();
    es.buildBulkProcessor();
  }

  @After
  public void after() throws Exception {
    Thread.sleep(1000 * 60);
    es.closeBulkProcessor();
    es.closeClient();
  }

  @Autowired
  private PushSubReportTaskThread pushSubReportTaskThread;
  @Autowired
  private CreatReportThread creatReportThread;

  @Test
  public void PushSubReportTaskThread() {
    pushSubReportTaskThread.pushSubTaskOnce();
    log.info("push subTaskId = {}", CreatReportThread.subTaskId.toString());
    creatReportThread.creatReport();
    log.info("task subTaskId = {}", CreatReportThread.subTaskId.toString());

  }

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import java.util.Date;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ThreadHostFraudServiceTest {

  @Autowired
  private ThreatHostFraudService threatHostFraudService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }


  @Test
  public void cheatHostConfigInsertTest() throws Exception {
    JSONObject jsonObject = threatHostFraudService
        .cheatHostConfigInsert(100, "www.test01.com  ", "10.10.10.10  ");
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void cheatHostConfigListTest() throws Exception {
    JSONObject jsonObject = threatHostFraudService.cheatHostConfigList(100);
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void cheatHostConfigDeleteTest() throws Exception {
    Integer[] ids = {882,883};
    JSONObject jsonObject = threatHostFraudService.cheatHostConfigDelete(100, ids);
    log.info(jsonObject.toJSONString());
  }

}
package com.bangcle.service;

import com.alibaba.fastjson.JSONObject;
import com.bangcle.Application;
import java.util.Date;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@Slf4j
public class ThreadLocationFraudServiceTest {

  @Autowired
  private ThreatLocationFraudService threatLocationFraudService;

  @Before
  public void before() throws Exception {
  }

  @After
  public void after() throws Exception {
  }


  @Test
  public void cheatAddrConfigInsertTest() throws Exception{

    threatLocationFraudService.cheatAddrConfigInsert(100.0,15,367,new Date());
  }

  @Test
  public void cheatAddrConfigSelectTest() throws Exception{
    JSONObject jsonObject = threatLocationFraudService.cheatAddrConfigSelect(99);
    log.info(jsonObject.toJSONString());
  }

  @Test
  public void cheatAddrConfigUpdateTest() throws Exception{
    threatLocationFraudService.cheatAddrConfigUpdate(2.0,40,360, 367);
  }

}
package com.bangcle.util;


import com.bangcle.Application;
import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@SpringBootTest(classes = Application.class)
@Slf4j
public class TimeParseTest {
  @Test
  public void testGetOldRangeTime() throws  Exception{
    // 时间跨度跨天的测试
    long startTime = 1512230400000L;
    long endTime = 1512478523000L;
    long mustOldStartTime = 1511971200000L;
    long mustOldEndTime = 1512230399000L;
    long[] rangeTimes = TimeParse.getOldRangeTime(startTime, endTime);
    // 不跨天的
    long startTime1 = 1512489600000L;
    long endTime1 = 1512528600000L;
    long mustOldStartTime1 = 1512403200000L;
    long mustOldEndTime1 = 1512489599000L;
    long[] rangeTimes1 = TimeParse.getOldRangeTime(startTime1, endTime1);
    Assert.assertEquals(mustOldStartTime, rangeTimes[0]);
    Assert.assertEquals(mustOldEndTime, rangeTimes[1]);
    Assert.assertEquals(mustOldStartTime1, rangeTimes1[0]);
    Assert.assertEquals(mustOldEndTime1, rangeTimes1[1]);
  }
}
